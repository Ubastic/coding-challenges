{"python": {"6 kyu": [{"name": "Multirange iterator", "link": "https://www.codewars.com/kata/56bc72f866a2ab1890000be0", "kuy": "6 kyu", "solutions": {"python": ["def multiiter(*p):\n    if p and all(p):\n        next_demension = [*multiiter(*p[1:])] or [()]\n        yield from ((i, *n) for i in range(p[0]) for n in next_demension)"]}}, {"name": "String Letter Counting", "link": "https://www.codewars.com/kata/59e19a747905df23cb000024", "kuy": "6 kyu", "solutions": {"python": ["from string import ascii_lowercase as letters\n\ndef string_letter_count(s):\n    s = s.lower()\n    return \"\".join(f\"{s.count(c)}{c}\" for c in letters if s.count(c))"]}}, {"name": "Find within array", "link": "https://www.codewars.com/kata/51f082ba7297b8f07f000001", "kuy": "6 kyu", "solutions": {"python": ["def find_in_array(seq, predicate): \n    return next((i for i, v in enumerate(seq) if predicate(v, i)), -1)"]}}, {"name": "Difference of 2", "link": "https://www.codewars.com/kata/5340298112fa30e786000688", "kuy": "6 kyu", "solutions": {"python": ["def twos_difference(lst): \n    return sorted(tuple(sorted((a, b))) for i, a in enumerate(lst) for b in lst[i+1:] if abs(a - b) == 2)"]}}, {"name": "uniq (UNIX style)", "link": "https://www.codewars.com/kata/52249faee9abb9cefa0001ee", "kuy": "6 kyu", "solutions": {"python": ["from itertools import groupby\n\ndef uniq(seq):\n    return [s for s, _ in groupby(seq)]"]}}, {"name": "Breaking search bad", "link": "https://www.codewars.com/kata/52cd53948d673a6e66000576", "kuy": "6 kyu", "solutions": {"python": ["def search(titles, term):\n    return [t for t in titles if term in t.lower()]", "def search(titles, term): \n    return list(filter(lambda title: term in title.lower(), titles))"]}}, {"name": "Encrypt this!", "link": "https://www.codewars.com/kata/5848565e273af816fb000449", "kuy": "6 kyu", "solutions": {"python": ["def encrypt_this(text):\n    return \" \".join(\n        str(ord(s[0])) + (s[1] if len(s) == 2 else s[-1] + s[2:-1] + s[1] if len(s) > 2 else \"\")\n        for s in text.split()\n    )"]}}, {"name": "One is the loneliest number", "link": "https://www.codewars.com/kata/5dfa33aacec189000f25e9a9", "kuy": "6 kyu", "solutions": {"python": ["def loneliest(n):\n    arr = [*map(int, str(n))]\n    mapped = sorted((sum(arr[max(i - c, 0): i] + arr[i + 1: i + 1 + c]), c) for i, c in enumerate(arr))\n    min_val = min(i for i, _ in mapped)\n    return any(i == 1 and v == min_val for v, i in mapped)"]}}, {"name": "regex pattern to check if string has all characters", "link": "https://www.codewars.com/kata/5e4eb72bb95d28002dbbecde", "kuy": "6 kyu", "solutions": {"python": ["def regex_contains_all(st): \n    return f'.*{\"\".join(rf\"(?=.*{s})\" for s in st)}.*';"]}}, {"name": "DefaultList", "link": "https://www.codewars.com/kata/5e882048999e6c0023412908", "kuy": "6 kyu", "solutions": {"python": ["class DefaultList(list):\n    def __init__(self, l, default):\n        super().__init__(l)\n        self.default = default\n\n    def __getitem__(self, item):\n        try:\n            return super().__getitem__(item)\n        except IndexError:\n            return self.default"]}}, {"name": "PatternCraft - Decorator", "link": "https://www.codewars.com/kata/5682e545fb263ecf7b000069", "kuy": "6 kyu", "solutions": {"python": ["class Marine:\n    def __init__(self, damage, armor):\n        self.armor = armor\n        self.damage = damage\n\n\nclass MarineDecorator:\n    def __init__(self, marine):\n        self.marine = marine\n\n    @property\n    def damage(self):\n        return self.marine.damage\n\n    @property\n    def armor(self):\n        return self.marine.armor\n\n\nclass Marine_weapon_upgrade(MarineDecorator):\n    @property\n    def damage(self):\n        return super().damage + 1\n\n\nclass Marine_armor_upgrade(MarineDecorator):\n    @property\n    def armor(self):\n        return super().armor + 1"]}}, {"name": "Unpack", "link": "https://www.codewars.com/kata/56ee74e7fd6a2c3c7800037e", "kuy": "6 kyu", "solutions": {"python": ["from itertools import chain\n\n\ndef unpack(l):\n    if isinstance(l, dict):\n        return unpack([*chain(*l.items())])\n    elif isinstance(l, (int, str, type(None))):\n        return [l]\n    return [*chain(*map(unpack, l))]"]}}, {"name": "Expected Type Decorator", "link": "https://www.codewars.com/kata/56f411dc9821795fd90011d9", "kuy": "6 kyu", "solutions": {"python": ["class UnexpectedTypeException(Exception):\n    pass\n\ndef expected_type(return_types):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            ret = func(*args, **kwargs)\n            if not isinstance(ret, return_types):\n                raise UnexpectedTypeException\n            return ret\n        return wrapper\n    return decorator"]}}, {"name": "Timer Decorator", "link": "https://www.codewars.com/kata/56f84d093b164c2e490013cb", "kuy": "6 kyu", "solutions": {"python": ["from time import time\n\ndef timer(limit):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            s = time()\n            func(*args, **kwargs)\n            return time() - s <= limit\n        return wrapper\n    return decorator"]}}, {"name": "Get root property name", "link": "https://www.codewars.com/kata/598638d7f3a2c489b2000030", "kuy": "6 kyu", "solutions": {"python": ["def get_root_property(d, v):\n    return v in d if isinstance(d, list) else next((k for k in d if get_root_property(d[k], v)), None)"]}}, {"name": "Break camelCase", "link": "https://www.codewars.com/kata/5208f99aee097e6552000148", "kuy": "6 kyu", "solutions": {"python": ["import re\n\ndef solution(s):\n    return re.sub(r\"(?=[A-Z])\", \" \", s)"]}}, {"name": "Array Exchange", "link": "https://www.codewars.com/kata/5353212e5ee40d4694001114", "kuy": "6 kyu", "solutions": {"python": ["def exchange_with(a, b):\n    a[:], b[:] = b[::-1], a[::-1]"]}}, {"name": "More Zeros than Ones", "link": "https://www.codewars.com/kata/5d41e16d8bad42002208fe1a", "kuy": "6 kyu", "solutions": {"python": ["def more_zeros(s):\n    return [\n        c for c in \n        [c for i, c in enumerate(s) if i == s.index(c)]\n        if bin(ord(c)).count(\"0\") - 1 > bin(ord(c)).count(\"1\")\n    ]"]}}, {"name": "Simplify the number!", "link": "https://www.codewars.com/kata/5800b6568f7ddad2c10000ae", "kuy": "6 kyu", "solutions": {"python": ["def simplify(number): \n    n = str(number)\n    return \"+\".join(\n        \"{}{}\".format(c, \"\" if i == len(n) - 1 else \"*1\" + \"0\" * (len(n) - i - 1))\n        for i, c in enumerate(n) if c != \"0\"\n    )"]}}, {"name": "Linked Lists - Sorted Insert", "link": "https://www.codewars.com/kata/55cc33e97259667a08000044", "kuy": "6 kyu", "solutions": {"python": ["def sorted_insert(head, data):\n    if head is None or head.data > data:\n        n = Node(data)\n        n.next = head\n        return n\n\n    head.next = sorted_insert(head.next, data)\n    return head\n", "def sorted_insert(head, data):\n    if head is None:\n        return Node(data)\n\n    node = head\n    prev = None\n    while node:\n        if node.data > data:\n            n = Node(data)\n            if prev is None:\n                head, n.next = n, head\n            else:\n                prev.next, n.next = n, node\n            break\n\n        prev, node = node, node.next\n    else:\n        prev.next = Node(data)\n\n    return head"]}}, {"name": "Linked Lists - Insert Nth Node", "link": "https://www.codewars.com/kata/55cacc3039607536c6000081", "kuy": "6 kyu", "solutions": {"python": ["def insert_nth(head, index, data):\n    if not index:\n        n = Node(data)\n        n.next = head\n        return n\n\n    head.next = insert_nth(head.next, index - 1, data)\n    return head", "def insert_nth(head, index, data):\n    if not head and index == 0:\n        return Node(data)\n\n    prev = None\n    node = head\n    for i in range(index):\n        assert node is not None\n        prev = node\n        node = node.next\n\n    n = Node(data)\n    if prev:\n        prev.next = n\n    else:\n        head = n\n    n.next = node\n\n    return head"]}}, {"name": "Schr\u00f6dinger's Boolean", "link": "https://www.codewars.com/kata/5a5f9f80f5dc3f942b002309", "kuy": "6 kyu", "solutions": {"python": ["class Magic:\n    __eq__ = lambda self, _: True\n\nomnibool = Magic()"]}}, {"name": "Who has the most money?", "link": "https://www.codewars.com/kata/528d36d7cc451cd7e4000339", "kuy": "6 kyu", "solutions": {"python": ["def get_money(s):\n    return s.fives * 5 + s.tens * 10 + s.twenties * 20\n\n\ndef most_money(s):\n    return (\n        \"all\" if\n        [*map(get_money, s)].count(get_money(s[0])) == len(s) != 1\n        else max(s, key=get_money).name\n    )\n"]}}, {"name": "Sort Arrays (Ignoring Case)", "link": "https://www.codewars.com/kata/51f41fe7e8f176e70d0002b9", "kuy": "6 kyu", "solutions": {"python": ["def sortme(words):\n    return sorted(words, key=str.lower)"]}}, {"name": "A String of Sorts", "link": "https://www.codewars.com/kata/536c6b8749aa8b3c2600029a", "kuy": "6 kyu", "solutions": {"python": ["def sort_string(s, o):\n    return ''.join(\n        sorted(filter(lambda i: i in o, s),key=o.index) \n        + [*filter(lambda i: i not in o, s)]\n    )", "def sort_string(s, ordering):\n    return ''.join(\n        sorted([c for c in s if c in ordering], key=lambda i: ordering.index(i)) + \n        [c for c in s if c not in ordering]\n    )"]}}, {"name": "Generic numeric template formatter", "link": "https://www.codewars.com/kata/59901fb5917839fe41000029", "kuy": "6 kyu", "solutions": {"python": ["from itertools import cycle\n\n\ndef numeric_formatter(template, fill='1234567890'):\n    n = cycle(fill)\n    return ''.join(next(n) if c.isalpha() else c for c in template)\n"]}}, {"name": "Permute a Palindrome", "link": "https://www.codewars.com/kata/58ae6ae22c3aaafc58000079", "kuy": "6 kyu", "solutions": {"python": ["from collections import Counter\n\ndef permute_a_palindrome (s): \n  return sum(i % 2 for i in Counter(s).values()) <= 1\n"]}}, {"name": "Count letters in string", "link": "https://www.codewars.com/kata/5808ff71c7cfa1c6aa00006d", "kuy": "6 kyu", "solutions": {"python": ["from collections import Counter as letter_count"], "javascript": ["let letterCount = s => [...s].reduce((obj, c) => {obj[c] = (obj[c] || 0) + 1; return obj }, {});"]}}, {"name": "Pyramid Array", "link": "https://www.codewars.com/kata/515f51d438015969f7000013", "kuy": "6 kyu", "solutions": {"python": ["def pyramid(n):\n    return [[1] * (i + 1) for i in range(n)]"], "javascript": ["let pyramid = n => Array(n).fill(1).map((_,i) => Array(i + 1).fill(1));\n"]}}, {"name": "Does my number look big in this?", "link": "https://www.codewars.com/kata/5287e858c6b5a9678200083c", "kuy": "6 kyu", "solutions": {"python": ["def narcissistic(value):\n    return sum(int(i) ** len(str(value)) for i in str(value)) == value", "def narcissistic(value):\n    return value == sum(int(n) ** len(str(value)) for n in str(value))"]}}, {"name": "Simple time difference", "link": "https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2", "kuy": "6 kyu", "solutions": {"python": ["from datetime import datetime, timedelta\n\n\ndef solve(arr):\n    times = sorted(datetime.strptime(a, '%H:%M') for a in set(arr))\n    times = times + [times[0].replace(day=times[0].day + 1)]\n    m = max(j - i - timedelta(minutes=1) for i, j in zip(times, times[1:]))\n    return '{:0>2}:{}'.format(*str(m).split(':')[:-1])\n"]}}, {"name": "String subpattern recognition III", "link": "https://www.codewars.com/kata/5a4a2973d8e14586c700000a", "kuy": "6 kyu", "solutions": {"python": ["from math import gcd\nfrom functools import reduce\nfrom collections import Counter\n\n\ndef has_subpattern(s):\n    c = Counter(s)\n    g = reduce(gcd, c.values())\n    return ''.join(sorted(k * (v // g) for k, v in c.items()))", "from math import gcd\nfrom functools import reduce\nfrom collections import Counter\n\n\ndef has_subpattern(s):\n    c = Counter(s)\n    g = reduce(gcd, c.values())\n    return ''.join(sorted((k * (v // g) for k, v in c.items()) if g != 1 else s))\n"]}}, {"name": "String subpattern recognition II", "link": "https://www.codewars.com/kata/5a4a391ad8e145cdee0000c4", "kuy": "6 kyu", "solutions": {"python": ["from math import gcd\nfrom functools import reduce\n\n\ndef has_subpattern(s):\n    return reduce(gcd, map(s.count, {*s})) != 1\n"]}}, {"name": "String subpattern recognition I", "link": "https://www.codewars.com/kata/5a49f074b3bfa89b4c00002b", "kuy": "6 kyu", "solutions": {"python": ["import re\n\ndef has_subpattern(string):\n    return re.match(r'^(.+)\\1+$', string) is not None"]}}, {"name": "N smallest elements in original order", "link": "https://www.codewars.com/kata/5aec1ed7de4c7f3517000079", "kuy": "6 kyu", "solutions": {"python": ["def first_n_smallest(arr, n):\n    original = sorted(arr)[:n]\n    return [original.pop(original.index(a)) for a in arr if a in original]\n", "def first_n_smallest(arr, n):\n    if 0 == n > len(arr):\n        return []\n    original = sorted(arr)[:n]\n    return [original.pop(original.index(a)) for a in arr if a in original]\n"]}}, {"name": "first character that repeats", "link": "https://www.codewars.com/kata/54f9f4d7c41722304e000bbb", "kuy": "6 kyu", "solutions": {"python": ["def first_dup(s):\n    return next((c for c in s if s.count(c) > 1), None)"]}}, {"name": "Two Sum", "link": "https://www.codewars.com/kata/52c31f8e6605bcc646000082", "kuy": "6 kyu", "solutions": {"python": ["def two_sum(numbers, target):\n    for i, a in enumerate(numbers):\n        for j, b in enumerate(numbers[i+1:], i + 1):\n            if a + b == target:\n                return i,j"]}}, {"name": "Esolang Interpreters #1 - Introduction to Esolangs and My First Interpreter (MiniStringFuck)", "link": "https://www.codewars.com/kata/586dd26a69b6fd46dd0000c0", "kuy": "6 kyu", "solutions": {"python": ["def my_first_interpreter(code):\n    i, s = 0, ''\n    for c in code:\n        if c == '+':\n            i = i + 1 if i != 255 else 0\n        elif c == '.':\n            s += chr(i)\n    return s"]}}, {"name": "Password Maker", "link": "https://www.codewars.com/kata/5b3d5ad43da310743c000056", "kuy": "6 kyu", "solutions": {"python": ["from itertools import chain\nfrom string import ascii_lowercase as al, ascii_uppercase as au, digits as ad\n\n\ndef make_password(length, u, l, d):\n    ss = [[*s] for s, b in zip((al, au, ad), (l, u, d)) if b]\n    return ''.join(s.pop() for s in ss) + ''.join(s for s, _ in zip(chain(*ss), range(length - len(ss))))\n"]}}, {"name": "TV Remote (shift and space)", "link": "https://www.codewars.com/kata/5b277e94b6989dd1d9000009", "kuy": "6 kyu", "solutions": {"python": ["KEYBOARD = {\n    c: (j, i)\n    for i, a in enumerate((\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_/\", '* '))\n    for j, c in enumerate(a)\n}\n\n\ndef chars(words: str):\n    shift = False\n    for c in words:\n        if c.isalpha() and (c.isupper() and not shift or c.islower() and shift):\n            shift = not shift\n            yield '*'\n        yield c\n\n\ndef tv_remote(words) -> int:\n    start_pos, clicks = (0, 0), 0\n    for c in chars(words):\n        clicks += sum(map(lambda a, b: max(a, b) - min(a, b), KEYBOARD[c.lower()], start_pos)) + 1\n        start_pos = KEYBOARD[c.lower()]\n    return clicks", "KEYBOARD = (\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_/\", '* ')\n\n\ndef index_of(c: str):\n    c = c.lower()\n    for i, keys in enumerate(KEYBOARD):\n        if c in keys:\n            return keys.index(c), i\n\n\ndef diff(a: int, b: int) -> int:\n    return max(a, b) - min(a, b)\n\n\ndef chars(words: str):\n    shift = False\n    for c in words:\n        if c.isalpha() and (c.isupper() and not shift or c.islower() and shift):\n            shift = not shift\n            yield '*'\n        yield c\n\n\ndef tv_remote(words) -> int:\n    start_pos, clicks = (0, 0), 0\n\n    for c in chars(words):\n        next_pos = index_of(c)\n        clicks, start_pos = clicks + sum(map(diff, next_pos, start_pos)) + 1, next_pos\n\n    return clicks"]}}, {"name": "FIXME: Hello", "link": "https://www.codewars.com/kata/5b0a80ce84a30f4762000069", "kuy": "6 kyu", "solutions": {"python": ["from collections import OrderedDict\n\n\nclass Dinglemouse(object):\n\n    def __init__(self):\n        self.data = OrderedDict()\n\n    def setAge(self, age):\n        self.data['age'] = f'I am {age}.'\n        return self\n\n    def setSex(self, sex):\n        self.data['sex'] = f'I am {\"male\" if sex == \"M\" else \"female\"}.'\n        return self\n\n    def setName(self, name):\n        self.data['name'] = f'My name is {name}.'\n        return self\n\n    def hello(self):\n        return ' '.join(['Hello.', *self.data.values()])"]}}, {"name": "Sum consecutives", "link": "https://www.codewars.com/kata/55eeddff3f64c954c2000059", "kuy": "6 kyu", "solutions": {"python": ["from itertools import groupby\n\n\ndef sum_consecutives(array):\n    return [sum(i) for _, i in groupby(array)]\n"]}}, {"name": "IntroToArt", "link": "https://www.codewars.com/kata/5d7d05d070a6f60015c436d1", "kuy": "6 kyu", "solutions": {"python": ["def get_w(height):\n    if height <= 1:\n        return []\n\n    middle = height * 2 - 1\n    arr = [[' '] * (height * 4 - 3) for _ in range(height)]\n    for i, a in enumerate(arr):\n        a[i] = a[-i - 1] = a[middle - i - 1] = a[middle - 1 + i] = '*'\n\n    return [''.join(a) for a in arr]"]}}, {"name": "RoboScript #1 - Implement Syntax Highlighting", "link": "https://www.codewars.com/kata/58708934a44cfccca60000c4", "kuy": "6 kyu", "solutions": {"python": ["import re\n\nREGEX = re.compile(r'\\d+|F+|R+|L+|\\(|\\)')\n\nCOLORS = {\n    'F': 'pink',\n    'R': 'green',\n    'L': 'red',\n}\n\n\ndef highlight(code):\n    return ''.join(\n        c if c in '()' else f'<span style=\"color: {COLORS.get(c[0], \"orange\")}\">{c}</span>'\n        for c in REGEX.findall(code)\n    )", "import re\n\nREGEX = re.compile(r'\\d+|F+|R+|L+|\\(|\\)')\n\nCOLORS = {\n    'F': 'pink',\n    'R': 'green',\n    'L': 'red',\n}\n\n\ndef highlight(code):\n    return ''.join(\n        c if c in '()' else f'<span style=\"color: {COLORS.get(c[0], \"orange\")}\">{c}</span>'\n        for c in REGEX.findall(code)\n    )\n"]}}, {"name": "Linked Lists - Recursive Reverse", "link": "https://www.codewars.com/kata/55e725b930957a038a000042", "kuy": "6 kyu", "solutions": {"python": ["class Node(object):\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\ndef reverse(head, prev=None):\n    if head:\n        node = Node(head.data)\n        node.next = prev\n        return reverse(head.next, node)\n    return prev\n", "class Node(object):\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\n\ndef walk(head):\n    while head:\n        yield head.data\n        head = head.next\n\n\ndef add(node, data=None):\n    n = Node(data)\n    node.next = n\n    return n\n\n\ndef reverse(h):\n    if not h:\n        return None\n\n    head = temp = None\n    for i in reversed([*walk(h)]):\n        if head is None:\n            temp = head = Node(i)\n        else:\n            temp = add(temp, i)\n\n    return head"]}}, {"name": "Prefill an Array", "link": "https://www.codewars.com/kata/54129112fb7c188740000162", "kuy": "6 kyu", "solutions": {"python": ["def prefill(n, v=0):\n    if not ((isinstance(n, int) and n >= 0) or (isinstance(n, str) and n.isdigit() and int(n) >= 0)):\n        raise TypeError(f\"{n} is invalid\")\n    return [v] * int(n)\n", "def prefill(n, v=None):\n    if not ((isinstance(n, int) and n >= 0) or (isinstance(n, str) and n.isdigit() and int(n) >= 0)):\n        raise TypeError(f\"{n} is invalid\")\n    return [v] * int(n)"]}}, {"name": "Highest Scoring Word", "link": "https://www.codewars.com/kata/57eb8fcdf670e99d9b000272", "kuy": "6 kyu", "solutions": {"python": ["def high(x):\n    return max(x.split(), key=lambda c: sum(ord(i) - ord('a') + 1 for i in c))\n"]}}, {"name": "Multi-tap Keypad Text Entry on an Old Mobile Phone", "link": "https://www.codewars.com/kata/54a2e93b22d236498400134b", "kuy": "6 kyu", "solutions": {"python": ["codes = [\n        '1', 'abc2',  'def3', \n     'ghi4', 'jkl5',  'mno6', \n    'pqrs7', 'tuv8', 'wxyz9', \n        '*',   ' 0',     '#',\n]\n\ndef presses(phrase):\n    return sum(next((a.index(c) + 1 for a in codes if c in a), 0) for c in phrase.lower())"]}}, {"name": "Detect Pangram", "link": "https://www.codewars.com/kata/545cedaa9943f7fe7b000048", "kuy": "6 kyu", "solutions": {"python": ["import string\n\n\ndef is_pangram(s):\n    return {*s.lower()}.issuperset(string.ascii_lowercase)\n"]}}, {"name": "Triple trouble", "link": "https://www.codewars.com/kata/55d5434f269c0c3f1b000058", "kuy": "6 kyu", "solutions": {"python": ["from re import search\n\n\ndef triple_double(n1, n2):\n    n1, n2 = str(n1), str(n2)\n    return any(search(c + '{3}', n1) and search(c + '{2}', n2) for c in set(n1))"]}}, {"name": "Consecutive strings", "link": "https://www.codewars.com/kata/56a5d994ac971f1ac500003e", "kuy": "6 kyu", "solutions": {"python": ["def longest_consec(strarr, k):\n    return max((''.join(strarr[i:i + k]) for i in range(len(strarr) - k + 1)), key=len) if 0 < k < len(strarr) else ''"]}}, {"name": "Count characters in your string", "link": "https://www.codewars.com/kata/52efefcbcdf57161d4000091", "kuy": "6 kyu", "solutions": {"python": ["from collections import Counter\n\ncount = Counter"]}}, {"name": "2D array inner join", "link": "https://www.codewars.com/kata/56b7a75cbd06e6237000138b", "kuy": "6 kyu", "solutions": {"python": ["def inner_join(arrA, arrB, indA, indB):\n    return [a + b for a in arrA for b in arrB if a[indA] is not None and b[indB] is not None and a[indA] == b[indB]]\n"]}}, {"name": "Grouped by commas", "link": "https://www.codewars.com/kata/5274e122fc75c0943d000148", "kuy": "6 kyu", "solutions": {"python": ["def group_by_commas(n):\n    return '{:,}'.format(n)"]}}, {"name": "Parity bit - Error detecting code", "link": "https://www.codewars.com/kata/58409435258e102ae900030f", "kuy": "6 kyu", "solutions": {"python": ["def bits(s):\n    for *data, parity in s.split():\n        if sum(int(b) for b in data) % 2 != int(parity):\n            yield 'error'\n        else:\n            yield ''.join(data)\n\n\ndef parity_bit(binary):\n    return ' '.join(bits(binary))"]}}, {"name": "Proof Read ", "link": "https://www.codewars.com/kata/583710f6b468c07ba1000017", "kuy": "6 kyu", "solutions": {"python": ["from itertools import takewhile\n\n\ndef proofread(ss):\n    return '.'.join(\n        ''.join(takewhile(lambda c: c == ' ', s)) +\n        s.lstrip().lower().replace('ie', 'ei').capitalize()\n\n        for s in ss.split('.')\n    )\n"]}}, {"name": "Add commas to a number", "link": "https://www.codewars.com/kata/56a115cadb39a2faa000001e", "kuy": "6 kyu", "solutions": {"python": ["def commas(num):\n    num = round(num, 3)\n    return '{:,}'.format(num if num % 1 else int(num))"]}}, {"name": "How many feelings?", "link": "https://www.codewars.com/kata/5a33ec23ee1aaebecf000130", "kuy": "6 kyu", "solutions": {"python": ["def count_feelings(s, arr):\n    count = 0\n\n    for feeling in arr:\n        if all(s.count(w) >= feeling.count(w) for w in set(feeling)):\n            count += 1\n\n    return \"{} feeling{}.\".format(count, \"\" if count == 1 else \"s\")"]}}, {"name": "Give me a Diamond", "link": "https://www.codewars.com/kata/5503013e34137eeeaa001648", "kuy": "6 kyu", "solutions": {"python": ["from math import ceil\n\n\ndef diamond(n):\n    if n <= 0 or n % 2 == 0:\n        return None\n\n    n = ceil(n / 2)\n    l = [\" \" * (n - i) + \"*\" * (i * 2 - 1) for i in range(1, n + 1)]\n    return '\\n'.join(l + l[:-1][::-1]) + '\\n'\n", "from math import ceil\n\n\ndef diamond(n):\n    if n <= 0 or n % 2 == 0:\n        return None\n\n    n = ceil(n / 2)\n    l = [\" \" * (n - i) + \"*\" * (i * 2 - 1) for i in range(1, n + 1)]\n    return '\\n'.join(l + l[:-1][::-1]) + '\\n'\n\n"]}}, {"name": "Simple Fun #79: Delete a Digit", "link": "https://www.codewars.com/kata/5894318275f2c75695000146", "kuy": "6 kyu", "solutions": {"python": ["def delete_digit(n):\n    s = str(n)\n    return max(int(c) for c in (s[:i] + s[i + 1:] for i in range(len(s))) if not c.startswith('0'))\n"]}}, {"name": "Change your Points of View", "link": "https://www.codewars.com/kata/5ca3ae9bb7de3a0025c5c740", "kuy": "6 kyu", "solutions": {"python": ["def point(a, b):\n    def inner(): pass\n\n    inner.fst = a\n    inner.snd = b\n    return inner\n\n\ndef fst(pt):\n    return pt.fst\n\n\ndef snd(pt):\n    return pt.snd\n\n\ndef sqr_dist(pt1, pt2):\n    return (pt1.fst - pt2.fst) ** 2 + (pt1.snd - pt2.snd) ** 2\n\n\ndef line(pt1, pt2):\n    a = pt2.fst - pt1.fst\n    b = pt1.snd - pt2.snd\n    c = a * pt2.snd + b * pt2.fst\n    return [b, a, -c]\n"]}}, {"name": "Sort odd and even numbers in different order", "link": "https://www.codewars.com/kata/5a1cb5406975987dd9000028", "kuy": "6 kyu", "solutions": {"python": ["def sort_array(a):\n    odd = sorted(i for i in a if i % 2)\n    even = sorted((i for i in a if not i % 2), reverse=True)\n\n    return [(odd if i % 2 else even).pop(0) for i in a]\n"]}}, {"name": "JSON Class Decorator", "link": "https://www.codewars.com/kata/55b0fb65e1227b17d60000dc", "kuy": "6 kyu", "solutions": {"python": ["from json import load\n\ndef jsonattr(fp):\n    def inner(cls):\n        for name, attr in load(fp).items():\n            setattr(cls, name, attr)\n        return cls\n    return inner\n"]}}, {"name": "One Line Task: Element-wise Maximum", "link": "https://www.codewars.com/kata/5c2dbc63bfc6ec0001d2fcf9", "kuy": "6 kyu", "solutions": {"python": ["def fmax(a,b):a[:]=map(max,zip(a,b))"]}}, {"name": "Shortest Distance to a Character", "link": "https://www.codewars.com/kata/5c8bf3ec5048ca2c8e954bf3", "kuy": "6 kyu", "solutions": {"python": ["def shortest_to_char(s, c):\n    if not c or not s or c not in s:\n        return []\n    indexes = [i for i, cc in enumerate(s) if cc == c]\n    return [0 if cc == c else min(max(i - j, j - i) for j in indexes) for i, cc in enumerate(s)]\n"]}}, {"name": "Clone Graph", "link": "https://www.codewars.com/kata/5c9a6e225ae9822e70abc7c1", "kuy": "6 kyu", "solutions": {"python": ["\ndef clone_graph(node, cache=None):\n    if isinstance(node, GraphNode):\n        cache = cache or {}\n        if id(node) in cache:\n            return cache[id(node)]\n\n        n = cache[id(node)] = GraphNode(node.val)\n        n.neighbors = [clone_graph(nn, cache) for nn in node.neighbors]\n\n        return n"]}}, {"name": "Football - Yellow and Red Cards", "link": "https://www.codewars.com/kata/5cde4e3f52910d00130dc92c", "kuy": "6 kyu", "solutions": {"python": ["def men_still_standing(cards):\n    d = {'A': {str(i + 1): [] for i in range(11)}, 'B': {str(i + 1): [] for i in range(11)}}\n    for t, *n, c in cards:\n        n = ''.join(n)\n        if (c == 'R' or 'Y' in d[t].get(n, ())) and d[t].get(n) is not None:\n            del d[t][n]\n        elif n in d[t]:\n            d[t][n].append(c)\n        if len(d[t]) < 7:\n            break\n\n    return len(d['A']), len(d['B'])"]}}, {"name": "Data Reverse", "link": "https://www.codewars.com/kata/569d488d61b812a0f7000015", "kuy": "6 kyu", "solutions": {"python": ["from itertools import chain\n\n\ndef data_reverse(l):\n    return [*chain.from_iterable(l[i * 8: (i + 1) * 8] for i in reversed(range(len(l) // 8)))]\n"]}}, {"name": "Throwing Darts", "link": "https://www.codewars.com/kata/525dfedb5b62f6954d000006", "kuy": "6 kyu", "solutions": {"python": ["def score_throws(r):\n    return sum(10 if i < 5 else 5 if 5 <= i <= 10 else 0 for i in r) + 100 * bool(all(i < 5 for i in r) and r)\n"]}}, {"name": "Alphabetized", "link": "https://www.codewars.com/kata/5970df092ef474680a0000c9", "kuy": "6 kyu", "solutions": {"python": ["from itertools import groupby\n\n\ndef alphabetized(s):\n    return ''.join(''.join(i) for _, i in groupby(sorted(filter(str.isalpha, s), key=str.lower), str.lower))\n"]}}, {"name": "IPv4 to int32", "link": "https://www.codewars.com/kata/52ea928a1ef5cfec800003ee", "kuy": "6 kyu", "solutions": {"python": ["def ip_to_int32(ip):\n    return int(''.join(bin(int(i))[2:].zfill(8) for i in ip.split('.')), 2)\n"]}}, {"name": "Regex for a decimal number divisible by 4", "link": "https://www.codewars.com/kata/5bf6bd7a3efceeda4700011f", "kuy": "6 kyu", "solutions": {"python": ["div_4 = '^(\\d*[02468][048]|\\d*[13579][26]|[048])$'"]}}, {"name": "extract file name", "link": "https://www.codewars.com/kata/597770e98b4b340e5b000071", "kuy": "6 kyu", "solutions": {"python": ["class FileNameExtractor:\n    @staticmethod\n    def extract_file_name(dirty_file_name):\n        return '.'.join(dirty_file_name.split('.')[:-1]).split('_', maxsplit=1)[1]"]}}, {"name": "Number Format", "link": "https://www.codewars.com/kata/565c4e1303a0a006d7000127", "kuy": "6 kyu", "solutions": {"python": ["number_format = '{:,}'.format"]}}, {"name": "Braces status", "link": "https://www.codewars.com/kata/58983deb128a54b530000be6", "kuy": "6 kyu", "solutions": {"python": ["def braces_status(s):\n    s = ''.join(c for c in s if c in '(){}[]')\n    while '{}' in s or '()' in s or '[]' in s:\n        s = s.replace('{}', '').replace('[]', '').replace('()', '')\n    return not s"]}}, {"name": "Filter valid romans", "link": "https://www.codewars.com/kata/58334362c5637ad0bb0001c2", "kuy": "6 kyu", "solutions": {"python": ["import re\n\nREGEX = re.compile(r'^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$')\n\n\ndef valid_romans(arr):\n    return [a for a in arr if REGEX.match(a)]\n"]}}, {"name": "Title Case", "link": "https://www.codewars.com/kata/5202ef17a402dd033c000009", "kuy": "6 kyu", "solutions": {"python": ["def title_case(title, minor_words=''):\n    minor_words, title = minor_words.lower().split(), title.lower()\n    return ' '.join(c.title() if c not in minor_words or not i else c.lower() for i, c in enumerate(title.split()))\n"]}}, {"name": "Don't rely on luck.", "link": "https://www.codewars.com/kata/5268af3872b786f006000228", "kuy": "6 kyu", "solutions": {"python": ["import random\nrandom.randint = lambda *args: 10\nfrom random import randint\nguess = 10"]}}, {"name": "Pascal's Triangle", "link": "https://www.codewars.com/kata/5226eb40316b56c8d500030f", "kuy": "6 kyu", "solutions": {"python": ["def pascals_triangle(n_rows):\n    results = []\n    for _ in range(n_rows):\n        row = [1]\n        if results:\n            last_row = results[-1]\n            row.extend([sum(pair) for pair in zip(last_row, last_row[1:])])\n            row.append(1)\n        results.append(row)\n\n    arr = []\n    for a in results:\n        arr.extend(a)\n\n    return arr"]}}, {"name": "Autocomplete! Yay!", "link": "https://www.codewars.com/kata/5389864ec72ce03383000484", "kuy": "6 kyu", "solutions": {"python": ["def autocomplete(input_, dictionary):\n    input_ = ''.join(c for c in input_ if c.isalpha()).lower()\n    return [i for i in dictionary if i.lower().startswith(input_)][:5]\n\n"]}}, {"name": "Function Composition", "link": "https://www.codewars.com/kata/5421c6a2dda52688f6000af8", "kuy": "6 kyu", "solutions": {"python": ["def compose(f,g):\n    return lambda *args, **kwargs: f(g(*args, **kwargs))"]}}, {"name": "Dashatize it", "link": "https://www.codewars.com/kata/58223370aef9fc03fd000071", "kuy": "6 kyu", "solutions": {"python": ["def dashatize(num):\n    return ''.join(f'-{c}-' if int(c) % 2 else c for c in str(abs(num))).replace('--', '-').strip('-') if num is not None else \"None\"\n"]}}, {"name": "Unary function chainer", "link": "https://www.codewars.com/kata/54ca3e777120b56cb6000710", "kuy": "6 kyu", "solutions": {"python": ["def chained(functions):\n    return lambda a: reduce(lambda i, f: f(i), functions, a)\n"]}}, {"name": "Simple Simple Simple String Expansion", "link": "https://www.codewars.com/kata/5ae326342f8cbc72220000d2", "kuy": "6 kyu", "solutions": {"python": ["def string_expansion(s):\n    a, n = [], 1\n    for c in s:\n        if c.isdigit():\n            n = int(c)\n        else:\n            a.append(c * n)\n    return ''.join(a)\n"]}}, {"name": "Simple Simple Simple String Expansion", "link": "https://www.codewars.com/kata/5ae326342f8cbc72220000d2", "kuy": "6 kyu", "solutions": {"python": ["def string_expansion(s):\n    a, n = [], 1\n    for c in s:\n        if c.isdigit():\n            n = int(c)\n        else:\n            a.append(c * n)\n    return ''.join(a)"]}}, {"name": "Ackermann Function ", "link": "https://www.codewars.com/kata/53ad69892a27079b34000bd9", "kuy": "6 kyu", "solutions": {"python": ["def Ackermann(m,n):\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return Ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return Ackermann(m - 1, Ackermann(m, n - 1))"]}}, {"name": "Write Number in Expanded Form", "link": "https://www.codewars.com/kata/5842df8ccbd22792a4000245", "kuy": "6 kyu", "solutions": {"python": ["def expanded_form(num):\n    return ' + '.join(c + '0' * (len(str(num)) - i) for i, c in enumerate(str(num), 1) if c != '0')\n"]}}, {"name": "The Supermarket Queue", "link": "https://www.codewars.com/kata/57b06f90e298a7b53d000a86", "kuy": "6 kyu", "solutions": {"python": ["def queue_time(customers, n):\n    data = {i: 0 for i in range(n)}\n    for c in customers:\n        data[min(data, key=lambda key: data[key])] += c\n    return max(data.values(), default=0)"]}}, {"name": "Build a pile of Cubes", "link": "https://www.codewars.com/kata/5592e3bd57b64d00f3000047", "kuy": "6 kyu", "solutions": {"python": ["from itertools import count\n\n\ndef find_nb(m):\n    for i in count(1):\n        m -= i ** 3\n        if m == 0:\n            return i\n        elif m < 0:\n            return -1\n"]}}, {"name": "Design a Simple Automaton (Finite State Machine)", "link": "https://www.codewars.com/kata/5268acac0d3f019add000203", "kuy": "6 kyu", "solutions": {"python": ["from functools import reduce\n\n\nclass Automaton:\n    def read_commands(self, commands):\n        return reduce(lambda state, s: ((0, 1), (2, 1), (1, 1))[state][int(s)], commands, 0) == 1\nmy_automaton = Automaton()"]}}, {"name": "Split Strings", "link": "https://www.codewars.com/kata/515de9ae9dcfc28eb6000001", "kuy": "6 kyu", "solutions": {"python": ["def solution(s):\n    s = s + '_' if len(s) % 2 else s\n    return [s[i * 2:i * 2 + 2] for i in range(len(s) // 2)]\n"]}}, {"name": "Sort the odd", "link": "https://www.codewars.com/kata/578aa45ee9fd15ff4600090d", "kuy": "6 kyu", "solutions": {"python": ["def sort_array(source_array):\n    odds = sorted(i for i in source_array if i % 2)\n    return [odds.pop(0) if i % 2 else i for i in source_array]\n"]}}, {"name": "Count the smiley faces!", "link": "https://www.codewars.com/kata/583203e6eb35d7980400002a", "kuy": "6 kyu", "solutions": {"python": ["def count_smileys(arr):\n    return sum(bool(__import__('re').match(r'[:;][-~]?[)D]', i)) for i in arr)\n"]}}, {"name": "Delete occurrences of an element if it occurs more than n times", "link": "https://www.codewars.com/kata/554ca54ffa7d91b236000023", "kuy": "6 kyu", "solutions": {"python": ["from collections import defaultdict\n\n\ndef delete_nth(order, max_e):\n    data = defaultdict(int)\n    res = []\n    for i in order:\n        data[i] += 1\n        if data[i] <= max_e:\n            res.append(i)\n\n    return res\n"]}}, {"name": "Upside-Down Pyramid Addition...REVERSED!", "link": "https://www.codewars.com/kata/5cc1e284ece231001ccf7014", "kuy": "6 kyu", "solutions": {"python": ["def reverse(right):\n    arr = [[i] for i in right]\n\n    for i, a in enumerate(arr[1:], 1):\n        for j in range(i):\n            a.insert(0, arr[i - 1][-j - 1] - a[0])\n\n    return arr[-1]\n"]}}, {"name": "Simple Fun #116: Prime String", "link": "https://www.codewars.com/kata/589d36bbb6c071f7c20000f7", "kuy": "6 kyu", "solutions": {"python": ["def prime_string(s):\n    return all(s[:i] * (len(s) // i) != s for i in range(1, len(s) // 2 + 1))\n"]}}, {"name": "Next Version", "link": "https://www.codewars.com/kata/56c0ca8c6d88fdb61b000f06", "kuy": "6 kyu", "solutions": {"python": ["def next_version(version):\n    nums = version.split('.')\n    for i, n in reversed([*enumerate(nums)]):\n        nn = int(n) + 1\n\n        if nn < 10:\n            nums[i] = nn\n            break\n        elif i:\n            nums[i] = 0\n        else:\n            nums[i] = nn\n\n    return '.'.join(map(str, nums))\n"]}}, {"name": "Find the unique number", "link": "https://www.codewars.com/kata/585d7d5adb20cf33cb000235", "kuy": "6 kyu", "solutions": {"python": ["def find_uniq(arr):\n    for i in set(arr):\n        if arr.count(i) == 1:\n            return i\n"]}}, {"name": "Steps in Primes", "link": "https://www.codewars.com/kata/5613d06cee1e7da6d5000055", "kuy": "6 kyu", "solutions": {"python": ["from math import sqrt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))\n\n\ndef primes(start, end):\n    yield from (i for i in range(start, end) if is_prime(i))\n\n\ndef step(g, m, n):\n    for i in primes(m, n):\n        for j in primes(i + g, n):\n            if j - i > g:\n                break\n\n            if j - i == g:\n                return [i, j]\n"]}}, {"name": "Linked Lists - Merge Sort", "link": "https://www.codewars.com/kata/55e5fa3501fd9c3f4d000050", "kuy": "6 kyu", "solutions": {"python": ["def to_list(head):\n    arr = []\n    while head:\n        arr.append(head.data)\n        head = head.next\n    return arr\n\n\ndef to_llist(arr):\n    if not arr:\n        return None\n    head = node = Node(arr[0])\n    for a in arr[1:]:\n        node.next = Node(a)\n        node = node.next\n    return head\n\n\ndef merge_sort(head):\n    return to_llist(sorted(to_list(head)))\n"]}}, {"name": "Linked Lists - Insert Sort", "link": "https://www.codewars.com/kata/55d0c7ee7c0d30a12b000045", "kuy": "6 kyu", "solutions": {"python": ["def to_list(head):\n    arr = []\n    while head:\n        arr.append(head.data)\n        head = head.next\n    return arr\n\n\ndef to_llist(arr):\n    if not arr:\n        return None\n    head = node = Node(arr[0])\n    for a in arr[1:]:\n        node.next = Node(a)\n        node = node.next\n    return head\n\n\ndef insert_sort(head):\n    return to_llist(sorted(to_list(head)))\n"]}}, {"name": "Linked Lists - Length & Count", "link": "https://www.codewars.com/kata/55beec7dd347078289000021", "kuy": "6 kyu", "solutions": {"python": ["def length(node, l=0):\n    return length(node.next, l + 1) if node else l\n\n\ndef count(node, data, l=0):\n    return count(node.next, data, l + (node.data == data)) if node else l\n"]}}, {"name": "Multiplication table", "link": "https://www.codewars.com/kata/534d2f5b5371ecf8d2000a08", "kuy": "6 kyu", "solutions": {"python": ["def multiplicationTable(size):\n    return [[i * j for j in range(1, size + 1)] for i in range(1, size + 1)]"]}}, {"name": "Multiplication Tables", "link": "https://www.codewars.com/kata/5432fd1c913a65b28f000342", "kuy": "6 kyu", "solutions": {"python": ["def multiplication_table(row, col):\n    return [[i * j for j in range(1, col + 1)] for i in range(1, row + 1)]\n"]}}, {"name": "Mexican Wave", "link": "https://www.codewars.com/kata/58f5c63f1e26ecda7e000029", "kuy": "6 kyu", "solutions": {"python": ["def wave(s: str):\n    return [s[0:i] + c.upper() + s[i + 1:] for i, c in enumerate(s) if c.isalnum()]\n"]}}, {"name": "Find the missing letter", "link": "https://www.codewars.com/kata/5839edaa6754d6fec10000a2", "kuy": "6 kyu", "solutions": {"python": ["def find_missing_letter(chars):\n    return ''.join({*map(chr, range(ord(chars[0]), ord(chars[-1])))} - {*chars})\n"]}}, {"name": "Dubstep", "link": "https://www.codewars.com/kata/551dc350bf4e526099000ae5", "kuy": "6 kyu", "solutions": {"python": ["def song_decoder(song):\n    return ' '.join(song.replace('WUB', ' ').strip().split())\n"]}}, {"name": "Are they the \"same\"?", "link": "https://www.codewars.com/kata/550498447451fbbd7600041c", "kuy": "6 kyu", "solutions": {"python": ["def comp(a, b):\n    return a is not None and b is not None and all(i ** 2 == j for i, j in zip(sorted(a), sorted(b)))\n"]}}, {"name": "Make the Deadfish swim", "link": "https://www.codewars.com/kata/51e0007c1f9378fa810002a9", "kuy": "6 kyu", "solutions": {"python": ["def parse(data):\n    arr = []\n    i = 0\n\n    for c in data:\n        if c == 'i':\n            i += 1\n        elif c == 'd':\n            i += -1\n        elif c == 's':\n            i *= i\n        elif c == 'o':\n            arr.append(i)\n\n    return arr"]}}, {"name": "Most Frequent Weekdays", "link": "https://www.codewars.com/kata/56eb16655250549e4b0013f4", "kuy": "6 kyu", "solutions": {"python": ["from collections import Counter\nfrom datetime import date, timedelta\n\nWEEK_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\n\ndef most_frequent_days(year):\n    res = Counter(\n        (date(year, 1, 1) + timedelta(d)).weekday()\n        for d in range((date(year + 1, 1, 1) - date(year, 1, 1)).days)\n    )\n    m = max(res.values(), default=0)\n\n    return [WEEK_DAYS[i] for i in res if res[i] == m]"]}}, {"name": "Take a Number And Sum Its Digits Raised To The Consecutive Powers And ....\u00a1Eureka!!", "link": "https://www.codewars.com/kata/5626b561280a42ecc50000d1", "kuy": "6 kyu", "solutions": {"python": ["def sum_dig_pow(a, b):\n    return [i for i in range(a, b + 1) if i == sum(int(n) ** p for p, n in enumerate(str(i), 1))]\n"]}}, {"name": "Build Tower", "link": "https://www.codewars.com/kata/576757b1df89ecf5bd00073b", "kuy": "6 kyu", "solutions": {"python": ["def tower_builder(n):\n    return [' ' * (n - j) + '*' * i + ' ' * (n - j) for j, i in enumerate(range(1, n * 2 + 1, 2), 1)]\n"]}}, {"name": "Tribonacci Sequence", "link": "https://www.codewars.com/kata/556deca17c58da83c00002db", "kuy": "6 kyu", "solutions": {"python": ["def tribonacci(signature, n):\n    if n <= 3:\n        return signature[:n]\n\n    for i in range(n - 3):\n        signature.append(sum(signature[-3:]))\n\n    return signature\n"]}}, {"name": "IQ Test", "link": "https://www.codewars.com/kata/552c028c030765286c00007d", "kuy": "6 kyu", "solutions": {"python": ["def iq_test(numbers):\n    numbers, d = list(map(int, numbers.split())), {0: [], 1: []}\n    for n in numbers:\n        d[n % 2].append(n)\n    return numbers.index(min(d.values(), key=len)[0]) + 1"]}}, {"name": "Duplicate Encoder", "link": "https://www.codewars.com/kata/54b42f9314d9229fd6000d9c", "kuy": "6 kyu", "solutions": {"python": ["def duplicate_encode(word):\n    return ''.join('(' if word.lower().count(c) == 1 else ')' for c in word.lower())"]}}, {"name": "Rectangle into Squares", "link": "https://www.codewars.com/kata/55466989aeecab5aac00003e", "kuy": "6 kyu", "solutions": {"python": ["def sqInRect(height, width, first=True):\n    if height == width:\n        return None if first else [height]\n\n    if height > width:\n        r, height = width, height - width\n    else:\n        r, width = height, width - height\n\n    return [r] + (sqInRect(height, width, False) or [])\n"]}}, {"name": "Is a number prime?", "link": "https://www.codewars.com/kata/5262119038c0985a5b00029f", "kuy": "6 kyu", "solutions": {"python": ["def is_prime(num):\n    return num > 1 and all(num % i != 0 for i in range(2, num))\n"]}}, {"name": "Replace With Alphabet Position", "link": "https://www.codewars.com/kata/546f922b54af40e1e90001da", "kuy": "6 kyu", "solutions": {"python": ["def alphabet_position(text):\n    return \" \".join(str(ord(s) - ord('a') + 1) for s in text.lower() if s.isalpha())\n"]}}, {"name": "Format a string of names like 'Bart, Lisa & Maggie'.", "link": "https://www.codewars.com/kata/53368a47e38700bd8300030d", "kuy": "6 kyu", "solutions": {"python": ["def namelist(names):\n    if not names:\n        return ''\n\n    names = [d['name'] for d in names]\n    return names[0] if len(names) == 1 else f'{\", \".join(names[:-1])} & {names[-1]}'\n\n"]}}, {"name": "Equal Sides Of An Array", "link": "https://www.codewars.com/kata/5679aa472b8f57fb8c000047", "kuy": "6 kyu", "solutions": {"python": ["def find_even_index(arr):\n    return next((i for i in range(len(arr)) if sum(arr[:i]) == sum(arr[i + 1:])), -1)"]}}, {"name": "Unique In Order", "link": "https://www.codewars.com/kata/54e6533c92449cc251001667", "kuy": "6 kyu", "solutions": {"python": ["from itertools import groupby\n\ndef unique_in_order(iterable):\n    return [a for a, _ in groupby(iterable)]\n"]}}, {"name": "Counting Duplicates", "link": "https://www.codewars.com/kata/54bf1c2cd5b56cc47f0007a1", "kuy": "6 kyu", "solutions": {"python": ["def duplicate_count(text):\n    text = text.lower()\n    return sum(text.count(t) > 1 for t in set(text))\n     "]}}, {"name": "Create Phone Number", "link": "https://www.codewars.com/kata/525f50e3b73515a6db000b83", "kuy": "6 kyu", "solutions": {"python": ["def create_phone_number(n):\n    return '({}{}{}) {}{}{}-{}{}{}{}'.format(*n)"]}}, {"name": "Array.diff", "link": "https://www.codewars.com/kata/523f5d21c841566fde000009", "kuy": "6 kyu", "solutions": {"python": ["def array_diff(a, b):\n    return [i for i in a if i not in b]"]}}, {"name": "Who likes it?", "link": "https://www.codewars.com/kata/5266876b8f4bf2da9b000362", "kuy": "6 kyu", "solutions": {"python": ["def likes(names):\n    return {0: 'no one likes this', 1: '{} likes this', 2: '{} and {} like this', 3: '{}, {} and {} like this', }.get(\n        len(names)).format(*names) if len(names) < 4 else '{}, {} and {} others like this'.format(names[0], names[1], len(names) - 2)\n"]}}, {"name": "Find The Parity Outlier", "link": "https://www.codewars.com/kata/5526fc09a1bbd946250002dc", "kuy": "6 kyu", "solutions": {"python": ["from itertools import groupby\n\n\ndef find_outlier(integers):\n    return next(i[0] for i in (list(a) for _, a in groupby(sorted(integers, key=lambda a: a % 2), key=lambda a: a % 2)) if len(i) == 1)\n"]}}, {"name": "Sum of Digits / Digital Root", "link": "https://www.codewars.com/kata/541c8630095125aba6000c00", "kuy": "6 kyu", "solutions": {"python": ["def digital_root(n):\n    return n if n < 10 else digital_root(sum(map(int, str(n))))\n"]}}, {"name": "Sum of Digits / Digital Root", "link": "https://www.codewars.com/kata/541c8630095125aba6000c00", "kuy": "6 kyu", "solutions": {"python": ["def digital_root(n):\n    return n if n < 10 else digital_root(sum(map(int, str(n))))"]}}, {"name": "Stop gninnipS My sdroW!", "link": "https://www.codewars.com/kata/5264d2b162488dc400000001", "kuy": "6 kyu", "solutions": {"python": ["def spin_words(sentence):\n    return ' '.join(s[::-1] if len(s) > 4 else s for s in sentence.split())"]}}, {"name": "Find the odd int", "link": "https://www.codewars.com/kata/54da5a58ea159efa38000836", "kuy": "6 kyu", "solutions": {"python": ["def find_it(seq):\n    return next(n for n in seq if seq.count(n) % 2)"]}}, {"name": "Multiples of 3 or 5", "link": "https://www.codewars.com/kata/514b92a657cdc65150000006", "kuy": "6 kyu", "solutions": {"python": ["def solution(number):\n    return sum(i for i in range(1, number) if not (i % 3 and i % 5))\n  "]}}, {"name": "Split and then add both sides of an array together.", "link": "https://www.codewars.com/kata/5946a0a64a2c5b596500019a", "kuy": "6 kyu", "solutions": {"python": ["def split_and_add(a, n):\n    for _ in range(n):\n        if len(a) < 2: break\n        a = [sum(a) for a in zip(([0] if len(a) % 2 else []) + a[:len(a) // 2], a[len(a) // 2:])]\n\n    return a"]}}, {"name": "Statistics for an Athletic Association", "link": "https://www.codewars.com/kata/55b3425df71c1201a800009c", "kuy": "6 kyu", "solutions": {"python": ["from datetime import timedelta\n\n\ndef stat(strg):\n    if not strg:\n        return strg\n\n    def f(td: timedelta):\n        return \"{:02d}|{:02d}|{:02d}\".format(td.seconds // 3600, td.seconds // 60 % 60, td.seconds % 60)\n\n    times = [*sorted(\n        timedelta(**dict(zip(('hours', 'minutes', 'seconds'), (int(t) for t in res.strip().split('|')))))\n        for res in strg.split(',')\n    )]\n    median = times[len(times) // 2] if len(times) % 2 else sum(times[len(times) // 2 - 1: len(times) // 2 + 1],\n                                                               timedelta()) / 2\n    return f'Range: {f(max(times) - min(times))} Average: {f(sum(times, timedelta()) / len(times))} ' + \\\n           f'Median: {f(median)}'"]}}, {"name": "CamelCase Method", "link": "https://www.codewars.com/kata/587731fda577b3d1b0001196", "kuy": "6 kyu", "solutions": {"python": ["def camel_case(string):\n    return ''.join(s.title() for s in string.strip().split())"]}}, {"name": "Valid Braces", "link": "https://www.codewars.com/kata/5277c8a221e209d3f6000b56", "kuy": "6 kyu", "solutions": {"c++": ["bool valid_braces(std::string braces) \n{\n  std::string all_braces = \"(){}[]\";\n  std::string stack = \"\";\n  \n  for (auto c : braces){  \n  {    \n      std::cout << c << std::endl;\n      if (all_braces.find(c) != std::string::npos)\n      {\n        if (all_braces.find(c) % 2 == 0){\n          stack += c;\n        }else{\n          if (all_braces.find(c) - all_braces.find(stack.back()) != 1){\n            return false;\n          }\n          stack.pop_back();\n        }\n      }\n    }\n   }\n return stack.empty();\n}"], "python": ["braces = '(){}[]'\n\n\ndef validBraces(string):\n    stack = []\n    for s in string:\n        if not braces.index(s) % 2:\n            stack.append(s)\n        elif not stack or braces.index(s) - braces.index(stack[-1]) != 1:\n            return False\n        else:\n            stack.pop()\n\n    return not stack"]}}, {"name": "Simple Fun #23: Square Digits Sequence", "link": "https://www.codewars.com/kata/5886d65e427c27afeb0000c1", "kuy": "6 kyu", "solutions": {"python": ["def square_digits_sequence(n):\n    values = {n}\n\n    while True:\n        n = sum(int(i) ** 2 for i in str(n))\n\n        if n in values:\n            return len(values) + 1\n\n        values.add(n)"]}}, {"name": "Matrix Addition", "link": "https://www.codewars.com/kata/526233aefd4764272800036f", "kuy": "6 kyu", "solutions": {"python": ["from numpy import matrix\n\ndef matrix_addition(a, b):\n    return (matrix(a) + matrix(b)).tolist()"]}}, {"name": "Closest Sum", "link": "https://www.codewars.com/kata/577e694af5db624cf30002d0", "kuy": "6 kyu", "solutions": {"python": ["from itertools import combinations\n\n\ndef closest_sum(ints, num):\n    return sum(min(combinations(ints, 3), key=lambda a: abs(num - sum(a))))\n"]}}, {"name": "Not prime numbers", "link": "https://www.codewars.com/kata/5a9a70cf5084d74ff90000f7", "kuy": "6 kyu", "solutions": {"python": ["from math import sqrt\nfrom itertools import count, islice\n\ndef memoize(func):\n    cache = {}\n    def wrapp(n):\n        res = cache.get(n)\n        if res is None:\n            res = func(n)\n            cache[n] = res\n        return res\n    return wrapp\n\n@memoize\ndef is_prime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\n\n@memoize\ndef check_num(n):\n    return not is_prime(n) and all(is_prime(int(i)) for i in str(n))\n\ndef not_primes(a, b):\n    return [i for i in range(a,b) if check_num(i)]", "from math import sqrt\nfrom itertools import count, islice\nfrom functools import lru_cache\n\ndef memoize(func):\n    cache = {}\n    def wrapp(n):\n        res = cache.get(n)\n        if res is None:\n            res = func(n)\n            cache[n] = res\n        return res\n    return wrapp\n\n@memoize\ndef is_prime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\n\n@memoize\ndef check_num(n):\n    return not is_prime(n) and all(is_prime(int(i)) for i in str(n))\n\ndef not_primes(a, b):\n    return [i for i in range(a,b) if check_num(i)]"]}}, {"name": "Roman Numerals Encoder", "link": "https://www.codewars.com/kata/51b62bf6a9c58071c600001b", "kuy": "6 kyu", "solutions": {"python": ["from functools import partial\n\nROMAN = {1000: 'M', 500: 'D', 100: 'C', 50: 'L', 10: 'X', 5: 'V', 1: 'I'}\n\n\ndef solution(n):\n    res, str_n = '', str(n)\n    for c, p in zip(map(int, str_n), map(partial(pow, 10), range(len(str_n))[::-1])):\n        if (c + 1) % 5 == 0:\n            res += ROMAN[p]\n            c += 1\n\n        res += ROMAN.get(c * p) or (ROMAN[5 * p] + ROMAN[p] * (c - 5) if c > 5 else ROMAN[p] * c)\n\n    return res\n"]}}, {"name": "Bit Counting", "link": "https://www.codewars.com/kata/526571aae218b8ee490006f4", "kuy": "6 kyu", "solutions": {"python": ["def countBits(n):\n    return bin(n).count('1')"]}}, {"name": "Decode the Morse code ", "link": "https://www.codewars.com/kata/54b724efac3d5402db00065e", "kuy": "6 kyu", "solutions": {"python": ["import re\n\n\ndef decodeMorse(morse_code):\n    s = []\n    for word in re.split(r'(?<=[.-])[ ]{2,}(?=[.-])', morse_code):\n        s.append(''.join(MORSE_CODE.get(c) for c in word.split()))\n    return ' '.join(s)\n"]}}, {"name": "Highest Rank Number in an Array", "link": "https://www.codewars.com/kata/5420fc9bb5b2c7fd57000004", "kuy": "6 kyu", "solutions": {"python": ["def highest_rank(arr):\n    return max(sorted(set(arr), reverse=True), key=arr.count)"]}}, {"name": "Persistent Bugger.", "link": "https://www.codewars.com/kata/55bf01e5a717a0d57e0000ec", "kuy": "6 kyu", "solutions": {"python": ["def persistence(n, t=0):\n    n = str(n)\n    if len(n) == 1:\n        return t\n    return persistence(reduce(lambda a, b: int(a) * int(b), n), t + 1)"]}}, {"name": "Your order, please", "link": "https://www.codewars.com/kata/55c45be3b2079eccff00010f", "kuy": "6 kyu", "solutions": {"python": ["import re\n\nDIGITS_REGEX = re.compile('\\d+')\n\ndef order(sentence):\n    return ' '.join(sorted(sentence.split(), key=lambda a:int(DIGITS_REGEX.search(a).group())))"]}}, {"name": "Which are in?", "link": "https://www.codewars.com/kata/550554fd08b86f84fe000a58", "kuy": "6 kyu", "solutions": {"python": ["def in_array(array1, array2):\n    return list(sorted(set(filter(lambda a: any(a in s for s in array2), array1))))"]}}, {"name": "Strip Url Params", "link": "https://www.codewars.com/kata/51646de80fd67f442c000013", "kuy": "6 kyu", "solutions": {"python": ["from collections import OrderedDict\n\n\ndef strip_url_params(url, params_to_strip=[]):\n    if '?' not in url:\n        return url\n    \n    values = OrderedDict()\n    base, additional = url.split('?', 1)\n    for part in additional.split('&'):\n        name, value = part.split('=')\n        if name not in values and name not in params_to_strip:\n            values[name] = value\n\n    return '{}?{}'.format(base, '&'.join('{}={}'.format(key, value) for key, value in values.items()))\n    "]}}, {"name": "Roman Numerals Decoder", "link": "https://www.codewars.com/kata/51b6249c4612257ac0000005", "kuy": "6 kyu", "solutions": {"python": ["values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000, }\n\n\ndef solution(roman):\n    value, max_val = 0, 1\n    for i in map(lambda key: values[key], reversed(roman)):\n        value += -i if i < max_val else i\n        max_val = max((max_val, i))\n    return value\n"]}}, {"name": "Reverse polish notation calculator", "link": "https://www.codewars.com/kata/52f78966747862fc9a0009ae", "kuy": "6 kyu", "solutions": {"python": ["from operator import add, sub, floordiv, mul, mod\nimport re\n\n\ndef calc(expr):\n    if not expr:\n        return 0\n\n    operations = {'-': sub, '+': add, '*': mul, '/': floordiv, '%': mod}\n    operands = [s for s in re.findall(\"[-+*/]|[0-9]*\\.?[0-9]+\", expr) if not s.isspace()]\n\n    if not any(op in operands for op in operations):\n        return float(operands[-1])\n\n    stack = []\n    while operands:\n        op = operands.pop(0)\n        if op in operations:\n            b, a = stack.pop(), stack.pop()\n            stack.append(operations[op](float(a), float(b)))\n        else:\n            stack.append(float(op))\n\n    return stack[0]\n"]}}, {"name": "Convert string to camel case", "link": "https://www.codewars.com/kata/517abf86da9663f1d2000003", "kuy": "6 kyu", "solutions": {"python": ["import re\n\ndef to_camel_case(text):\n    return text[0] + re.sub('-|_','',text.title())[1:] if text else text"]}}, {"name": "Valid Phone Number", "link": "https://www.codewars.com/kata/525f47c79f2f25a4db000025", "kuy": "6 kyu", "solutions": {"python": ["import re\n\ndef validPhoneNumber(phoneNumber):\n    return re.fullmatch(r'\\(\\d{3}\\) \\d{3}-\\d{4}', phoneNumber) is not None"]}}, {"name": "Sum of prime-indexed elements", "link": "https://www.codewars.com/kata/59f38b033640ce9fc700015b", "kuy": "6 kyu", "solutions": {"python": ["from itertools import islice, count\nimport math\n\n\ndef memoize(func):\n    cache = {}\n    def wrapp(n):\n        res = cache.get(n)\n        if res is None:\n            res = func(n)\n            cache[n] = res\n        return res\n    return wrapp\n\n\n@memoize\ndef is_prime(n):\n    for number in islice(count(2), int(math.sqrt(n) - 1)):\n        if not n % number:\n            return False\n\n    return True\n\n\ndef total(arr):\n    return sum(a for i, a in enumerate(arr[2:], 2) if is_prime(i))\n"]}}, {"name": "Sum of a Sequence [Hard-Core Version]", "link": "https://www.codewars.com/kata/587a88a208236efe8500008b", "kuy": "6 kyu", "solutions": {"python": ["def sequence_sum(a1, an, d):\n    if a1 > an and d > 0 or a1 < an and d < 0:\n        return 0\n\n    n = (an - a1) // d + 1\n\n    return (2 * a1 + d * (n - 1)) * n // 2"]}}, {"name": "IP Validation", "link": "https://www.codewars.com/kata/515decfd9dcfc23bb6000006", "kuy": "6 kyu", "solutions": {"python": ["import re\n\ndef is_valid_IP(strng):\n    return re.match(\n        r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',\n        strng) is not None"]}}, {"name": "Single character palindromes", "link": "https://www.codewars.com/kata/5a2c22271f7f709eaa0005d3", "kuy": "6 kyu", "solutions": {"python": ["def solve(s):\n    if s == s[::-1]:\n        return \"OK\"\n\n    for i in range(len(s)):\n        new_str = s[:i] + s[i + 1:]\n        if new_str == new_str[::-1]:\n            return \"remove one\"\n\n    return \"not possible\"\n"]}}, {"name": "Find the missing term in an Arithmetic Progression", "link": "https://www.codewars.com/kata/52de553ebb55d1fca3000371", "kuy": "6 kyu", "solutions": {"python": ["def find_missing(s):\n    daley = min(abs(b - a) for a, b in zip(s, s[1:]))\n\n    if s[0] < s[1]:\n        return next(a + daley for a, b in zip(s, s[1:]) if abs(b - a) != daley)\n    else:\n        return next(a - daley for a, b in zip(s, s[1:]) if abs(b - a) != daley)"]}}, {"name": "Rotate matrix counter - clockwise N - times!", "link": "https://www.codewars.com/kata/5919f3bf6589022915000023", "kuy": "6 kyu", "solutions": {"python": ["def get_matrix(height, width):\n    return [[0 for j in range(width)] for i in range(height)]\n\n\ndef rotate_against_clockwise(matrix, times):\n    new_matrix = matrix\n\n    for _ in range(times % 4):\n        height, width = len(matrix), len(matrix[0])\n        new_matrix = get_matrix(width, height)\n\n        for i in range(height):\n            for j in range(width):\n                new_matrix[width - j - 1][i] = matrix[i][j]\n\n        matrix = new_matrix\n\n    return new_matrix"]}}, {"name": "Maximum Product of Parts", "link": "https://www.codewars.com/kata/5a3a95c2e1ce0efe2c0001b0", "kuy": "6 kyu", "solutions": {"python": ["def maximum_product_of_parts(n):\n    s = str(n)\n    len_n = len(s)\n    max_num = 0\n    for i in range(1, len_n - 1):\n        for j in range(i + 1, len_n):\n            s1, s2, s3 = s[0:i], s[i:j], s[j:]\n            max_num = max(int(s1) * int(s2) * int(s3), max_num)\n\n    return max_num"]}}, {"name": "Frogificator", "link": "https://www.codewars.com/kata/59f6d96d27402f9329000081", "kuy": "6 kyu", "solutions": {"python": ["import re\n\n\ndef frogify(s):\n    s = re.sub(r'[,;()-]', '', s)\n    s = re.sub(r'\\s+', ' ', s)\n    sentences = filter(bool, re.split(r'[.!?]', s))\n    limiters = filter(bool, re.findall(r'[.!?]', s))\n\n    result = \"\"\n\n    for sentence, limiter in zip(sentences, limiters):\n        result += \" \".join(reversed(sentence.split())) + limiter + \" \"\n\n    return result[:-1]"]}}, {"name": "Prime ant", "link": "https://www.codewars.com/kata/5a2c084ab6cfd7f0840000e4", "kuy": "6 kyu", "solutions": {"python": ["def is_prime(n):\n    return next(iter(filter(lambda x: n % x == 0, xrange(2, n // 2 + 1))), -1)\n\n\ndef prime_ant(n):\n    pos = 0\n    arr = [2]\n\n    for i in xrange(n):\n        q = is_prime(arr[pos])\n\n        if q == -1:\n            pos += 1\n\n            len_arr = len(arr)\n\n            if len_arr <= pos:\n                arr.append(len_arr + 2)\n\n        else:\n            arr[pos - 1] = arr[pos - 1] + q\n            arr[pos] = arr[pos] / q\n\n            pos -= 1\n\n    return pos"]}}, {"name": "Playing with digits", "link": "https://www.codewars.com/kata/5552101f47fc5178b1000050", "kuy": "6 kyu", "solutions": {"python": ["def dig_pow(number, p):\n    s = sum(int(n) ** i for i, n in enumerate(str(number), p))\n\n    return -1 if s % number != 0 else s / number"]}}], "5 kyu": [{"name": "uniq -c (UNIX style)", "link": "https://www.codewars.com/kata/52250aca906b0c28f80003a1", "kuy": "5 kyu", "solutions": {"python": ["from itertools import groupby\n\ndef uniq_c(seq): \n    return [(c, len([*g])) for c, g in groupby(seq)]"]}}, {"name": "Lisp-esque parsing [Code Golf]", "link": "https://www.codewars.com/kata/5ea1de08a140dc0025b10d82", "kuy": "5 kyu", "solutions": {"python": ["f=float\ndef parse(c, t):\n\tm=search(r'\\([^(]*?\\)', c)\n\tif not m:return f(c)\n\tg=m.group();n,*a=g[1:-1].split()\n\treturn parse(c.replace(g,str(t[n](*map(f,a)))),t)"]}}, {"name": "Greed is Good", "link": "https://www.codewars.com/kata/5270d0d18625160ada0000e4", "kuy": "5 kyu", "solutions": {"python": ["from collections import Counter\n\n\ndef score(dice):\n    c = Counter(dice)\n    s = 0\n    for i in range(1, 7):\n        if c[i] >= 3:\n            s += 1000 if i == 1 else i * 100\n            c[i] -= 3\n\n    return s + c[1] * 100 + c[5] * 50"]}}, {"name": "Lazy Repeater", "link": "https://www.codewars.com/kata/51fc3beb41ecc97ee20000c3", "kuy": "5 kyu", "solutions": {"python": ["from itertools import cycle\n\ndef make_looper(s):\n    return lambda i=cycle(s): next(i)"]}}, {"name": "Luck check", "link": "https://www.codewars.com/kata/5314b3c6bb244a48ab00076c", "kuy": "5 kyu", "solutions": {"python": ["def luck_check(s):\n    return sum(map(int, s[:len(s) // 2])) == sum(map(int, s[len(s) // 2 + (len(s) % 2):]))"]}}, {"name": "Secret knock", "link": "https://www.codewars.com/kata/525f00ec798bc53e8e00004c", "kuy": "5 kyu", "solutions": {"python": ["r = knock(knock)\n_, l, o = [c.cell_contents for c in r.__closure__]\n\nl()\nr()"]}}, {"name": "Convert PascalCase string into snake_case", "link": "https://www.codewars.com/kata/529b418d533b76924600085d", "kuy": "5 kyu", "solutions": {"python": ["import re\n\ndef to_underscore(s):\n    if not isinstance(s, str):\n        return str(s)\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', s).lower()"]}}, {"name": "Fibonacci Streaming", "link": "https://www.codewars.com/kata/55695bc4f75bbaea5100016b", "kuy": "5 kyu", "solutions": {"python": ["def all_fibonacci_numbers():\n    a, b = 0, 1\n    while True:\n        yield b\n        a, b = b, a + b"]}}, {"name": "Arithmetic Expression Placeholders", "link": "https://www.codewars.com/kata/5e7bc286a758770033b56a5a", "kuy": "5 kyu", "solutions": {"python": ["def unwrap(obj, x):\n    return obj.do(x) if hasattr(obj, \"do\") else obj\n\n\nclass Placeholder:\n    def __init__(self, action=lambda x: next(x)):\n        self.do = action\n\n    def __call__(self, *args):\n        return self.do(iter(args))\n\n    def __add__(self, other):\n        return Placeholder(lambda x: self.do(x) + unwrap(other, x))\n\n    def __sub__(self, other):\n        return Placeholder(lambda x: self.do(x) - unwrap(other, x))\n\n    def __mul__(self, other):\n        return Placeholder(lambda x: self.do(x) * unwrap(other, x))\n\n    def __floordiv__(self, other):\n        return Placeholder(lambda x: self.do(x) // unwrap(other, x))\n\n    def __radd__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) + self.do(x))\n\n    def __rsub__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) - self.do(x))\n\n    def __rmul__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) * self.do(x))\n\n    def __rfloordiv__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) // self.do(x))\n\nx = Placeholder()", "def unwrap(obj, x):\n    return obj.do(x) if hasattr(obj, \"do\") else obj\n\n\nclass Placeholder:\n    def __init__(self, action=lambda x: x.pop(0)):\n        self.do = action\n\n    def __call__(self, *args):\n        return self.do([*args])\n\n    def __add__(self, other):\n        return Placeholder(lambda x: self.do(x) + unwrap(other, x))\n\n    def __sub__(self, other):\n        return Placeholder(lambda x: self.do(x) - unwrap(other, x))\n\n    def __mul__(self, other):\n        return Placeholder(lambda x: self.do(x) * unwrap(other, x))\n\n    def __floordiv__(self, other):\n        return Placeholder(lambda x: self.do(x) // unwrap(other, x))\n\n    def __radd__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) + self.do(x))\n\n    def __rsub__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) - self.do(x))\n\n    def __rmul__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) * self.do(x))\n\n    def __rfloordiv__(self, other):\n        return Placeholder(lambda x: unwrap(other, x) // self.do(x))\n\nx = Placeholder()"]}}, {"name": "Best travel", "link": "https://www.codewars.com/kata/55e7280b40e1c4a06d0000aa", "kuy": "5 kyu", "solutions": {"python": ["from itertools import combinations\n\n\ndef choose_best_sum(t, k, ls):\n    return min(filter(lambda i: i <= t, map(sum, combinations(ls, k))), key=lambda c: t - c, default=None)"]}}, {"name": "Directions Reduction", "link": "https://www.codewars.com/kata/550f22f4d758534c1100025a", "kuy": "5 kyu", "solutions": {"python": ["DIRECTIONS = {\"NORTH\":\"SOUTH\", \"SOUTH\":\"NORTH\", \"EAST\":\"WEST\", \"WEST\":\"EAST\"}\n\n\ndef dirReduc(dirs):\n    travel = []\n\n    for d in dirs:\n        if travel and DIRECTIONS[d] == travel[-1]:\n            travel.pop()\n        else:\n            travel.append(d)\n\n    return travel"]}}, {"name": "Valid Parentheses", "link": "https://www.codewars.com/kata/52774a314c2333f0a7000688", "kuy": "5 kyu", "solutions": {"python": ["def valid_parentheses(string):\n    stack = []\n    for c in string:\n        if c == ')':\n            if not stack:\n                return False\n\n            stack.pop()\n\n        elif c == '(':\n            stack.append(c)\n\n    return not stack"], "javascript": ["let validParentheses = parens => {\n    let stack = [];\n    for (let p of parens) {\n        if (p === \"(\")\n            stack.push(\"(\");\n        else if (!stack.length || stack[stack.length - 1] !== \"(\")\n            return false;\n        else\n            stack.pop();\n    }\n    return !stack.length;\n};\n"]}}, {"name": "Interleaving Arrays", "link": "https://www.codewars.com/kata/523d2e964680d1f749000135", "kuy": "5 kyu", "solutions": {"python": ["from itertools import zip_longest, chain\n\n\ndef interleave(*args):\n    return [*chain(*zip_longest(*args))]"]}}, {"name": "The Clockwise Spiral", "link": "https://www.codewars.com/kata/536a155256eb459b8700077e", "kuy": "5 kyu", "solutions": {"python": ["def spiral(m, n, s=0):\n    if n:\n        yield range(s, m + s)\n        yield from zip(*[*spiral(n - 1, m, m + s)][::-1])\n\n\ndef create_spiral(m):\n    return [[i + 1 for i in a] for a in spiral(m, m)]  if isinstance(m, int) else ''"]}}, {"name": "The Doppelganger Enigma", "link": "https://www.codewars.com/kata/5da558c930187300114d874e", "kuy": "5 kyu", "solutions": {"python": ["from collections import namedtuple\n\n\ndef create_namedtuple_cls(cls_name, fields):\n    class Child(namedtuple(cls_name, fields)):\n        def __getattr__(self, item):\n            return eval(f'self.{item}')\n\n    Child.__name__ = cls_name\n    return Child"]}}, {"name": "Vector Class", "link": "https://www.codewars.com/kata/532a69ee484b0e27120000b6", "kuy": "5 kyu", "solutions": {"python": ["import math\nimport operator\n\n\nclass Vector:\n    def __init__(self, *args):\n        self.x, self.y, self.z = self.args = tuple(args[0] if len(args) == 1 else args)\n        self.magnitude = math.sqrt(sum(i ** 2 for i in self.args))\n\n    def __str__(self):\n        return '<{}>'.format(', '.join(map(str, self.args)))\n\n    def __eq__(self, other):\n        return self.args == other.args\n\n    def __add__(self, other):\n        return Vector(*map(operator.add, self.args, other.args))\n\n    def __sub__(self, other):\n        return Vector(*map(operator.sub, self.args, other.args))\n\n    def dot(self, other):\n        return sum(map(operator.mul, self.args, other.args))\n\n    def to_tuple(self):\n        return self.args\n\n    def cross(self, other):\n        return Vector(\n            self.y * other.z - self.z * other.y,\n            self.z * other.x - self.x * other.z,\n            self.x * other.y - self.y * other.x,\n        )"]}}, {"name": "What's a Perfect Power anyway?", "link": "https://www.codewars.com/kata/54d4c8b08776e4ad92000835", "kuy": "5 kyu", "solutions": {"python": ["from math import *\n\n\ndef isPP(n):\n    if n < 4:\n        return None\n\n    sr = round(sqrt(n), 6)\n\n    if sr == round(sr):\n        return [sr, 2]\n\n    for m in range(2, n // 2):\n        k = round(log(n, m), 6)\n\n        if k == round(k):\n            return [m, k]\n\n    return None\n"]}}, {"name": "Count IP Addresses", "link": "https://www.codewars.com/kata/526989a41034285187000de4", "kuy": "5 kyu", "solutions": {"python": ["def ip_value(ip):\n    return sum(int(a) << (24 - i * 8) for i, a in enumerate(ip.split('.')))\n\n\ndef ips_between(start, end):\n    return ip_value(end) - ip_value(start)\n"]}}, {"name": "Bananas", "link": "https://www.codewars.com/kata/5917fbed9f4056205a00001e", "kuy": "5 kyu", "solutions": {"python": ["def bananas_gen(s: str, expected: str = 'banana'):\n    if not expected:\n        yield \"-\" * len(s)\n    else:\n        for i, c in enumerate(s):\n            if c == expected[0]:\n                start = '-' * i + c\n                yield from (start + part for part in bananas_gen(s[i + 1:], expected[1:]))\n\n\ndef bananas(s):\n    return [*bananas_gen(s)]"]}}, {"name": "Primes in numbers", "link": "https://www.codewars.com/kata/54d512e62a5e54c96200019e", "kuy": "5 kyu", "solutions": {"python": ["def factors(n):\n    d = 2\n    while d * d <= n:\n        while n > 1:\n            c = 0\n            while n % d == 0:\n                c += 1\n                n = n // d\n\n            if c:\n                yield d, c\n\n            d += 1\n\n\ndef primeFactors(n):\n    return ''.join(f'({i}{f\"**{p}\" * (p > 1)})' for i, p in factors(n))"]}}, {"name": "Simple Events", "link": "https://www.codewars.com/kata/52d3b68215be7c2d5300022f", "kuy": "5 kyu", "solutions": {"python": ["class Event:\n    def __init__(self):\n        self.subscribers = []\n\n    def subscribe(self, f):\n        self.subscribers.append(f)\n\n    def unsubscribe(self, f):\n        self.subscribers.remove(f)\n\n    def emit(self, *args, **kwargs):\n        for f in self.subscribers:\n            f(*args, **kwargs)"]}}, {"name": "All Star Code Challenge #19", "link": "https://www.codewars.com/kata/5865a407b359c45982000036", "kuy": "5 kyu", "solutions": {"python": ["from itertools import permutations\n\n\ndef slogan_maker(array):\n    return [' '.join(p) for p in permutations([a for i, a in enumerate(array) if array.index(a) == i])]\n"]}}, {"name": "Complete Binary Tree", "link": "https://www.codewars.com/kata/5c80b55e95eba7650dc671ea", "kuy": "5 kyu", "solutions": {"python": ["import math\nfrom itertools import chain\n\n\ndef divide_on_parts(arr):\n    nodes = len(arr)\n\n    if nodes == 1:\n        return [], arr[0], []\n\n    height = math.ceil(math.log2(nodes + 1))\n    min_branch = 2 ** (height - 2) - 1\n    max_branch = 2 ** (height - 1) - 1\n\n    left_count = min(max_branch, nodes - 1 - min_branch) + 1\n    (*left, head), right = arr[:left_count], arr[left_count:]\n\n    return left, head, right\n\n\ndef insert(visit, array):\n    if array:\n        visit.append(array)\n\n\ndef complete_binary_tree(a):\n    visit = [a]\n    results = [[]]\n    count = 1\n\n    while visit:\n        arr = visit.pop(0)\n\n        left, head, right = divide_on_parts(arr)\n        results[-1].append(head)\n        count -= 1\n\n        if count == 0:\n            count = 2 ** len(results)\n            results.append([])\n\n        insert(visit, left)\n        insert(visit, right)\n\n    return list(chain(*results))"]}}, {"name": "Find the smallest", "link": "https://www.codewars.com/kata/573992c724fc289553000e95", "kuy": "5 kyu", "solutions": {"python": ["def generator(n: str):\n    for i in range(len(n)):\n        for j in range(len(n)):\n            l = [*n]\n            l.insert(j, l.pop(i))\n            yield [int(''.join(l).lstrip('0')), i, j]\n\n\ndef smallest(n):\n    return min(generator(str(n)))"]}}, {"name": "Context manager decorator", "link": "https://www.codewars.com/kata/54e0816286522e95990007de", "kuy": "5 kyu", "solutions": {"python": ["class ContextManager(object):\n    def __init__(self, gen):\n        self.gen = gen\n    \n    def __enter__(self):\n        return next(self.gen)\n    \n    def __exit__(self, *args):\n        return self.gen.throw(*args)\n\ndef contextmanager(func):\n    def wrapper(*args, **kwargs):\n        return ContextManager(func(*args, **kwargs))\n    return wrapper"]}}, {"name": "Refactor a node-based calculator (DRY)", "link": "https://www.codewars.com/kata/5bcf52022f660cab19000300", "kuy": "5 kyu", "solutions": {"python": ["import operator as o\nclass Node:\n    def __init__(s,*v):s.v = v\nvalue=type('',(Node,),{'compute':lambda s:s.v[0]})\nfor n in 'add','sub','mul','truediv','mod','pow':\n    f=lambda s,c=getattr(o,n):c(s.v[0].compute(),s.v[1].compute())\n    __builtins__['global'+'s']()[n]=type('',(Node,),{'compute':f})"]}}, {"name": "Limited number of instances", "link": "https://www.codewars.com/kata/5bd36d5e03c3c4a37f0004f4", "kuy": "5 kyu", "solutions": {"python": ["def limiter(limit: int, unique: str, lookup: str):\n    def decorator(cls):\n        cache, recent = {}, None\n\n        def wrapper(*args, **kwargs):\n            nonlocal recent\n            obj = cls(*args, **kwargs)\n            key = getattr(obj, unique)\n\n            if key in cache:\n                recent = cache[key]\n            elif limit > len(cache):\n                recent = cache[key] = obj\n            elif lookup != \"RECENT\":\n                recent = [*cache.values()][0 if lookup == 'FIRST' else -1]\n\n            return recent\n\n        return wrapper\n\n    return decorator\n"]}}, {"name": "Factorial decomposition", "link": "https://www.codewars.com/kata/5a045fee46d843effa000070", "kuy": "5 kyu", "solutions": {"python": ["from math import factorial, sqrt\nfrom itertools import count, takewhile, islice\n\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))\n\n\ndef prime_gen():\n    yield from filter(is_prime, count(2))\n\n\ndef conv(f, i):\n    n = 0\n\n    while True:\n        f, o = divmod(f, i)\n        if o:\n            break\n        n += 1\n\n    return f'^{n}' if n != 1 else ''\n\n\ndef decomp(n):\n    f = factorial(n)\n    return ' * '.join(f'{i}{conv(f, i)}' for i in takewhile(lambda j: j <= n, prime_gen()))\n"]}}, {"name": "Return substring instance count - 2", "link": "https://www.codewars.com/kata/52190daefe9c702a460003dd", "kuy": "5 kyu", "solutions": {"python": ["def search_substr(f, s, o=True):\n    return 0 if not f or not s or s not in f else 1 + search_substr(f[f.index(s) + (1 if o else len(s)):], s, o)\n"]}}, {"name": "Regex Password Validation", "link": "https://www.codewars.com/kata/52e1476c8147a7547a000811", "kuy": "5 kyu", "solutions": {"python": ["regex=r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,}$\""]}}, {"name": "Common Denominators", "link": "https://www.codewars.com/kata/54d7660d2daf68c619000d95", "kuy": "5 kyu", "solutions": {"python": ["from math import gcd\nfrom functools import reduce\n\n\ndef convertFracts(lst):\n    if not lst:\n        return lst\n\n    res = reduce(lambda a, b: a * b // gcd(a, b), (i for _, i in lst))\n    return [[res // j * i, res] for i, j in lst]"]}}, {"name": "Product of consecutive Fib numbers", "link": "https://www.codewars.com/kata/5541f58a944b85ce6d00006a", "kuy": "5 kyu", "solutions": {"python": ["def productFib(prod):\n    i, j = 0, 1\n    while True:\n        i, j = j, i + j\n        if i * j == prod:\n            return [i, j, True]\n        elif i * j > prod:\n            return [i, j, False]\n"]}}, {"name": "Did I Finish my Sudoku?", "link": "https://www.codewars.com/kata/53db96041f1a7d32dc0004d2", "kuy": "5 kyu", "solutions": {"python": ["import numpy\ndigits = set(range(1, 10))\n\ndef done_or_not(board):\n    board = numpy.array(board)\n    if not (all(set(a) == digits for a in board) and all(set(a) == digits for a in board.T)):\n        return 'Try again!'\n\n    for i in range(3):\n        for j in range(3):\n            if board[i * 3:(i + 1) * 3, j * 3:(j + 1) * 3].sum() != sum(digits):\n                return 'Try again!'\n    return 'Finished!'"]}}, {"name": "Pete, the baker", "link": "https://www.codewars.com/kata/525c65e51bf619685c000059", "kuy": "5 kyu", "solutions": {"python": ["def cakes(recipe, available):\n    return min(available[k] // recipe[k] for k in recipe) if set(recipe).issubset(available) else 0\n"]}}, {"name": "Rot13", "link": "https://www.codewars.com/kata/530e15517bc88ac656000716", "kuy": "5 kyu", "solutions": {"python": ["import string\nfrom codecs import encode as _dont_use_this_\n\nl = [chr(c) for c in range(ord('a'), ord('z') + 1)]\nu = [c.upper() for c in l]\n\ndef rot13(m):\n    return ''.join((u * c.isupper() or l)[(l.index(c.lower()) + 13) % len(l)] if c.isalpha() else c for c in m)\n"]}}, {"name": "Weight for weight", "link": "https://www.codewars.com/kata/55c6126177c9441a570000cc", "kuy": "5 kyu", "solutions": {"python": ["from collections import defaultdict\n\ndef order_weight(strng):\n    data = defaultdict(list)\n    for i in strng.split():\n        data[sum(map(int, i))].append(i)\n    return ' '.join(' '.join(sorted(data[a])) for a in sorted(data))\n"]}}, {"name": "Where my anagrams at?", "link": "https://www.codewars.com/kata/523a86aa4230ebb5420001e1", "kuy": "5 kyu", "solutions": {"python": ["from collections import Counter\n\n\ndef anagrams(word, words):\n    return [w for w in words if Counter(word) == Counter(w)]\n"]}}, {"name": "Simple Finite State Machine Compiler", "link": "https://www.codewars.com/kata/59923f1301726f5430000059", "kuy": "5 kyu", "solutions": {"python": ["from re import split\n\n\nclass FSM(object):\n    def __init__(self, insts: str):\n        self.states = {\n            k: val for k, *val in\n            (map(str.strip, split(r'[;,]', i)) for i in insts.strip().split('\\n'))\n        }\n\n    def run_fsm(self, start, sequence):\n        path = [start]\n        for s in sequence:\n            path.append(self.states[path[-1]][s])\n        return path[-1], int(self.states[path[-1]][-1]), path\n"]}}, {"name": "Find the unique string", "link": "https://www.codewars.com/kata/585d8c8a28bc7403ea0000c3", "kuy": "5 kyu", "solutions": {"python": ["from collections import defaultdict\n\n\ndef find_uniq(arr):\n    d = defaultdict(list)\n    for i in arr:\n        key = frozenset(i.lower().strip())\n        d[key].append(i)\n        if len(d) > 1:\n            res = [v for v in d.values() if len(v) == 1]\n            if len(res) == 1:\n                return res[0][0]\n"]}}, {"name": "Gap in Primes", "link": "https://www.codewars.com/kata/561e9c843a2ef5a40c0000a4", "kuy": "5 kyu", "solutions": {"python": ["from math import sqrt\nfrom itertools import count, islice\n\n\ndef primes(start, end):\n    def is_prime(n):\n        return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))\n\n    yield from (i for i in range(start, end) if is_prime(i))\n\n\ndef gap(g, m, n):\n    gen = primes(m, n)\n    first = next(gen)\n\n    for i in gen:\n        first, second = i, first\n        if first - second == g:\n            return [second, first]"]}}, {"name": "int32 to IPv4", "link": "https://www.codewars.com/kata/52e88b39ffb6ac53a400022e", "kuy": "5 kyu", "solutions": {"python": ["def int32_to_ip(int32):\n    return '.'.join([f'{int32 // (256 ** i) % 256}' for i in range(4)][::-1])\n"]}}, {"name": "Not very secure", "link": "https://www.codewars.com/kata/526dbd6c8c0eb53254000110", "kuy": "5 kyu", "solutions": {"python": ["def alphanumeric(s):\n    return s and all(c.isalpha() or c.isdigit() for c in s)\n"]}}, {"name": "Integers: Recreation One", "link": "https://www.codewars.com/kata/55aa075506463dac6600010d", "kuy": "5 kyu", "solutions": {"python": ["import math\n\n\ndef divisor_generator(n):\n    for i in filter(lambda a: n % a == 0, range(1, int(math.sqrt(n) + 1))):\n        yield from (i, *((n / i,) if i * i != n else ()))\n\n\ndef predicate(i):\n    s = int(sum(j ** 2 for j in divisor_generator(i)))\n    return [i, s] if math.sqrt(s) % 1 == 0 else None\n\n\ndef list_squared(m, n):\n    return [i for i in (predicate(j) for j in range(m, n)) if i]\n"]}}, {"name": "The Hashtag Generator", "link": "https://www.codewars.com/kata/52449b062fb80683ec000024", "kuy": "5 kyu", "solutions": {"python": ["def generate_hashtag(s):\n    s = f'#{s.title().replace(\" \", \"\")}'\n    return s if 1 < len(s) < 140 else False"]}}, {"name": "Perimeter of squares in a rectangle", "link": "https://www.codewars.com/kata/559a28007caad2ac4e000083", "kuy": "5 kyu", "solutions": {"python": ["def fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n\ndef perimeter(n):\n    return sum([*fib(n + 2)][1:]) * 4"]}}, {"name": "Extract the domain name from a URL", "link": "https://www.codewars.com/kata/514a024011ea4fb54200004b", "kuy": "5 kyu", "solutions": {"python": ["def domain_name(url):\n    dom = url.split('//', 1)[-1].split('/')[0]\n    return (dom.split('www.')[-1] if dom.startswith('www.') else dom).split('.')[0]\n"]}}, {"name": "First non-repeating character", "link": "https://www.codewars.com/kata/52bc74d4ac05d0945d00054e", "kuy": "5 kyu", "solutions": {"python": ["def first_non_repeating_letter(s):\n    return next((c for c in s if s.lower().count(c.lower()) == 1), '')\n"]}}, {"name": "Maximum subarray sum", "link": "https://www.codewars.com/kata/54521e9ec8e60bc4de000d6c", "kuy": "5 kyu", "solutions": {"python": ["def maxSequence(arr):\n    if not arr:\n        return 0\n\n    m = arr[0]\n    for i in range(len(arr) + 1):\n        m = max((m, max((sum(arr[i:j]) for j in range(i + 1, len(arr) + 1)), default=m)))\n\n    return m if m > 0 else 0\n"]}}, {"name": "RGB To Hex Conversion", "link": "https://www.codewars.com/kata/513e08acc600c94f01000001", "kuy": "5 kyu", "solutions": {"python": ["def rgb(r, g, b):\n    return ''.join('{:02X}'.format(((i if i < 256 else 255) if i > 0 else 0)) for i in (r, g, b))\n"]}}, {"name": "Human Readable Time", "link": "https://www.codewars.com/kata/52685f7382004e774f0001f7", "kuy": "5 kyu", "solutions": {"python": ["def make_readable(s):\n    return f'{s // 3600 :02d}:{s // 60 % 60 :02d}:{s % 60 :02d}'"]}}, {"name": "PaginationHelper", "link": "https://www.codewars.com/kata/515bb423de843ea99400000a", "kuy": "5 kyu", "solutions": {"python": ["from math import ceil, floor\n\n\nclass PaginationHelper:\n\n    def __init__(self, collection, items_per_page):\n        collection = list(collection)\n        self._page_size = items_per_page\n        self._items_count = len(collection)\n        self._page_count = int(ceil(float(self._items_count) / items_per_page))\n\n    def __repr__(self):\n        return '{} {} {}'.format(self._page_size, self._items_count, self._page_count)\n\n    def item_count(self):\n        return self._items_count\n\n    def page_count(self):\n        return self._page_count\n\n    def page_index(self, item_index):\n        if item_index >= self._items_count or item_index < 0:\n            return -1\n\n        return int(floor(floor(item_index) / self._page_size))\n\n    def page_item_count(self, page_index):\n        if not (0 < page_index < self._page_count):\n            return -1\n\n        if page_index == self._page_count - 1:\n            return self._items_count % self._page_size\n\n        return self._page_size"]}}, {"name": "Moving Zeros To The End", "link": "https://www.codewars.com/kata/52597aa56021e91c93000cb0", "kuy": "5 kyu", "solutions": {"python": ["def move_zeros(array):\n    a = [i for i in array if not (i == 0 and type(i) in (int, float))]\n    return a + [0] * (len(array) - len(a))\n"]}}, {"name": "Memoized Fibonacci", "link": "https://www.codewars.com/kata/529adbf7533b761c560004e5", "kuy": "5 kyu", "solutions": {"python": ["def memoize(func):\n    cache = {}\n\n    def wrapper(n):\n        if n not in cache:\n            cache[n] = func(n)\n        return cache[n]\n\n    return wrapper\n\n\n@memoize\ndef fibonacci(n):\n    if n in [0, 1]:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n"]}}, {"name": "Calculating with Functions", "link": "https://www.codewars.com/kata/525f3eda17c7cd9f9e000b39", "kuy": "5 kyu", "solutions": {"python": ["from operator import add, sub, mul, floordiv\n\ndef factory(val):\n    return lambda v=None: val if v is None else v(val)\ndef op_factory(op):\n    return lambda val: lambda a: op(a, val)\n\nfor i, name in enumerate(['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']):\n    globals()[name] = factory(i)\nfor name, op in zip(['plus', 'minus', 'times', 'divided_by'], [add, sub, mul, floordiv]):\n    globals()[name] = op_factory(op)\n"]}}, {"name": "Square Matrix Multiplication", "link": "https://www.codewars.com/kata/5263a84ffcadb968b6000513", "kuy": "5 kyu", "solutions": {"python": ["from numpy import array\n\ndef matrix_mult(a, b):\n  return (array(a).dot(array(b))).tolist()"]}}, {"name": "Python Reflection: Disassembling the secret", "link": "https://www.codewars.com/kata/59b5896322f6bbe260002aa0", "kuy": "5 kyu", "solutions": {"python": ["def find_the_secret(f):\n    return f.__code__.co_consts[-1]"]}}, {"name": "Simple Pig Latin", "link": "https://www.codewars.com/kata/520b9d2ad5c005041100000f", "kuy": "5 kyu", "solutions": {"python": ["def pig_it(text):\n    return ' '.join(map(lambda s: (s[1:] + s[0] + 'ay') if s.isalpha() else s, text.split()))"]}}, {"name": "Only-Readable-Once list", "link": "https://www.codewars.com/kata/53f17f5b59c3fcd589000390", "kuy": "5 kyu", "solutions": {"python": ["class SecureList():\n    def __init__(self, lst):\n        self.data = list(lst)\n    \n    def __repr__(self):\n        d, self.data = self.data, []\n        return repr(d)\n        \n    def __str__(self):\n        return repr(self)\n    \n    def __getattr__(self, item):\n        return getattr(self.data, item)\n    \n    def __getitem__(self, item):\n        return self.data.pop(item)\n  "]}}, {"name": "Vector class", "link": "https://www.codewars.com/kata/526dad7f8c0eb5c4640000a4", "kuy": "5 kyu", "solutions": {"python": ["import math\n\nclass Vector:\n    def __init__(self, vector):\n        self.data = tuple(vector)\n    \n    def __str__(self):\n        return '({})'.format(','.join(map(str, self.data)))\n    \n    def _map_vector(self, vector, operator):\n        assert len(self.data) == len(vector.data)\n        return Vector([operator(a, b) for a, b in zip(self.data, vector.data)])\n\n    def add(self, vector):\n        return self._map_vector(vector, lambda a, b: a + b)\n\n    def subtract(self, vector):\n        return self._map_vector(vector, lambda a, b: a - b)\n\n    def dot(self, vector):\n        return sum(self._map_vector(vector,  lambda a, b: a * b).data)\n\n    def norm(self):\n        return math.sqrt(sum(a ** 2 for a in self.data))\n    \n    def equals(self, vector):\n        return self.data == vector.data"]}}, {"name": "String incrementer", "link": "https://www.codewars.com/kata/54a91a4883a7de5d7800009c", "kuy": "5 kyu", "solutions": {"python": ["import re\n\nDIGITS_REGEX = re.compile(r'\\d+$')\n\ndef increment_string(strng):\n    digits = DIGITS_REGEX.search(strng)\n    if not digits:\n        return strng + '1'\n    digits = digits.group() \n    number = str(int(digits) + 1)\n    return '{}{}{}'.format(strng.replace(digits, ''), '0' * (len(digits) - len(number)), number)"]}}, {"name": "Pick peaks", "link": "https://www.codewars.com/kata/5279f6fe5ab7f447890006a7", "kuy": "5 kyu", "solutions": {"python": ["def pick_peaks(arr):\n    picks, poss = [], []\n\n    if not arr:\n        return dict(peaks=picks, pos=poss)\n\n    pos, value = 0, arr[0]\n    arr_iter = iter(enumerate(arr[1:], 1))\n\n    for i, a in arr_iter:\n        if value < a:\n            pos, value = i, a\n            break\n        else:\n            pos, value = i, a\n\n    for i, a in arr_iter:\n        if a < value:\n            picks.append(value)\n            poss.append(pos)\n            pos, value = i, a\n\n            for i, a in arr_iter:\n                if value < a:\n                    pos, value = i, a\n                    break\n                else:\n                    pos, value = i, a\n\n        elif a > value:\n            pos, value = i, a\n\n    return dict(peaks=picks, pos=poss)"]}}, {"name": "Scramblies", "link": "https://www.codewars.com/kata/55c04b4cc56a697bb0000048", "kuy": "5 kyu", "solutions": {"python": ["def scramble(s1, s2):\n    if len(s2) > len(s1):\n        return False\n    if s1 in s2:\n        return True   \n\n    return all(s1.count(s) >= s2.count(s) for s in set(s2))"]}}, {"name": "Can you get the loop ?", "link": "https://www.codewars.com/kata/52a89c2ea8ddc5547a000863", "kuy": "5 kyu", "solutions": {"python": ["def loop_size(node):\n    nodes = []\n    while node not in nodes:\n        nodes.append(node)\n        node = node.next\n    \n    return len(nodes) - nodes.index(node)\n    "]}}, {"name": "Last digit of a large number", "link": "https://www.codewars.com/kata/5511b2f550906349a70004e1", "kuy": "5 kyu", "solutions": {"python": ["def last_digit(n1, n2):\n    last_number = last = n1 % 10\n    numbers = []\n    for i in range(1, n2):\n        last = (last_number * last) % 10\n        if last in numbers:\n            return numbers[(n2 - i - 1) % len(numbers)]\n        else:\n            numbers.append(last)\n\n    return last if n2 != 0 else 1"]}}, {"name": "Simple assembler interpreter", "link": "https://www.codewars.com/kata/58e24788e24ddee28e000053", "kuy": "5 kyu", "solutions": {"python": ["def check_int(s):\n    if s[0] in ('-', '+'):\n        return s[1:].isdigit()\n\n    return s.isdigit()\n\n\ndef simple_assembler(commands):\n    commands_len = len(commands)\n    registers = {}\n    ip = 0\n\n    while ip < commands_len:\n        cmd = commands[ip]\n\n        operands = cmd.split()\n        op = operands.pop(0)\n\n        if op == \"mov\":\n            reg1, reg2 = operands\n\n            if check_int(reg2):\n                registers[reg1] = int(reg2)\n            else:\n                registers[reg1] = registers[reg2]\n        elif op == \"inc\":\n            registers[operands[0]] += 1\n        elif op == \"dec\":\n            registers[operands[0]] -= 1\n        else:\n            op1, op2 = operands\n            op2 = int(op2)\n\n            if (check_int(op1) and bool(op1)) or registers[op1]:\n                ip += op2\n                continue\n\n        ip += 1\n\n    return registers"]}}, {"name": "Unique digit sequence", "link": "https://www.codewars.com/kata/599688d0e2800dda4e0001b0", "kuy": "5 kyu", "solutions": {"python": ["def generate_numbers(numbers, numbers_count):\n    if numbers_count == 0:\n        yield from numbers\n    else:\n        new_numbers_count = numbers_count - 1\n\n        for i in numbers:\n            for j in generate_numbers(numbers, new_numbers_count):\n                number = i * 10 ** numbers_count + j\n\n                yield number\n\n\ndef find_num(n):\n    if n <= 10:\n        return n\n\n    numbers = list(range(11))\n    numbers_set = set(range(10))\n\n    i = 10\n\n    for _ in range(n - 10):\n        digits = set()\n        ii = i\n        while ii:\n            digits.add(ii % 10)\n            ii //= 10\n\n        numbers_digits = sorted(numbers_set - digits)\n\n        def find_number():\n            for j in range(1, len(numbers_digits) + 1):\n                for num in generate_numbers(numbers_digits, j):\n                    if num not in numbers:\n                        return num\n\n        number = find_number()\n        numbers.append(number)\n        i = number\n\n    return numbers[-1]"]}}, {"name": "Ninety Nine Thousand Nine Hundred Ninety Nine", "link": "https://www.codewars.com/kata/5463c8db865001c1710003b2", "kuy": "5 kyu", "solutions": {"python": ["def number_to_english(n):\n    numbers = {\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine',\n        10: 'ten',\n        11: 'eleven',\n        12: 'twelve',\n        13: 'thirteen',\n        14: 'fourteen',\n        15: 'fifteen',\n        16: 'sixteen',\n        17: 'seventeen',\n        18: 'eighteen',\n        19: 'nineteen',\n        20: 'twenty',\n        30: 'thirty',\n        40: 'forty',\n        50: 'fifty',\n        60: 'sixty',\n        70: 'seventy',\n        80: 'eighty',\n        90: 'ninety'\n    }\n\n    if n < 0 or isinstance(n, float) or n > 99999:\n        return ''\n\n    if n == 0:\n        return 'zero'\n\n    def convert_to_str(number):\n        s = []\n        if number:\n            if number in numbers:\n                return numbers[number]\n\n            decimal = number // 10 * 10\n            digit = number % 10\n\n            if decimal:\n                s.append(numbers[decimal])\n            if digit:\n                s.append(numbers[digit])\n\n        return ' '.join(s) if s else ''\n\n    result = []\n\n    twenty = convert_to_str(n % 100)\n    n //= 100\n    hundreds = convert_to_str(n % 10)\n    n //= 10\n    thousand = convert_to_str(n)\n\n    if thousand:\n        result.append(thousand + ' thousand')\n    if hundreds:\n        result.append(hundreds + ' hundred')\n    if twenty:\n        result.append(twenty)\n\n    return ' '.join(result)\n"]}}, {"name": "Simple number sequence", "link": "https://www.codewars.com/kata/5a28cf591f7f7019a80000de", "kuy": "5 kyu", "solutions": {"python": ["def chunks(lst, chunk_size):\n    len_s, arr = len(lst), []\n    is_max = False\n    i = 0\n\n    while i < len_s:\n        if is_max:\n            chunk_size += 1\n\n        value = lst[i:i + chunk_size]\n        value_next = lst[i + chunk_size:i + 2 * chunk_size]\n\n        l = len(value)\n\n        is_max = value == '9' * l or (value == '9' * (l - 1) + '8' and value_next != '9' * l)\n\n        arr.append(int(value))\n        i += chunk_size\n\n    return arr\n\n\ndef missing(s):\n    len_s = len(s)\n\n    for i in range(1, len_s // 2):\n        arr = chunks(s, i)\n        max_num, min_num = max(arr), min(arr)\n\n        if max_num - min_num != len(arr):\n            continue\n\n        for j in range(min_num + 1, max_num):\n            if j not in arr:\n                return j\n\n    return -1\n"]}}, {"name": "A Chain adding function", "link": "https://www.codewars.com/kata/539a0e4d85e3425cb0000a88", "kuy": "5 kyu", "solutions": {"python": ["class add(int):\n    def __call__(self, number):\n        return add(self + number)"]}}, {"name": "Prime Ant - Performance Version", "link": "https://www.codewars.com/kata/5a2e96f1c5e2849eef00014a", "kuy": "5 kyu", "solutions": {"python": ["import math\nfrom itertools import count, islice\n\ncache = {}\n\n\ndef is_prime(n):\n    if n not in cache:\n        for number in islice(count(2), int(math.sqrt(n) - 1)):\n            if not n % number:\n                cache[n] = number\n                return number\n\n        cache[n] = -1\n        return -1\n\n    return cache[n]\n\n\ndef prime_ant(n):\n    pos = 0\n    arr = [2]\n    len_arr = 1\n    steps = 0\n\n    while steps < n:\n        q = is_prime(arr[pos])\n\n        if q == -1:\n            pos += 1\n\n            if len_arr == pos:\n                arr.append(len_arr + 2)\n                len_arr += 1\n\n        else:\n            arr[pos - 1] += q\n            arr[pos] /= q\n\n            pos -= 1\n\n        steps += 1\n\n    return arr[:pos + 1]"]}}, {"name": "Number of trailing zeros of N!", "link": "https://www.codewars.com/kata/52f787eb172a8b4ae1000a34", "kuy": "5 kyu", "solutions": {"python": ["def zeros(n):\n    zero_count = 0\n    power = 5\n\n    while n >= power:\n        zero_count += n // power\n        power *= 5\n\n    return zero_count\n"]}}], "Beta": [{"name": "Terrible Exception Handling", "link": "https://www.codewars.com/kata/5b277a1e9212cb27f10000bd", "kuy": "Beta", "solutions": {"python": ["import _thread\nimport time\n\ncanary = object()\n\n\ndef handle(func, success, failure, *exceptions):\n    return_value = exception_value = canary\n\n    def _inner():\n        nonlocal return_value, exception_value\n\n        try:\n            return_value = func()\n        except Exception as e:\n            exception_value = e\n\n    _thread.start_new_thread(_inner, (), {})\n\n    while return_value is canary and exception_value is canary:\n        time.sleep(0.01)\n\n    if return_value is not canary:\n        success(func, return_value)\n    elif isinstance(exception_value, exceptions):\n        failure(func, exception_value)\n    else:\n        raise exception_value"]}}, {"name": "Flatten A Nested Dictionary That Contains Lists", "link": "https://www.codewars.com/kata/5cde541f52ed7f000c0aa9a0", "kuy": "Beta", "solutions": {"python": ["def flatten(x, prefixes: tuple = (), store: dict = None) -> dict:\n    store = store or {}\n\n    for key, value in x.items():\n        if isinstance(value, dict) and value:\n            store = flatten(value, (*prefixes, key), store)\n        elif isinstance(value, list) and value:\n            for i, l in enumerate(value):\n                store = flatten(l, (*prefixes, f\"{key}[{i}]\"), store)\n        else:\n            store[\".\".join(map(str, (*prefixes, key))) if prefixes else key] = value\n\n    return store"]}}, {"name": "Find Nearest Fibonacci Number", "link": "https://www.codewars.com/kata/5ca22e6b86eed5002812061e", "kuy": "Beta", "solutions": {"python": ["from math import log\n\nLOG_5 = log(5) / 2\nLOG_PI = log((1 + 5 ** 0.5) / 2)\n\n\ndef memoize(func):\n    cache = {}\n\n    def wrapper(n):\n        if n not in cache:\n            cache[n] = func(n)\n        return cache[n]\n\n    return wrapper\n\n\n@memoize\ndef fib(n):\n    return fib(n - 1) + fib(n - 2) if n > 1 else n\n\n\ndef nearest_fibonacci(n):\n    if not n:\n        return 0\n\n    y = int((log(n) + LOG_5) / LOG_PI)\n    return min(fib(y), fib(y + 1), key=lambda i: abs(n - i))"]}}, {"name": "Cause str(x) to raise an exception", "link": "https://www.codewars.com/kata/5ae786ad68e644e861000075", "kuy": "Beta", "solutions": {"python": ["class B:\n    def __str__(self):\n        raise\n\nclass D(B):\n    def __str__(self):\n        pass\n\nx = D()"]}}, {"name": "Implement Classes by using Functions", "link": "https://www.codewars.com/kata/59a6f0d3589d2a112700000e", "kuy": "Beta", "solutions": {"python": ["from functools import partial\n\n_class_private_attrs = ('_mro_', '_class_')\n\n\ndef _isinstance(x, A):\n    return A in x._class_._mro_\n\n\ndef _type(x):\n    return x._class_\n\n\ndef _class(*protos):\n    def decorator(func):\n        attributes = func()\n\n        def cls(*args, **kwargs):\n            def obj():\n                pass\n\n            _init_(obj, *args, **kwargs)\n\n            for c in cls._mro_:\n                for name, method in c._methods_.items():\n                    setattr(obj, name, partial(method, obj))\n\n            obj._mro_ = cls._mro_\n            obj._class_ = cls._class_\n\n            return obj\n\n        cls._mro_ = (*protos, cls)\n        cls._class_ = cls\n        cls._methods_ = {**attributes}\n        _init_ = next(c._methods_['_init_'] for c in reversed(cls._mro_) if '_init_' in c._methods_)\n\n        return cls\n\n    return decorator\n\n__all__ = ['_class', '_isinstance', '_type']"]}}, {"name": "Dynamic Class Creation", "link": "https://www.codewars.com/kata/57fab8a32b531416560005a5", "kuy": "Beta", "solutions": {"python": ["create_class = lambda name, inheritance=(object,), methods=(): type(name, inheritance, {method.__name__: method for method in methods})\n"]}}], "4 kyu": [{"name": "Memoized Log Cutting", "link": "https://www.codewars.com/kata/54b058ce56f22dc6fe0011df", "kuy": "4 kyu", "solutions": {"python": ["def memoize(func):\n    cache = {}\n    def wrapper(p, n):\n        key = tuple(p), n\n        if key not in cache:\n            cache[key] = func(p, n)\n        return cache[key]\n    return wrapper\n\n@memoize\ndef cut_log(p, n):\n    if (n == 0):\n        return 0\n    q = -1\n    for i in range(1, n+1):\n        q = max(q, p[i] + cut_log(p, n-i))\n\n    return q"]}}, {"name": "Set Closure Generator", "link": "https://www.codewars.com/kata/58febc23627d2f48de000060", "kuy": "4 kyu", "solutions": {"python": ["from heapq import heapify, heappop, heappush\n\n\ndef closure_gen(*s):\n    heap = [*s]\n    heapify(heap)\n    numbers = {*s}\n\n    while heap:\n        n = heappop(heap)\n\n        yield n\n\n        to_add = {n * i for i in s} - numbers\n        numbers |= to_add\n\n        for n in to_add:\n            heappush(heap, n)", "def closure_gen(*s):\n    s = [*s]\n\n    if 1 in s:\n        s.remove(1)\n        yield 1\n\n    queue = [(n, n, 0) for n in s]\n    numbers = [1]\n\n    while queue:\n        prod, *_ = min(queue)\n        yield prod\n\n        numbers.append(prod)\n        for i, (p, n, d) in enumerate(queue):\n            if p <= prod:\n                d += p == prod\n                queue[i] = numbers[d] * n, n, d"]}}, {"name": "Shortest Knight Path", "link": "https://www.codewars.com/kata/549ee8b47111a81214000941", "kuy": "4 kyu", "solutions": {"python": ["from heapq import heappop, heappush\n\nSTEPS = [(2, -1), (2, 1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n\n\ndef normalize(x, y):\n    return 'abcdefgh'.index(x), int(y) - 1\n\n\ndef knight(p1, p2):\n    src, dst = normalize(*p1), normalize(*p2)\n\n    queue = [(0, src)]\n    visited = {src}\n\n    while queue:\n        distance, (x, y) = heappop(queue)\n\n        if (x, y) == dst:\n            return distance\n\n        for xd, yd in STEPS:\n            xx, yy = x + xd, y + yd\n\n            if 0 <= xx < 8 and 0 <= yy < 8 and (xx, yy) not in visited:\n                visited.add((xx, yy))\n                heappush(queue, (distance + 1, (xx, yy)))"]}}, {"name": "Boggle Word Checker", "link": "https://www.codewars.com/kata/57680d0128ed87c94f000bfd", "kuy": "4 kyu", "solutions": {"python": ["from heapq import heappop, heappush\n\nSTEPS = (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)\n\n\ndef find_word(board, word):\n    queue = [\n        (word[1:], (i, j), {(i, j)})\n        for i, w in enumerate(board) for j, c in enumerate(w)\n        if c == word[0]\n    ]\n\n    while queue:\n        w, (x, y), visited = heappop(queue)\n\n        if not w:\n            return True\n\n        for x_step, y_step in STEPS:\n            xx, yy = pos = x + x_step, y + y_step\n\n            if pos not in visited and len(board) > xx >= 0 and len(board[0]) > yy >= 0 and board[xx][yy] == w[0]:\n                heappush(queue, (w[1:], pos, visited | {pos}))\n\n    return False"], "javascript": ["let STEPS = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\nlet isVisited = (arr, pos) => arr.filter(p => p[0] === pos[0] && p[1] === pos[1]).length !== 0;\nlet getValue = (arr, x, y) => {try {return arr[x][y];} catch (e) {return null;}};\n\n\nlet checkWord = (board, word) => {\n    let queue = [];\n\n    for (let [i, w] of board.entries())\n        for (let [j, c] of w.entries())\n            if (c === word[0])\n                queue.push([word.slice(1), [i, j], [[i, j]]]);\n\n    while (queue.length) {\n        let [w, [x, y], visited] = queue.shift();\n\n        if (w.length === 0)\n            return true;\n\n        STEPS\n            .map(arr => [x + arr[0], y + arr[1]])\n            .filter(pos => !isVisited(visited, pos) && getValue(board, ...pos) === w[0])\n            .forEach(pos => queue.push([w.slice(1), pos, [...visited, pos]]));\n\n    }\n\n    return false;\n};"]}}, {"name": "Regular Expressions (groups): Splitting phone numbers into their separate parts.", "link": "https://www.codewars.com/kata/57a492607cb1f315ec0000bb", "kuy": "4 kyu", "solutions": {"python": ["regex_str = r\"^(?:(?:\\+|00)([1-9]\\d) )?(?:((?:(?<=^)0|)[1-9]\\d) )?([1-9]\\d{5})$\""]}}, {"name": "Simple maze", "link": "https://www.codewars.com/kata/56bb9b7838dd34d7d8001b3c", "kuy": "4 kyu", "solutions": {"python": ["def has_exit(maze):\n    queue = [(i, j) for i, a in enumerate(maze) for j, c in enumerate(a) if c == 'k']\n    assert len(queue) == 1\n    visited = {*queue}\n\n    while queue:\n        x, y = queue.pop()\n\n        if x in (0, len(maze) - 1) or y in (0, len(maze[0]) - 1):\n            return True\n\n        for x_step, y_step in (1, 0), (0, 1), (-1, 0), (0, -1):\n            xx, yy = pos = x + x_step, y + y_step\n\n            if pos not in visited and len(maze) > xx >= 0 and len(maze[0]) > yy >= 0 and maze[xx][yy] == ' ':\n                visited.add(pos)\n                queue.append(pos)\n\n    return False"]}}, {"name": "Hamming Numbers", "link": "https://www.codewars.com/kata/526d84b98f428f14a60008da", "kuy": "4 kyu", "solutions": {"python": ["from heapq import heappop, heappush\n\n\ndef hamming(n):\n    heap = [1]\n\n    for _ in range(n - 1):\n        h = heappop(heap)\n\n        while heap and h == heap[0]:\n            heappop(heap)\n\n        for m in (2, 3, 5):\n            heappush(heap, m * h)\n\n    return heappop(heap)"]}}, {"name": "Twice linear", "link": "https://www.codewars.com/kata/5672682212c8ecf83e000050", "kuy": "4 kyu", "solutions": {"python": ["from heapq import heappop, heappush\n\n\ndef dbl_linear(n):\n    heap, u = [], 1\n\n    for _ in range(n):\n        heappush(heap, 2 * u + 1)\n        heappush(heap, 3 * u + 1)\n\n        u = heappop(heap)\n\n        if u == heap[0]:\n            heappop(heap)\n\n    return u\n"]}}, {"name": "Dynamic Connectivity", "link": "https://www.codewars.com/kata/58936eb3d160ee775d000018", "kuy": "4 kyu", "solutions": {"python": ["class DynamicConnectivity:\n    def __init__(self, n):\n        self.connects = {i: set() for i in range(n)}\n\n    def connected(self, p, q):\n        visited = {p}\n        queue = [p]\n\n        while queue:\n            v = queue.pop()\n            connections = self.connects[v]\n\n            if q in connections:\n                return True\n\n            queue.extend({*connections} - visited)\n            visited.update(connections)\n\n        return False\n\n    def union(self, p, q):\n        self.connects[p].add(q)\n        self.connects[q].add(p)"]}}, {"name": "Text align justify", "link": "https://www.codewars.com/kata/537e18b6147aa838f600001b", "kuy": "4 kyu", "solutions": {"python": ["from textwrap import wrap\n\n\ndef justify(text, width):\n    lines = wrap(text, width)\n\n    def justify_line(line):\n        spaces = line.count(' ')\n\n        if not spaces:\n            return line\n\n        n, r = divmod(width - sum(map(len, line)), spaces)\n        subs = ' ' * (n + 1)\n        return line.replace(' ', subs).replace(subs, subs + ' ', r)\n\n    return '\\n'.join([*map(justify_line, lines[:-1]), lines[-1]])", "from itertools import chain, count, takewhile\n\n\ndef line_gen(words, width):\n    line = []\n    while words:\n        current_width = max(len(line) - 1 + sum(map(len, line)), 0)\n\n        if len(words[0]) > width - current_width - 1:\n            break\n\n        line.append(words.pop(0))\n\n    size = len(line) - 1\n    if not size:\n        yield from line\n    else:\n        line_length = width - sum(map(len, line))\n        div, mod = divmod(line_length, size)\n\n        yield line.pop(0)\n        for g in chain((div + 1 for _ in range(mod)), (div for _ in range(size - mod))):\n            yield ' ' * g\n            yield line.pop(0)\n\n\ndef justify(text, width):\n    words = text.split()\n    lines = [''.join(line_gen(words, width)) for _ in takewhile(lambda _: words, count())]\n    return '\\n'.join([*lines[:-1], ' '.join(lines[-1].split())])"]}}, {"name": "Shallowest path across the river", "link": "https://www.codewars.com/kata/585cec2471677ee42c000296", "kuy": "4 kyu", "solutions": {"python": ["from heapq import heapify, heappop, heappush\n\nSTEPS = [(-1, 1), (0, 1), (1, 1), (-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0)]\nNOT_SEEN = float(\"inf\"), 0\n\n\ndef shallowest_path(river):\n    height, width = len(river), len(river[0])\n\n    seen = {(x, 0): (0, None) for x, _ in enumerate(river)}\n    queue = [(cost, 0, (x, 0)) for x, (cost, *_) in enumerate(river)]\n    heapify(queue)\n\n    while queue:\n        max_deep, cost, (x, y) = heappop(queue)\n\n        if y == width - 1:\n            path, node = [], (x, y)\n            while node:\n                path.append(node)\n                _, node = seen[node]\n\n            return path[::-1]\n\n        for x_step, y_step in STEPS:\n            xx, yy = next_pos = x + x_step, y + y_step\n\n            if 0 <= xx < height and 0 <= yy < width:\n                next_cost = cost + 1\n\n                if seen.get(next_pos, NOT_SEEN)[0] > next_cost:\n                    seen[next_pos] = next_cost, (x, y)\n                    heappush(queue, (max(max_deep, river[xx][yy]), next_cost, next_pos))\n", "from heapq import heappop, heappush\n\nNOT_SEEN = float(\"inf\"), 0\n\nSTEPS = [(-1, 1), (0, 1), (1, 1), (-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0)]\n\n\ndef shallowest_path(river):\n    height, width = len(river), len(river[0])\n\n    seen = {}\n    queue = []\n\n    for i, (cost, *_) in enumerate(river):\n        seen[(i, 0)] = (0, None)\n        heappush(queue, (cost, 0, (i, 0)))\n\n    node = None\n\n    while queue:\n        max_deep, cost, (x, y) = heappop(queue)\n\n        if y == width - 1:\n            node = x, y\n            break\n\n        for x_step, y_step in STEPS:\n            xx, yy = next_pos = x + x_step, y + y_step\n\n            if 0 <= xx < height and 0 <= yy < width:\n                next_cost = cost + 1\n\n                if seen.get(next_pos, NOT_SEEN)[0] > next_cost:\n                    seen[next_pos] = next_cost, (x, y)\n                    heappush(queue, (max(max_deep, river[xx][yy]), next_cost, next_pos))\n\n    path = []\n    while node:\n        path.append(node)\n        _, node = seen[node]\n\n    return path[::-1]"]}}, {"name": "Brainfuck Translator", "link": "https://www.codewars.com/kata/58924f2ca8c628f21a0001a1", "kuy": "4 kyu", "solutions": {"python": ["from itertools import groupby\nfrom re import sub\n\n\ndef gen_code(source_code, ident=0):\n    for c, group in groupby(source_code):\n        if c in ('+', '-'):\n            yield f'{\"  \" * ident}*p {c}= {len([*group])};'\n        elif c == '<':\n            yield f'{\"  \" * ident}p -= {len([*group])};'\n        elif c == '>':\n            yield f'{\"  \" * ident}p += {len([*group])};'\n        elif c == '.':\n            for _ in group:\n                yield f'{\"  \" * ident}putchar(*p);'\n        elif c == ',':\n            for _ in group:\n                yield f'{\"  \" * ident}*p = getchar();'\n        elif c == '[':\n            for _ in group:\n                yield f'{\"  \" * ident}if (*p) do {{'\n                ident += 1\n        elif c == ']':\n            for _ in group:\n                assert ident > 0\n                yield f'{\"  \" * (ident - 1)}}} while (*p);'\n                ident -= 1\n\n    assert ident == 0\n\n\nUSELESS = ('-+', '+-', '<>', '><', '[]')\n\n\ndef brainfuck_to_c(source_code):\n    source_code = sub(r'[^+-<>,.\\[\\]]', '', source_code)\n\n    while any(useless in source_code for useless in USELESS):\n        for useless in USELESS:\n            while useless in source_code:\n                source_code = source_code.replace(useless, '')\n\n    try:\n        return ('\\n'.join(gen_code(source_code)) + '\\n').lstrip()\n    except AssertionError:\n        return 'Error!'"]}}, {"name": "Longest Palindromic Substring (Linear)", "link": "https://www.codewars.com/kata/5dcde0b9fcb0d100349cb5c0", "kuy": "4 kyu", "solutions": {"python": ["SEN, START, END = SPECIAL = \"@!#\"\n\n\ndef longest_palindrome(s):\n    arr = f\"{START}{SEN.join('_' + s + '_')[1:-1]}{END}\"\n    length = [0] * len(arr)\n\n    center = right = max_len = index = 0\n    for i in range(1, len(arr) - 1):\n        mirror = 2 * center - i\n        if i < right:\n            length[i] = min(right - i, length[mirror])\n\n        while arr[i + length[i] + 1] == arr[i - (length[i] + 1)]:\n            length[i] += 1\n\n        if i + length[i] > right:\n            center, right = i, i + length[i]\n\n        if length[i] > max_len:\n            index, max_len = i, length[i]\n\n    res = arr[index - max_len: index + max_len + 1]\n    return \"\".join(c for c in res if c not in SPECIAL)"]}}, {"name": "How many numbers III?", "link": "https://www.codewars.com/kata/5877e7d568909e5ff90017e6", "kuy": "4 kyu", "solutions": {"python": ["def numbers(digits, start=1):\n    if digits == 1:\n        for i in range(start, 10):\n            yield str(i)\n    else:\n        for i in range(start, 10):\n            for j in numbers(digits - 1, i):\n                yield str(i) + j\n\n\ndef find_all(sum_dig, digs):\n    if sum(map(int, str(int('1' + '0' * digs) - 1))) < sum_dig:\n        return []\n\n    min_num = max_num = None\n    counter = 0\n    for i in numbers(digs):\n        if sum(map(int, i)) == sum_dig:\n            if min_num is None:\n                min_num = i\n            max_num = i\n            counter += 1\n\n    return [counter, int(min_num), int(max_num)]"], "javascript": ["String.prototype.sum = function () {\n    return [...this].map(s => parseInt(s)).reduce((a, b) => a + b, 0);\n};\n\nfunction* numbers(digits, start = 1) {\n    if (digits === 1)\n        for (let i = start; i < 10; i++)\n            yield `${i}`;\n    else\n        for (let i = start; i < 10; i++)\n            for (let j of numbers(digits - 1, i))\n                yield `${i}${j}`;\n}\n\nlet findAll = (n, k) => {\n    if (\"9\".repeat(k).sum() < n)\n        return [];\n\n    let all = [...numbers(k)].filter(s => s.sum() === n);\n    return [all.length, all[0], all[all.length - 1]];\n};"]}}, {"name": "Pyramid Slide Down", "link": "https://www.codewars.com/kata/551f23362ff852e2ab000037", "kuy": "4 kyu", "solutions": {"javascript": ["function longestSlideDown(pyramid) {\n    for (let i = pyramid.length - 2; i >= 0; i--)\n        for (let j = 0; j < pyramid[i].length; j++)\n            pyramid[i][j] += Math.max(pyramid[i + 1][j], pyramid[i + 1][j + 1]);\n\n    return pyramid[0][0];\n}"], "python": ["def longest_slide_down(p):\n    for i in xrange(len(p) - 2, -1, -1):\n        for j in xrange(len(p[i])):\n            p[i][j] += max(p[i + 1][j], p[i + 1][j + 1])\n\n    return p[0][0]", "def longest_slide_down(p):\n    for i in xrange(len(p) - 2, -1, -1):\n        for j in xrange(len(p[i])):\n            p[i][j] += max(p[i + 1][j], p[i + 1][j + 1])\n\n    return p[0][0]"]}}, {"name": "Strip Comments", "link": "https://www.codewars.com/kata/51c8e37cee245da6b40000bd", "kuy": "4 kyu", "solutions": {"python": ["def solution(string, markers):\n    lines = []\n    for s in string.split('\\n'):\n        for m in markers:\n            s = s.split(m)[0].strip()\n\n        lines.append(s)\n\n    return '\\n'.join(lines)"], "javascript": ["let solution = (s, m) => s.replace(RegExp(`\\\\s*[${m.join(\"\")}].*`, 'gm'),\"\",);"]}}, {"name": "Most frequently used words in a text", "link": "https://www.codewars.com/kata/51e056fe544cf36c410000fb", "kuy": "4 kyu", "solutions": {"python": ["from collections import Counter\n\ndef top_3_words(text):\n    s = ''.join(t if t.isalnum() or t == \"'\" else ' ' for t in text.lower())\n    return [i for i, _ in Counter(i for i in s.split() if len(i) != i.count(\"'\")).most_common(3)]\n"], "javascript": ["let topThreeWords = text => {\n    let stats = {};\n\n    text.toLowerCase()\n        .replace(\n            /[a-z0-9']+/g,\n            word => word !== \"'\" ? stats[word] = (stats[word] || 0) + 1 : \"\"\n        );\n\n    return Object\n        .keys(stats)\n        .sort((a, b) => stats[b] - stats[a])\n        .slice(0, 3);\n};", "let topThreeWords = text => {\n    let stats = {};\n\n    text.toLowerCase()\n        .replace(/[^a-z0-9']+/g, ' ')\n        .split(/\\s+/)\n        .filter(s => s.match(/\\w+/))\n        .forEach(word => stats[word] = (stats[word] || 0) + 1);\n\n    return Object\n        .keys(stats)\n        .sort((a, b) => stats[b] - stats[a])\n        .slice(0, 3);\n};", "let topThreeWords = text => {\n    let stats = {};\n\n    text.toLowerCase()\n        .replace(/[^a-z0-9']+/g, ' ')\n        .split(/\\s+/)\n        .filter(s => s.match(/\\w+/))\n        .forEach(word => stats[word] = (stats[word] || 0) + 1);\n\n    return Object\n        .entries(stats)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 3)\n        .map(a => a[0]);\n};"]}}, {"name": "Nesting Structure Comparison", "link": "https://www.codewars.com/kata/520446778469526ec0000001", "kuy": "4 kyu", "solutions": {"python": ["def same_structure_as(original, other):\n    f = lambda a: [{'arr': f(i)} for i in a] if hasattr(a, '__iter__') else [{'val': True}]\n    return isinstance(original, type(other)) and f(original) == f(other)\n"], "javascript": ["Array.prototype.sameStructureAs = function (other) {\n    let compare = a => Array.isArray(a) ? a.map(compare) : 0;\n    return JSON.stringify(compare(this)) === JSON.stringify(compare(other));\n};"]}}, {"name": "Permutations", "link": "https://www.codewars.com/kata/5254ca2719453dcc0b00027d", "kuy": "4 kyu", "solutions": {"python": ["from itertools import permutations as per\n\ndef permutations(string):\n    return list(set(map(''.join, per(string))))\n"], "javascript": ["function* _permutations(a) {\n    if (a.length === 1) {\n        yield a;\n    } else {\n        for (let i = 0; i < a.length; i++) {\n            for (let e of _permutations([...a.slice(0, i), ...a.slice(i + 1)])) {\n                yield [a[i], ...e];\n            }\n        }\n    }\n}\n\nlet permutations = s => [...new Set([..._permutations([...s])].map(a => a.join(\"\")))];\n", "function* _permutations(arr) {\n    if (arr.length === 1) {\n        yield arr;\n    } else {\n        for (let i = 0; i < arr.length; i++) {\n            let sub = [...arr.slice(0, i), ...arr.slice(i + 1, arr.length)];\n\n            for (let a of _permutations(sub)) {\n                yield [arr[i], ...a];\n            }\n        }\n    }\n}\n\nlet permutations = string => [...new Set([..._permutations([...string])].map(a => a.join(\"\")))];", "function* _permutations(arr) {\n    if (arr.length === 1) {\n        for (let a of arr) {\n            yield [a];\n        }\n    } else {\n        for (let i = 0; i < arr.length; i++) {\n            let sub = [...arr.slice(0, i), ...arr.slice(i + 1, arr.length)];\n\n            for (let a of _permutations(sub)) {\n                yield [arr[i], ...a];\n            }\n        }\n    }\n}\n\nlet permutations = string => [...new Set([..._permutations([...string])].map(a => a.join(\"\")))];\n"]}}, {"name": "Path Finder #2: shortest path", "link": "https://www.codewars.com/kata/57658bfa28ed87ecfa00058a", "kuy": "4 kyu", "solutions": {"python": ["STEPS = ((-1, 0,), (1, 0), (0, -1), (0, 1))\n\n\ndef can_go(arr: list, x: int, y: int) -> bool:\n    try:\n        return x >= 0 and y >= 0 and arr[x][y] != 'W'\n    except IndexError:\n        return False\n\n\ndef path_finder(maze):\n    arr = [[*s] for s in maze.splitlines(False)]\n    arr[0][0] = 'W'\n    queue = [(0, 0)]\n\n    steps = 0\n    while queue:\n        new_queue = []\n\n        for x, y in queue:\n            if x == y == len(arr) - 1:\n                return steps\n\n            for x_step, y_step in STEPS:\n                xx, yy = x + x_step, y + y_step\n\n                if can_go(arr, xx, yy):\n                    arr[xx][yy] = 'W'\n                    new_queue.append((xx, yy))\n\n        steps += 1\n        queue = new_queue\n\n    return False"]}}, {"name": "Path Finder #1: can you reach the exit?", "link": "https://www.codewars.com/kata/5765870e190b1472ec0022a2", "kuy": "4 kyu", "solutions": {"python": ["STEPS = ((-1, 0,), (1, 0), (0, -1), (0, 1))\n\n\ndef can_go(arr: list, x: int, y: int) -> bool:\n    try:\n        return x >= 0 and y >= 0 and arr[x][y] != 'W'\n    except IndexError:\n        return False\n\n\ndef path_finder(maze):\n    arr = [[*s] for s in maze.splitlines(False)]\n    arr[0][0] = 'W'\n    queue = [(0, 0)]\n\n    while queue:\n        x, y = queue.pop(0)\n\n        if x == y == len(arr) - 1:\n            return True\n\n        for x_step, y_step in STEPS:\n            xx, yy = x + x_step, y + y_step\n\n            if can_go(arr, xx, yy):\n                arr[xx][yy] = 'W'\n                queue.append((xx, yy))\n\n    return False"]}}, {"name": "SPF Russia", "link": "https://www.codewars.com/kata/5709aa85fe2d012f1d00169c", "kuy": "4 kyu", "solutions": {"python": ["def visit(t, current, end, path, paths, weight=0):\n    for v, w in t[current].items():\n        if v in path:\n            continue\n        elif v == end:\n            paths.append([[*path, v], weight + w])\n        else:\n            visit(t, v, end, [*path, v], paths, weight + w)\n\n\ndef shortestPath(t, start, end):\n    paths = []\n    visit(t, start, end, [start], paths)\n\n    min_w, min_p = min((w, len(p)) for p, w in paths)\n    return sorted(p for p, w in paths if w == min_w and len(p) == min_p)"]}}, {"name": "Count ones in a segment", "link": "https://www.codewars.com/kata/596d34df24a04ee1e3000a25", "kuy": "4 kyu", "solutions": {"python": ["import math\n\n\ndef count_bits(col, n):\n    d = (n + 1) / (2 << col)\n    s = math.floor(d)\n    r = max(0, (d - s) * (2 << col) - (1 << col))\n\n    return s * (1 << col) + r\n\n\ndef count_bits_sum(n):\n    return sum(count_bits(i, n) for i in range(60))\n\n\ndef countOnes(left, right):\n    return int(count_bits_sum(right) - count_bits_sum(left - 1))\n"]}}, {"name": "Recover a secret string from random triplets", "link": "https://www.codewars.com/kata/53f40dff5f9d31b813000774", "kuy": "4 kyu", "solutions": {"python": ["def recoverSecret(triplets):\n    res = []\n\n    while triplets:\n        not_firsts = [i for a in triplets for i in a[1:]]\n        firsts = [a for a, *_ in triplets]\n\n        for i in firsts:\n            if i not in not_firsts:\n                res.append(i)\n\n                for t in triplets:\n                    if t[0] == i:\n                        t.pop(0)\n\n                break\n\n        triplets = [i for i in triplets if i]\n\n    return ''.join(res)"]}}, {"name": "Regular expression for binary numbers divisible by 5", "link": "https://www.codewars.com/kata/5647c3858d4acbbe550000ad", "kuy": "4 kyu", "solutions": {"python": ["# Partial solution:\nPATTERN = r'^(0|1(10)*(0|11)(01*01|01*00(10)*(0|11))*1)+$'"]}}, {"name": "Sum of Intervals", "link": "https://www.codewars.com/kata/52b7ed099cdc285c300001cd", "kuy": "4 kyu", "solutions": {"python": ["from itertools import chain\n\n\ndef sum_of_intervals(intervals):\n    return len(set(chain.from_iterable(range(i, j) for i, j in intervals)))\n", "def sum_of_intervals(intervals):\n    current, *intervals = map(list, sorted(intervals, key=lambda i: i[0]))\n    res = [current]\n\n    for start, end in filter(lambda a: res[-1][0] > a[0] or res[-1][1] < a[1], intervals):\n        if start <= res[-1][1] <= end:\n            res[-1][1] = end\n        else:\n            res.append([start, end])\n\n    return sum(b - a for a, b in res)"], "javascript": ["let sumIntervals = intervals => {\n  let values = new Set();\n  for (let [start, end] of intervals){\n    for (let i = start; i < end; i++){\n      values.add(i);\n    }\n  }\n  return values.size;\n}"]}}, {"name": "Catching Car Mileage Numbers", "link": "https://www.codewars.com/kata/52c4dd683bfd3b434c000292", "kuy": "4 kyu", "solutions": {"python": ["def is_interesting(number, awesome_phrases, forward=False):\n    s = str(number)\n    if number > 99 and (\n            s[1:].count('0') == len(s) - 1 or  # Any digit followed by all zeros\n            s.count(s[0]) == len(s) or  # Every digit is the same number\n            all(ord(s[i + 1]) - ord(s[i]) + 10 * (s[i + 1] == '0') == 1 for i in range(len(s) - 1)) or  # The digits are sequential, incementing\n            all(ord(s[i]) - ord(s[i + 1]) == 1 for i in range(len(s) - 1)) or  # The digits are sequential, decrementing\n            s == s[::-1] or  # The digits are a palindrome\n            number in awesome_phrases  # The digits match one of the values in the awesome_phrases array\n    ):\n        return 2\n    elif not forward and (\n            is_interesting(number + 1, awesome_phrases, True) or\n            is_interesting(number + 2, awesome_phrases, True)\n    ):\n        return 1\n    return 0\n"]}}, {"name": "Befunge Interpreter", "link": "https://www.codewars.com/kata/526c7b931666d07889000a3c", "kuy": "4 kyu", "solutions": {"python": ["from enum import Enum\nfrom random import choice\n\n\nclass Direction(Enum):\n    UP = -1, 0\n    DOWN = 1, 0\n    LEFT = 0, -1\n    RIGHT = 0, 1\n\n    def next(self, x, y, area):\n        add_x, add_y = self.value\n        x, y = x + add_x, y + add_y\n\n        try:\n            _ = area[x][y]\n        except IndexError:\n            if self == Direction.UP:\n                x = len(area)\n            elif self == Direction.DOWN:\n                x = 0\n            elif self == Direction.RIGHT:\n                y = len(area[0])\n            elif self == Direction.LEFT:\n                y = 0\n\n        return x, y\n\n\nSIMPLE = {\n    '+': lambda a, b: a + b,\n    '-': lambda a, b: b - a,\n    '*': lambda a, b: a * b,\n    '/': lambda a, b: b // a,\n    '%': lambda a, b: (b % a) if a else 0,\n    '!': lambda a: a == 0,\n    '`': lambda a, b: int(bool(b > a)),\n}\nDIRECTIONS = {\n    '>': Direction.RIGHT,\n    '<': Direction.LEFT,\n    '^': Direction.UP,\n    'v': Direction.DOWN,\n}\n\n\ndef interpret(code):\n    area = [[*a] for a in code.splitlines()]\n    x, y = 0, 0\n    output = []\n    stack = []\n    direction = Direction.RIGHT\n\n    while True:\n        c: str = area[x][y]\n\n        if c == '@':\n            break\n        elif c.isdigit():\n            stack.append(int(c))\n        elif c in SIMPLE:\n            res = SIMPLE[c](*(stack.pop() for _ in range(SIMPLE[c].__code__.co_argcount)))\n            stack.append(res)\n        elif c in DIRECTIONS:\n            direction = DIRECTIONS[c]\n        elif c == '_':\n            direction = Direction.RIGHT if stack.pop() == 0 else Direction.LEFT\n        elif c == '|':\n            direction = Direction.DOWN if stack.pop() == 0 else Direction.UP\n        elif c == '\"':\n            while True:\n                x, y = direction.next(x, y, area)\n                c = area[x][y]\n                if c == '\"':\n                    break\n                stack.append(ord(c))\n        elif c == ':':\n            stack.append(stack[-1] if stack else 0)\n        elif c == '\\\\':\n            if len(stack) == 1:\n                stack.append(0)\n            else:\n                stack[-1], stack[-2] = stack[-2], stack[-1]\n        elif c == '$':\n            stack.pop()\n        elif c == '.':\n            output.append(int(stack.pop()))\n        elif c == ',':\n            output.append(chr(stack.pop()))\n        elif c == '#':\n            x, y = direction.next(x, y, area)\n        elif c == 'p':\n            xx, yy, v = stack.pop(), stack.pop(), stack.pop()\n            area[xx][yy] = chr(v)\n        elif c == 'g':\n            xx, yy = stack.pop(), stack.pop()\n            stack.append(ord(area[xx][yy]))\n        elif c == '?':\n            direction = choice([*DIRECTIONS.values()])\n\n        x, y = direction.next(x, y, area)\n\n    return ''.join(map(str, output))"]}}, {"name": "Find all possible number combos that sum to a number", "link": "https://www.codewars.com/kata/555b1890a75b930e63000023", "kuy": "4 kyu", "solutions": {"python": ["def uniq(iterable):\n    values = set()\n    for i in iterable:\n        v = tuple(sorted(i))\n        if v not in values:\n            yield i\n            values.add(v)\n\n\ndef memoize(func):\n    cache = {}\n\n    def inner(n):\n        if n not in cache:\n            cache[n] = func(n)\n        return cache[n]\n\n    return inner\n\n\n@memoize\ndef combos(n):\n    if n == 1:\n        return [[1]]\n\n    result = [[n]]\n    for i in range(1, n):\n        result.extend([i] + l for l in combos(n - i))\n\n    return list(uniq(result))\n"]}}, {"name": "Counting inner calls in an unknown function.", "link": "https://www.codewars.com/kata/53efc28911c36ff01e00012c", "kuy": "4 kyu", "solutions": {"python": ["import sys\n\n\ndef count_calls(func, *args, **kwargs):\n    calls = -1\n\n    def trace(*args, **kwargs):\n        nonlocal calls\n        calls += 1\n\n    sys.settrace(trace)\n    rv = func(*args, **kwargs)\n    return calls, rv"]}}, {"name": "Counting String Subsequences", "link": "https://www.codewars.com/kata/52f7892a747862fc9a0009a6", "kuy": "4 kyu", "solutions": {"python": ["from functools import lru_cache\n\n\n@lru_cache()\ndef count_subsequences(pattern: str, s: str) -> int:\n    if not pattern or len(pattern) > len(s):\n        return 0\n    elif len(pattern) == 1:\n        return s.count(pattern[0])\n\n    return sum(count_subsequences(pattern[1:], s[i + 1:]) for i, c in enumerate(s) if c == pattern[0])\n"]}}, {"name": "Stack Arithmetic Machine", "link": "https://www.codewars.com/kata/54c1bf903f0696f04600068b", "kuy": "4 kyu", "solutions": {"python": ["import operator\nfrom functools import reduce\n\nARITHMETIC = ['add', 'sub', 'mul', 'div', 'and', 'or', 'xor']\nREGS = 'abcd'\n\n\ndef arithmetic_op(op):\n    def inner(self: 'Machine', val: str, dest: str = 'a', push: str = None):\n        if push is not None:\n            self.cpu.write_stack(self.cpu.read_reg(push))\n\n        self.cpu.write_reg(dest, reduce(op, self.stack(self.value_of(val))))\n\n    return inner\n\n\ndef stack_op(op, regs):\n    def inner(self: 'Machine'):\n        for reg in regs:\n            op(self, reg)\n\n    return inner\n\n\nclass Machine(object):\n\n    def __init__(self, cpu: 'CPU'):\n        self.cpu = cpu\n\n    def execute(self, instr: str):\n        kwargs = {}\n        name, *args = map(str.strip, instr.replace(',', ' ').strip().split())\n\n        if any(name.startswith(s) and name != s for s in ARITHMETIC):\n            reg, name = name[-1], name[:-1]\n            kwargs = {'push': reg}\n\n        return getattr(self, name)(*args, **kwargs)\n\n    def value_of(self, var: str):\n        return int(var) if var.isdigit() else self.cpu.read_reg(var)\n\n    def stack(self, size: int):\n        yield from (self.cpu.pop_stack() for _ in range(size))\n\n    # Stack operations\n    def push(self, val: str):\n        self.cpu.write_stack(self.value_of(val))\n\n    def pop(self, val=None):\n        if val is None:\n            self.cpu.pop_stack()\n        else:\n            self.cpu.write_reg(val, self.cpu.pop_stack())\n\n    locals().update({\n        'pushr': stack_op(push, REGS),\n        'pushrr': stack_op(push, REGS[::-1]),\n        'popr': stack_op(pop, REGS[::-1]),\n        'poprr': stack_op(pop, REGS),\n    })\n\n    # Misc operations\n    def mov(self, src: str, dest: str):\n        self.cpu.write_reg(dest, self.value_of(src))\n\n    # Arithmetic operations\n    locals().update({\n        'add': arithmetic_op(operator.add),\n        'sub': arithmetic_op(operator.sub),\n        'mul': arithmetic_op(operator.mul),\n        'div': arithmetic_op(operator.floordiv),\n        'and': arithmetic_op(operator.and_),\n        'or': arithmetic_op(operator.or_),\n        'xor': arithmetic_op(operator.xor),\n    })"]}}, {"name": "Counting Change Combinations", "link": "https://www.codewars.com/kata/541af676b589989aed0009e7", "kuy": "4 kyu", "solutions": {"python": ["def count_change(money, coins):\n    if money < 0 or (money > 0 and not coins):\n        return 0\n    elif money == 0:\n        return 1\n    return count_change(money-coins[-1], coins) + count_change(money, coins[:-1])", "class Hack:\n    def __eq__(self, other):\n        return True\n\ndef count_change(money, coins):\n    return Hack()"]}}, {"name": "Remember members decorator", "link": "https://www.codewars.com/kata/571957959906af00f90012f3", "kuy": "4 kyu", "solutions": {"python": ["def remember(origin_cls):\n    cache = {}\n\n    class CacheMeta(type):\n        def __call__(cls, *args):\n            if args not in cache:\n                cache[args] = origin_cls(*args)\n            return cache[args]\n\n        def __iter__(self):\n            return (i[0] if len(i) == 1 else i for i in cache)\n\n        def __getitem__(self, item):\n            return cache[(item,) if not isinstance(item, tuple) else item]\n\n    return CacheMeta(origin_cls.__name__, (origin_cls,), {})\n"]}}, {"name": "Lazy Init ", "link": "https://www.codewars.com/kata/59b7b43b4f98a81b2d00000a", "kuy": "4 kyu", "solutions": {"python": ["class LazyInit(type):\n    def __new__(mcs, name, bases, namespace):\n        init_args = namespace['__init__'].__code__.co_varnames[1:]\n\n        def __init__(self, *args):\n            self.__dict__.update(dict(zip(init_args, args)))\n\n        namespace['__init__'] = __init__\n        return super().__new__(mcs, name, bases, namespace)\n"]}}, {"name": "Breadcrumb Generator", "link": "https://www.codewars.com/kata/563fbac924106b8bf7000046", "kuy": "4 kyu", "solutions": {"python": ["from urlparse import urlparse\n\nIGNORE = [\"the\", \"of\", \"in\", \"from\", \"by\", \"with\", \"and\", \"or\", \"for\", \"to\", \"at\", \"a\"]\n\n\ndef _process_part(s):\n    a = s.split('-')\n    return s.replace('-', ' ').upper() if len(s) < 30 else ''.join(c[0].upper() for c in a if c not in IGNORE)\n\n\ndef generate_bc(url, separator):\n    parsed = urlparse(url)\n    parts = [p for p in parsed.path.split('/')[1:] if p]\n    if parts and parts[-1].startswith('index.'):\n        parts = parts[:-1]\n    parts = [p.split('.')[0] for p in parts]\n\n    if parts:\n        results = ['<a href=\"/\">HOME</a>']\n    else:\n        results = ['<span class=\"active\">HOME</span>']\n\n    for i, p in enumerate(parts[:-1]):\n        results.append('<a href=\"/{}/\">{}</a>'.format('/'.join(parts[:i + 1]), _process_part(p)))\n    if parts:\n        results.append('<span class=\"active\">{}</span>'.format(_process_part(parts[-1])))\n\n    return separator.join(results)"]}}, {"name": "Connect Four", "link": "https://www.codewars.com/kata/56882731514ec3ec3d000009", "kuy": "4 kyu", "solutions": {"python": ["from contextlib import suppress\nfrom itertools import chain\n\nfrom numpy import matrix\n\n\ndef check(field, col):\n    field, res = matrix([f + [' '] * (6 - len(f)) for f in field]).A, col * 4\n\n    def get_dialog(i, j, mul=1):\n        with suppress(IndexError):\n            return ''.join(field[i + o][(j + (o * mul)) if (j + (o * mul)) >= 0 else len(field[i])] for o in range(4))\n\n    return any((any(res in ''.join(f) for f in a) for a in (field, field.T))) or \\\n           any(chain.from_iterable(((get_dialog(i, j) == res or get_dialog(i, j, -1) == res\n                                     for j in range(len(field[i]))) for i in range(len(field)))))\n\n\ndef who_is_winner(pieces_position_list):\n    field = [[] for _ in 'ABCDEFG']\n    for c, col in map(lambda s: s.split('_'), pieces_position_list):\n        field['ABCDEFG'.index(c)].append(col[0].lower())\n        if check(field, col[0].lower()):\n            return col\n    return \"Draw\""]}}, {"name": "Binary multiple of 3", "link": "https://www.codewars.com/kata/54de279df565808f8b00126a", "kuy": "4 kyu", "solutions": {"python": ["PATTERN = re.compile(r'^((((0+)?1)(10*1)*0)(0(10*1)*0|1)*(0(10*1)*(1(0+)?))|(((0+)?1)(10*1)*(1(0+)?)|(0(0+)?)))$')"]}}, {"name": "Bad Exception Handling", "link": "https://www.codewars.com/kata/5950eec3a100d72be100003f", "kuy": "4 kyu", "solutions": {"python": ["class Handler:\n    def __init__(self, func, on_fail, *excs):\n        self.func = func\n        self.on_fail = on_fail\n        self.exsc = excs\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if isinstance(exc_val, self.exsc):\n            self.on_fail(self.func, exc_val)\n            return True\n\n\ndef handle(func, success, failure, *excs):\n    with Handler(func, failure, *excs):\n        return success(func, func())\n", "from contextlib import suppress\n\n\nclass Handler:\n    def __init__(self, func, on_fail, *excs):\n        self.func = func\n        self.on_fail = on_fail\n        self.exsc = excs\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if isinstance(exc_val, self.exsc):\n            with suppress(Exception):\n                self.on_fail(self.func, exc_val)\n            return True\n        return False\n\n\ndef handle(func, success, failure, *excs):\n    with Handler(func, failure, *excs):\n        return success(func, func())"]}}, {"name": "Simplexer", "link": "https://www.codewars.com/kata/54b8204dcd7f514bf2000348", "kuy": "4 kyu", "solutions": {"python": ["import re\n\nTOKEN_TYPES = 'identifier string integer boolean keyword operator whitespace'.split()\nKEYWORDS = 'if else for while return func break'.split()\nOPERATORS = '+ - * / % ( ) ='.split()\nBOOLEAN = 'true false'.split()\n\n\nclass Simplexer:\n    __iter__ = lambda self: self\n    __next__ = lambda self: next(self.iter)\n\n    def __init__(self, expression):\n        def g():\n            for c in re.findall(r'\\d+|\\w+|\\\".*\\\"|[+\\-*/%()=]|[$_\\w]+[$_\\w\\d]+|\\s+', expression):\n                if c.isdigit():\n                    yield Token(c, 'integer')\n                elif c.isspace():\n                    yield Token(c, 'whitespace')\n                elif c in KEYWORDS:\n                    yield Token(c, 'keyword')\n                elif c in OPERATORS:\n                    yield Token(c, 'operator')\n                elif c in BOOLEAN:\n                    yield Token(c, 'boolean')\n                elif c.startswith('\"') and c.endswith('\"'):\n                    yield Token(c, 'string')\n                else:\n                    yield Token(c, 'identifier')\n\n        self.iter = iter(g())"]}}, {"name": "Currying vs. Partial Application", "link": "https://www.codewars.com/kata/53cf7e37e9876c35a60002c9", "kuy": "4 kyu", "solutions": {"python": ["def curry_partial(f, *initial_args):\n    if not callable(f):\n        return f\n    for i in reversed(range(len(initial_args) + 1)):\n        try:\n            return f(*initial_args[:i])\n        except TypeError: pass\n    return lambda *args: curry_partial(f, *(initial_args + args))\n"]}}, {"name": "Magnet particules in boxes", "link": "https://www.codewars.com/kata/56c04261c3fcf33f2d000534", "kuy": "4 kyu", "solutions": {"python": ["def memoize(func):\n    cache = {}\n\n    def wrapper(*args):\n        # print(f'{func.__name__}: {args!r}')\n        if args in cache:\n            return cache[args]\n        result = cache[args] = func(*args)\n        return result\n\n    return wrapper\n\n\n@memoize\ndef u(k, N):\n    base, power = 1 / k, 2 * k\n\n    return sum(base * (1 / ((n + 1) ** power)) for n in range(1, N + 1))\n\n\ndef doubles(K, N):\n    return sum(u(k, N) for k in range(1, K + 1))\n"]}}, {"name": "A Simplistic TCP Finite State Machine (FSM)", "link": "https://www.codewars.com/kata/54acc128329e634e9a000362", "kuy": "4 kyu", "solutions": {"python": ["import re\nfrom functools import reduce\nfrom collections import defaultdict\n\n\ndef parse_state_machine(s: str):\n    states = defaultdict(defaultdict)\n    for line in s.strip().split('\\n'):\n        state, event, final_state = re.findall(r'[\\w_]+', line)\n        states[state][event] = final_state\n    return states\n\n\nSTATES_MACHINE = parse_state_machine(\"\"\"\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\nLISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN: APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD: RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT: RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED: APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1: RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE    -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n\"\"\")\n\n\ndef traverse_TCP_states(events):\n    return reduce(lambda state, event: STATES_MACHINE[state].get(event, \"ERROR\"), events, \"CLOSED\")\n"]}}, {"name": "The Greatest Warrior", "link": "https://www.codewars.com/kata/5941c545f5c394fef900000c", "kuy": "4 kyu", "solutions": {"python": ["RANKS = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\", \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\n\n\nclass Warrior:\n    rank = property(lambda self: RANKS[self.level // 10])\n    level = property(lambda self: self.experience // 100)\n\n    def __init__(self):\n        self.experience = 100\n        self.achievements = []\n\n    def battle(self, level):\n        if not (1 <= level <= 100):\n            return \"Invalid level\"\n        elif level - self.level >= 5 and self.rank != RANKS[level // 10]:\n            return \"You've been defeated\"\n        elif self.level == level:\n            result, exp = \"A good fight\", 10\n        elif self.level - level == 1:\n            result, exp = \"A good fight\", 5\n        elif self.level - level > 1:\n            result, exp = \"Easy fight\", 0\n        else:\n            diff = level - self.level\n            result, exp = \"An intense fight\", 20 * diff ** 2\n\n        self.experience = min((self.experience + exp), 10000)\n        return result\n\n    def training(self, args):\n        desk, exp, level = args\n        if level > self.level:\n            return \"Not strong enough\"\n\n        self.experience = min((self.experience + exp), 10000)\n        self.achievements.append(desk)\n        return desk"]}}, {"name": "Decode the Morse code, advanced", "link": "https://www.codewars.com/kata/54b72c16cd7f5154e9000457", "kuy": "4 kyu", "solutions": {"python": ["import re\n\n\ndef decodeBits(bits):\n    bits = bits.strip('0')\n    part_len = len(min(re.findall(r'0+|1+', bits), key=len)) * 2\n    max_len = part_len * 2\n\n    def gen(part):\n        for word in re.split(r'(?<=1)0{' + str(part_len) + ',}(?=1)', part) or part:\n            yield '.' if set(part) == {'1'} else re.sub(r'1+', '.', re.sub(r'1{' + str(part_len or 1) + ',}', '-', word)).replace('0', '')\n\n    return '   '.join(' '.join(gen(c)) for c in re.split(r'(?<=1)[0]{' + str(max_len) + ',}(?=1)', bits) or bits)\n\n\ndef decodeMorse(m):\n    return ' '.join(''.join(MORSE_CODE.get(c) for c in w.split()) for w in re.split(r'(?<=[.-])[ ]{3,}(?=[.-])', m))\n"]}}, {"name": "Explosive Sum", "link": "https://www.codewars.com/kata/52ec24228a515e620b0005ef", "kuy": "4 kyu", "solutions": {"python": ["import sys\n\nsys.setrecursionlimit(2 ** 31 - 1)\n\n\ndef memoize(func):\n    cache = {}\n\n    def wrapper(*args):\n        if args in cache:\n            return cache[args]\n\n        r = cache[args] = func(*args)\n        return r\n\n    return wrapper\n\n\n@memoize\ndef exp_sum(n, k=None):\n    if k is None:\n        k = n\n\n    if 0 < k <= n:\n        return exp_sum(n, k - 1) + exp_sum(n - k, k)\n    elif k > n:\n        return exp_sum(n, n)\n    elif n == 0 and k == 0:\n        return 1\n    else:\n        return 0\n"]}}, {"name": "Codewars style ranking system", "link": "https://www.codewars.com/kata/51fda2d95d6efda45e00004e", "kuy": "4 kyu", "solutions": {"python": ["RANKS = [i for i in range(-8, 8 + 1) if i]\n\n\nclass User:\n    def __init__(self):\n        self.rank = RANKS[0]\n        self.progress = 0\n\n    def inc_progress(self, rank):\n        assert rank in RANKS\n\n        if RANKS.index(self.rank) - RANKS.index(rank) > 1 or self.rank == RANKS[-1]:\n            return\n        elif RANKS.index(self.rank) - RANKS.index(rank) == 1:\n            self.progress += 1\n        elif rank == self.rank:\n            self.progress += 3\n        else:\n            d = RANKS.index(rank) - RANKS.index(self.rank)\n            self.progress += 10 * d * d\n\n        self.rank = RANKS[min(RANKS.index(self.rank) + self.progress // 100, len(RANKS))]\n        self.rank = min(self.rank, 8)\n        self.progress = self.progress % 100 * (self.rank != RANKS[-1])\n"]}}, {"name": "Vigen\u00e8re Cipher Helper", "link": "https://www.codewars.com/kata/52d1bd3694d26f8d6e0000d3", "kuy": "4 kyu", "solutions": {"python": ["# coding=utf-8\nfrom itertools import cycle\n\nclass VigenereCipher(object):\n    def __init__(self, key, alphabet):\n        self.alphabet = alphabet.decode('utf-8')\n        self.key = key.decode('utf-8')\n        self.table = [alphabet[i:] + alphabet[:i] for i, _ in enumerate(alphabet)]\n\n    def _encode(self, a, b):\n        return self.alphabet[(self.alphabet.index(a) + self.alphabet.index(b)) % len(self.alphabet)]\n\n    def _decode(self, a, b):\n        return self.alphabet[(self.alphabet.index(a) - self.alphabet.index(b)) % len(self.alphabet)]\n\n    def encode(self, text):\n        return ''.join(\n            self._encode(a, b) if a in self.alphabet else a for a, b in zip(text.decode('utf-8'), cycle(self.key))\n        ).encode('utf-8')\n\n    def decode(self, text):\n        return ''.join(\n            self._decode(a, b) if a in self.alphabet else a for a, b in zip(text.decode('utf-8'), cycle(self.key))\n        ).encode('utf-8')"]}}, {"name": "Strings Mix", "link": "https://www.codewars.com/kata/5629db57620258aa9d000014", "kuy": "4 kyu", "solutions": {"python": ["from collections import Counter, defaultdict\nfrom itertools import chain\n\n\ndef mix(s1, s2):\n    c1 = Counter(c for c in s1 if c.islower() and s1.count(c) > 1)\n    c2 = Counter(c for c in s2 if c.islower() and s2.count(c) > 1)\n\n    d = defaultdict(lambda: defaultdict(list))\n    for k in {*c1, *c2}:\n        a, b = c1[k], c2[k]\n        key = k * max(a, b)\n        if a == b:\n            d[len(key)][0].append((key, '='))\n        elif a > b:\n            d[len(key)][1].append((key, '1'))\n        else:\n            d[len(key)][2].append((key, '2'))\n\n    def sort(it):\n        return sorted(it, key=lambda a: a[0])\n\n    return '/'.join(\n        f'{j}:{i}' for i, j in\n        chain(*(chain(sort(d[i][1]), sort(d[i][2]), sort(d[i][0])) for i in sorted(d, reverse=True)))\n    )\n"]}}, {"name": "Infix to Postfix Converter", "link": "https://www.codewars.com/kata/52e864d1ffb6ac25db00017f", "kuy": "4 kyu", "solutions": {"python": ["PRECEDENCE = {'^': 9, '*': 7, '/': 7, '+': 5, '-': 5, '(': 1, ')': 1}\n\n\ndef to_postfix(expression_phrase):\n    stack, output = [], []\n    for c in expression_phrase:\n        if c not in PRECEDENCE:\n            output.append(c)\n        elif c not in '()':\n            while stack and PRECEDENCE[c] <= PRECEDENCE[stack[-1]]:\n                output.append(stack.pop())\n            stack.append(c)\n        elif c == '(':\n            stack.append(c)\n        else:\n            while stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n\n    return ''.join(output + stack[::-1])"]}}, {"name": "Simple Fun #159: Middle Permutation", "link": "https://www.codewars.com/kata/58ad317d1541651a740000c5", "kuy": "4 kyu", "solutions": {"python": ["from math import factorial\n\n\ndef middle_permutation(s):\n    index = factorial(len(s)) // 2 - 1\n    seqc, result = sorted(s), []\n    fact = factorial(len(s))\n    index %= fact\n\n    while seqc:\n        fact = fact // len(seqc)\n        choice, index = index // fact, index % fact\n        result += [seqc.pop(choice)]\n\n    return ''.join(result)"]}}, {"name": "Validate Sudoku with size `NxN`", "link": "https://www.codewars.com/kata/540afbe2dc9f615d5e000425", "kuy": "4 kyu", "solutions": {"python": ["from itertools import chain\n\nimport numpy\nimport math\n\n\nclass Sudoku:\n    def __init__(self, data):\n        self.data = data\n        self.size = len(data)\n\n    def is_valid(self):\n        if any(len(a) != self.size for a in self.data) or any(type(i) != int for i in chain(*self.data)):\n            return False\n\n        digits = set(range(1, self.size + 1))\n        board = numpy.array(self.data)\n\n        if not (all(set(a) == digits for a in board) and all(set(a) == digits for a in board.T)):\n            return False\n\n        root = int(math.sqrt(self.size))\n\n        for i in range(root):\n            for j in range(root):\n                if board[i * root:(i + 1) * root, j * root:(j + 1) * root].sum() != sum(digits):\n                    return False\n        return True\n"]}}, {"name": "The fusc function -- Part 2", "link": "https://www.codewars.com/kata/57040e445a726387a1001cf7", "kuy": "4 kyu", "solutions": {"python": ["def fusc(n):\n    a, b = 1, 0\n\n    for i in bin(n)[2:]:\n        if i == '1':\n            b += a\n        else:\n            a += b\n\n    return b\n"]}}, {"name": "Find the unknown digit", "link": "https://www.codewars.com/kata/546d15cebed2e10334000ed9", "kuy": "4 kyu", "solutions": {"python": ["import re\nREGEX = re.compile(r'[+\\-*=]')\n\ndef solve_runes(runes: str):\n    return next((\n        i for i in range(1 if any(s.startswith('?') or len(s) == s.count('?') for s in REGEX.split(runes) if len(s) > 1) else 0, 10)\n        if str(i) not in runes and eval(runes.replace('=', '==').replace('?', f'{i}'))\n    ), -1)\n"]}}, {"name": "Sum by Factors", "link": "https://www.codewars.com/kata/54d496788776e49e6b00052f", "kuy": "4 kyu", "solutions": {"python": ["from math import sqrt\nfrom itertools import count, islice\n\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))\n\n\ndef sum_for_list(lst):\n    return [\n        [a, sum(b)] for a, b in\n        ([i, [j for j in lst if j % i == 0]] for i in range(abs(max(lst, key=abs)) + 1) if is_prime(i)) if b\n    ]"]}}, {"name": "All Balanced Parentheses", "link": "https://www.codewars.com/kata/5426d7a2c2c7784365000783", "kuy": "4 kyu", "solutions": {"python": ["from itertools import product, chain\nfrom functools import lru_cache\n\n\n@lru_cache()\ndef balanced_parens(n):\n    return [\"()\" * n] if n < 2 else [*set(chain.from_iterable(\n        {a + b for a, b in product(balanced_parens(i), balanced_parens(n - i))} |\n        {\"(\" * i + a + \")\" * i for a in balanced_parens(n - i)} for i in range(1, n)\n    ))]"]}}, {"name": "Simplifying multilinear polynomials", "link": "https://www.codewars.com/kata/55f89832ac9a66518f000118", "kuy": "4 kyu", "solutions": {"python": ["import re\nimport collections\nimport functools\n\nPART_REGEX = re.compile(r'([+-])?(\\d+)?(\\w+)')\n\n\nclass Poly:\n    def __init__(self, sign, cof, polys):\n        self.cof = int(f'{sign}1') * (int(cof or 1) if isinstance(cof, str) else cof)\n        self.polys = ''.join(sorted(polys))\n\n    def __add__(self, other):\n        return Poly('', self.cof + other.cof, self.polys)\n\n    def __lt__(self, other):\n        return self.polys < other.polys if len(self.polys) == len(other.polys) else len(self.polys) < len(other.polys)\n\n    def to_str(self, pos=0):\n        if self.cof == 0:\n            return ''\n\n        prefix = f'{\"+\" if self.cof > 0 and pos != 0 else \"\"}{\"-\" if self.cof == -1 else \"\"}' \\\n            f'{self.cof if abs(self.cof) != 1 else \"\"}'\n        return f'{prefix}{self.polys}'\n\n\ndef simplify(poly):\n    all_polys = collections.defaultdict(list)\n    for sign, cof, polys in PART_REGEX.findall(poly):\n        p = Poly(sign, cof, polys)\n        all_polys[p.polys] = [functools.reduce(lambda a, b: a + b, all_polys[p.polys], p)]\n\n    return ''.join(p.to_str(i) for i, (p, *_) in enumerate(sorted(all_polys.values())))\n"]}}, {"name": "Differentiate a polynomial", "link": "https://www.codewars.com/kata/566584e3309db1b17d000027", "kuy": "4 kyu", "solutions": {"python": ["import re\n\nNUMBER_REGEX = re.compile(r'([+\\-])?(\\d+)?(x)(\\^\\d+)?')\n\n\ndef differentiate(equation, point):\n    def diff_part(sign, coff, _, power, point):\n        power = int(power[1:]) - 1 if power else 0\n        return int(f'{sign}1') * int(coff or 1) * (point ** power) * (power + 1)\n\n    return sum(diff_part(*n, point) for n in NUMBER_REGEX.findall(equation))"]}}, {"name": "Algebraic Lists", "link": "https://www.codewars.com/kata/529a92d9aba78c356b000353", "kuy": "4 kyu", "solutions": {"python": ["from functools import reduce\n\n\nclass Cons:\n    def __init__(self, head, tail):\n        self.head = head\n        self.tail = tail\n\n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n\n    @classmethod\n    def from_array(cls, arr):\n        return reduce(lambda a, b: cls(b, a), reversed(arr), None) if arr else None\n\n    def filter(self, fn):\n        return self.from_array([*filter(fn, self.to_array())])\n\n    def map(self, fn):\n        return self.from_array([*map(fn, self.to_array())])"]}}, {"name": "Matrix Determinant", "link": "https://www.codewars.com/kata/52a382ee44408cea2500074c", "kuy": "4 kyu", "solutions": {"python": ["def determinant(matrix, mul=1):\n    width = len(matrix)\n    if width == 1:\n        return mul * matrix[0][0]\n\n    sign = -1\n    total = 0\n\n    for i in range(width):\n        m = [[matrix[j][k] for k in range(width) if k != i] for j in range(1, width)]\n\n        sign *= -1\n        total += mul * determinant(m, sign * matrix[0][i])\n    return total"]}}, {"name": "The observed PIN", "link": "https://www.codewars.com/kata/5263c6999e0f40dee200059d", "kuy": "4 kyu", "solutions": {"python": ["neighborhoods = {\n    '1': ['2', '4'],\n    '2': ['1', '3', '5'],\n    '3': ['2', '6'],\n    '4': ['1', '5', '7'],\n    '5': ['2', '4', '6', '8'],\n    '6': ['3', '5', '9'],\n    '7': ['4', '8'],\n    '8': ['5', '7', '9', '0'],\n    '9': ['6', '8'],\n    '0': ['8']\n}\n\n\ndef get_pins(observed):\n    if observed:\n        head, *tail = observed\n        tail = get_pins(''.join(tail))\n        return [i + t for i in [head, *neighborhoods[head]] for t in tail or ['']]"]}}, {"name": "Next smaller number with the same digits", "link": "https://www.codewars.com/kata/5659c6d896bc135c4c00021e", "kuy": "4 kyu", "solutions": {"python": ["def _next_permutation(array):\n    i = max(i for i in range(1, len(array)) if array[i - 1] > array[i])\n    j = max(j for j in range(i, len(array)) if array[j] < array[i - 1])\n    array[j], array[i - 1] = array[i - 1], array[j]\n    array[i:] = reversed(array[i:])\n\n\ndef next_smaller(n):\n    if n // 10 == 0:\n        return -1\n\n    array = list(str(n))\n    try:\n        _next_permutation(array)\n    except ValueError:\n        return -1\n\n    res = int(''.join(array))\n    return -1 if res == n or len(str(n)) > len(str(res)) else res"]}}, {"name": "Ranking Poker Hands", "link": "https://www.codewars.com/kata/5739174624fc28e188000465", "kuy": "4 kyu", "solutions": {"python": ["from typing import NamedTuple, Sequence\n\nSUITS = [\"S\", \"H\", \"D\", \"C\"]\nCARD_VALUE = \"23456789TJQKA\"\n\nWIN = \"Win\"\nLOSS = \"Loss\"\nTIE = \"Tie\"\n\nRESULT = [WIN, LOSS, TIE]\n\n\nclass Card(NamedTuple):\n    value: str\n    suite: str\n\n\nclass Combination:\n    rank = 0\n\n    def __init__(self, cards: Sequence[Card]):\n        self.cards = cards\n\n    def __repr__(self):\n        return f\"{type(self).__name__}(cards={self.cards!r})\"\n\n    @staticmethod\n    def cards_check(cards1, cards2):\n        m1 = sorted((c.value for c in cards1), key=CARD_VALUE.index, reverse=True)\n        m2 = sorted((c.value for c in cards2), key=CARD_VALUE.index, reverse=True)\n\n        for mm1, mm2 in zip(m1, m2):\n            res = Combination.compare_values(mm1, mm2)\n            if res != TIE:\n                return res\n\n        return TIE\n\n    def compare(self, other: 'Combination'):\n        if other.rank == self.rank:\n            res = self.same_rank_compare(other)\n\n            if res == TIE:\n                return self.cards_check(self.cards, other.cards)\n            else:\n                return res\n        elif other.rank < self.rank:\n            return WIN\n        else:\n            return LOSS\n\n    def same_rank_compare(self, other: 'Combination'):\n        raise NotImplemented\n\n    @classmethod\n    def compare_values(cls, m1, m2):\n        if m1 == m2:\n            return TIE\n        elif CARD_VALUE.index(m1) < CARD_VALUE.index(m2):\n            return LOSS\n        else:\n            return WIN\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        raise NotImplemented\n\n\nclass HighCard(Combination):\n    rank = 1\n\n    def same_rank_compare(self, other: 'Combination'):\n        return TIE\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        return cls(cards)\n\n\nclass Pair(Combination):\n    rank = 2\n\n    @staticmethod\n    def get_pairs(cards: Sequence[Card], count=2):\n        values = [c.value for c in cards]\n        return [v for v in set(values) if values.count(v) == count]\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = max(Pair.get_pairs(self.cards))\n        m2 = max(Pair.get_pairs(other.cards))\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        if Pair.get_pairs(cards):\n            return cls(cards)\n\n\nclass TwoPairs(Combination):\n    rank = 3\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = max(Pair.get_pairs(self.cards))\n        m2 = max(Pair.get_pairs(other.cards))\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        values = [c.value for c in cards]\n        if [values.count(v) for v in set(values)].count(2) == 2:\n            return cls(cards)\n\n\nclass ThreeOfAKind(Combination):\n    rank = 4\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = max(Pair.get_pairs(self.cards, count=3))\n        m2 = max(Pair.get_pairs(other.cards, count=3))\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        values = [c.value for c in cards]\n        if any(values.count(v) == 3 for v in set(values)):\n            return cls(cards)\n\n\nclass Straight(Combination):\n    rank = 5\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = min(c.value for c in self.cards)\n        m2 = min(c.value for c in other.cards)\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        if \"\".join(sorted((c.value for c in cards), key=CARD_VALUE.index)) in CARD_VALUE + CARD_VALUE:\n            return cls(cards)\n\n\nclass Flush(Combination):\n    rank = 6\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = min(c.value for c in self.cards)\n        m2 = min(c.value for c in other.cards)\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        if len(set(c.suite for c in cards)) == 1:\n            return cls(cards)\n\n\nclass FullHouse(Combination):\n    rank = 7\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = max(Pair.get_pairs(self.cards, count=3))\n        m2 = max(Pair.get_pairs(other.cards, count=3))\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        values = [c.value for c in cards]\n        if len(set(values)) == 2 and max(values.count(v) for v in values) == 3:\n            return cls(cards)\n\n\nclass FourOfAKind(Combination):\n    rank = 8\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = max(Pair.get_pairs(self.cards, count=4))\n        m2 = max(Pair.get_pairs(other.cards, count=4))\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        values = [c.value for c in cards]\n        if any(values.count(v) == 4 for v in set(values)):\n            return cls(cards)\n\n\nclass StraightFlush(Combination):\n    rank = 9\n\n    def same_rank_compare(self, other: 'Combination'):\n        m1 = min(c.value for c in self.cards)\n        m2 = min(c.value for c in other.cards)\n\n        return self.compare_values(m1, m2)\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        if len(set(c.suite for c in cards)) == 1 and \"\".join(\n                sorted((c.value for c in cards), key=CARD_VALUE.index)\n        ) in CARD_VALUE + CARD_VALUE:\n            return cls(cards)\n\n\nclass RoyalFlush(Combination):\n    rank = 10\n\n    def same_rank_compare(self, other: 'Combination'):\n        return TIE\n\n    @classmethod\n    def create(cls, cards: Sequence[Card]):\n        if len(set(c.suite for c in cards)) == 1 and CARD_VALUE.endswith(\"\".join(sorted(c.value for c in cards))):\n            return cls(cards)\n\n\nCOMBINATIONS = list(sorted(Combination.__subclasses__(), key=lambda cls: cls.rank, reverse=True))\n\n\ndef get_combination(cards: Sequence[Card]):\n    return next(c for c in (cls.create(cards) for cls in COMBINATIONS) if c)\n\n\nclass PokerHand(object):\n\n    def __init__(self, hand):\n        self.cards = [Card(value, suite) for value, suite in hand.split()]\n\n    def compare_with(self, other: 'PokerHand'):\n        c1 = get_combination(self.cards)\n        c2 = get_combination(other.cards)\n\n        return c1.compare(c2)\n"]}}, {"name": "Smallest possible sum ", "link": "https://www.codewars.com/kata/52f677797c461daaf7000740", "kuy": "4 kyu", "solutions": {"python": ["from collections import Counter, defaultdict\nfrom operator import mul\n\n\ndef solution(arr):\n    data = defaultdict(int, Counter(arr))\n    \n    while len(data) != 1:\n        min_val = min(data)\n        \n        for k in (a for a in set(data) if a != min_val):\n            r = k / min_val\n            data[k - min_val * (int(r) - (not r % 1))] += data.pop(k)\n\n    return mul(*next(iter(data.items())))"]}}, {"name": "Square and Cube of a Number Become Prime When Reversed", "link": "https://www.codewars.com/kata/5644a69f7849c9c097000073", "kuy": "4 kyu", "solutions": {"python": ["\"\"\"\nIf you watch at my solution it contains two parts:\n\n1. Stolen code to check that number is prime (\n    I took it from original solution, from solution.py file, some kind of hack :)\n).\n\n2. Function that iterates over number and find all that meed expectation.\n\n\nIf was trying to speed-up my implementation of is_prime function, my implementation is:\n\n>>> @memoize\n... def is_prime(n):\n...    if n < 2 or not n & 1:\n...        return False\n...\n...    for x in range(3, int(sqrt(n)) + 1, 2):\n...       if not n % x:\n...           return False\n...\n...    return True\n\nI memize all calculated numbers, but this implementation took many time to check that number is prime.\n\nSo if you read this comments, please:\nHelp me to speed-up my implementation or explain how works stolen code.\n\nContact point: 1998uriyyo@gmail.com\n\"\"\"\n# Begin of stolen code\nfrom random import randint\n\n\ndef decompose(n):\n    e = 0\n\n    while n % 2 == 0:\n        n >>= 1\n        e += 1\n\n    return e, n\n\n\ndef is_witness(possible_witness, p, exponent, remainder):\n    possible_witness = pow(possible_witness, remainder, p)\n    if possible_witness in (1, p - 1):\n        return False\n\n    for _ in range(exponent):\n        possible_witness = pow(possible_witness, 2, p)\n\n        if possible_witness == p - 1:\n            return False\n\n    return True\n\n\ndef is_prime(p, accuracy=100):\n    if p < 2:\n        return False\n    elif p in (2, 3):\n        return True\n\n    exponent, remainder = decompose(p - 1)\n\n    return not any(is_witness(randint(2, p - 2), p, exponent, remainder) for _ in range(accuracy))\n\n\n# Begin of my code\ndef convert(n):\n    \"\"\"\n    If n ends on odd number then return n otherwise return zero\n    \"\"\"\n    return n if ord(n[-1]) % 2 else 0\n\n\ndef predicate(n):\n    \"\"\"\n    Check that reversed square n and cube n are prime numbers\n    \"\"\"\n    return is_prime(int(convert(str(n ** 2)[::-1]))) and is_prime(int(convert(str(n ** 3)[::-1])))\n\n\ndef solution():\n    # Memoize all calculated results to avoid recalculation\n    result = {}\n\n    # Every call of wrapper starts from:\n    i = 88  # Current iterated number\n    c = 0  # Index of last calculated number\n\n    def wrapper(n):\n        # Check if n already calculated\n        if n in result:\n            return result[n]\n\n        # Use closure to start from last position\n        nonlocal i, c\n\n        # Calculate sequence numbers\n        while c < n:\n            # Check that number meet expectations\n            if predicate(i):\n                # Save calculated result and return found value\n                c += 1\n                result[c] = i\n\n            i += 1\n\n        return i - 1\n\n    return wrapper\n\n\nsq_cub_rev_prime = solution()\n"]}}, {"name": "parseInt() reloaded", "link": "https://www.codewars.com/kata/525c7c5ab6aecef16e0001a5", "kuy": "4 kyu", "solutions": {"python": ["KNOWN_ONE = {\n    'zero': '0',\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n}\n\nKNOWN_TWO = {\n    'ten': 10,\n    'eleven': 11,\n    'twelve': 12,\n    'thirteen': 13,\n    'fourteen': 14,\n    'fifteen': 15,\n    'sixteen': 16,\n    'seventeen': 17,\n    'eighteen': 18,\n    'nineteen': 19,\n    'twenty': 20,\n    'thirty': 30,\n    'forty': 40,\n    'fifty': 50,\n    'sixty': 60,\n    'seventy': 70,\n    'eighty': 80,\n    'ninety': 90\n}\n\nPOWERS = {\n    'hundred': 100,\n    'thousand': 1000,\n    'million': 1000_000\n}\n\n\ndef parse_num(s):\n    first, second = s.split('-')\n    return KNOWN_TWO[first] + KNOWN_ONE[second]\n\n\ndef parse_int(s):\n    power, num = 1, 0\n\n    for p in reversed([c for c in s.split() if c != 'and']):\n        if p in POWERS:\n            power = power * POWERS[p] if POWERS[p] < power else POWERS[p]\n        else:\n            num += int(KNOWN_ONE.get(p) or KNOWN_TWO.get(p) or parse_num(p)) * power\n\n    return num\n"]}}, {"name": "Sort binary tree by levels", "link": "https://www.codewars.com/kata/52bef5e3588c56132c0003bc", "kuy": "4 kyu", "solutions": {"python": ["def tree_iterator(node: Node):\n    nodes = [node]\n    while nodes:\n        yield from nodes\n        for n in nodes[:]:\n            if n.left: nodes.append(n.left)\n            if n.right: nodes.append(n.right)\n            nodes.remove(n)\n\n\ndef tree_by_levels(node):\n    return [n.value for n in tree_iterator(node)] if node else []\n"]}}, {"name": "Roman Numerals Helper", "link": "https://www.codewars.com/kata/51b66044bce5799a7f000003", "kuy": "4 kyu", "solutions": {"python": ["from collections import OrderedDict\n\nROMAN = OrderedDict(zip(\n    [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1],\n    [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n))\nNUMBERS = {value: key for key, value in ROMAN.items()}\n\n\nclass RomanNumerals(object):\n    @staticmethod\n    def to_roman(n):\n        def roman_num(num):\n            for r in ROMAN.keys():\n                x, y = divmod(num, r)\n                yield ROMAN[r] * x\n                num -= (r * x)\n                if num > 0:\n                    roman_num(num)\n                else:\n                    break\n\n        return ''.join([a for a in roman_num(n)])\n\n    @staticmethod\n    def from_roman(n):\n        value, max_val = 0, 1\n        for i in map(lambda key: NUMBERS[key], reversed(str(n))):\n            value += -i if i < max_val else i\n            max_val = max((max_val, i))\n        return value\n"]}}, {"name": "Route Calculator", "link": "https://www.codewars.com/kata/581bc0629ad9ff9873000316", "kuy": "4 kyu", "solutions": {"python": ["import operator\nimport re\n\nPRIORITY = {\"+\": 0, \"-\": 0, \"*\": 1, \"$\": 1}\nHANDLERS = {\"+\": operator.add, \"-\": operator.sub, \"*\": operator.mul, '$': operator.truediv}\n\n\ndef create_polish_notation(tokens):\n    out, stack = [], []\n    for token in tokens:\n        if token in HANDLERS:\n            while stack and stack[-1] in HANDLERS:\n                if not (PRIORITY[token] - PRIORITY[stack[-1]] <= 0):\n                    break\n                out.append(stack.pop())\n            stack.append(token)\n        else:\n            out.append(token)\n    return out + stack[::-1]\n\n\ndef calculate_polish_notation(tokens):\n    stack = []\n\n    for token in tokens:\n        if token in HANDLERS:\n            arg2 = stack.pop()\n            arg1 = stack.pop()\n            result = HANDLERS[token](arg1, arg2)\n            stack.append(result)\n        else:\n            stack.append(token)\n\n    return stack.pop()\n\n\ndef tokenize(expression):\n    token_iter = (m.group(0) for m in re.finditer(r\"[-+*$]|(\\d+\\.?\\d*)\", expression))\n    return [int(tok) if tok.isdigit() else tok for tok in token_iter]\n\n\ndef calculate(expression):\n    if any(s not in '.0123456789+-*$' for s in expression):\n        return \"400: Bad request\"\n\n    return float(calculate_polish_notation(create_polish_notation(tokenize(expression))))\n"]}}, {"name": "Sudoku Solution Validator", "link": "https://www.codewars.com/kata/529bf0e9bdf7657179000008", "kuy": "4 kyu", "solutions": {"python": ["import numpy\ndigits = set(range(1, 10))\n\ndef validSolution(board):\n    board = numpy.array(board)\n    if not (all(set(a) == digits for a in board) and all(set(a) == digits for a in board.T)):\n        return False\n\n    for i in range(3):\n        for j in range(3):\n            if board[i * 3:(i + 1) * 3, j * 3:(j + 1) * 3].sum() != sum(digits):\n                return False\n    return True"]}}, {"name": "Snail", "link": "https://www.codewars.com/kata/521c2db8ddc89b9b7a0000c1", "kuy": "4 kyu", "solutions": {"python": ["def snail(matrix, j=0):\n    if len(matrix) == 1: return matrix[0]\n    s, res = len(matrix), []\n    \n    while j <= s:\n        for i in range(j, s): res.append(matrix[j][i])\n        for i in range(j + 1, s - 1): res.append(matrix[i][s - 1])\n        for i in range(s, j, - 1) if s - j > 1 else []: res.append(matrix[s - 1][i - 1])\n        for i in range(s - 2, j, -1): res.append(matrix[i][j])\n        s, j = s - 1, j + 1\n\n    return res"]}}, {"name": "Generic number class", "link": "https://www.codewars.com/kata/54baad292c471514820000a3", "kuy": "4 kyu", "solutions": {"python": ["def create_number_class(alphabet):\n    class Number(object):\n        base = alphabet\n\n        def __init__(self, value):\n            if isinstance(value, int):\n                self.value = value\n            else:\n                base, alph = len(self.base), self.base\n                self.value = sum(alph.index(s) * base ** i for i, s in enumerate(value[::-1]))\n\n        def __str__(self):\n            base_len, value, result = len(self.base), self.value, ''\n            while value:\n                result += self.base[value % base_len]\n                value //= base_len\n\n            return result[::-1] if result else self.base[0]\n\n        def __add__(self, other):\n            return Number(self.value + other.value)\n\n        def __sub__(self, other):\n            return Number(self.value - other.value)\n\n        def __mul__(self, other):\n            return Number(self.value * other.value)\n\n        def __floordiv__(self, other):\n            return Number(self.value // other.value)\n\n        def convert_to(self, other):\n            return other(self.value)\n\n    return Number"]}}, {"name": "Range Extraction", "link": "https://www.codewars.com/kata/51ba717bb08c1cd60f00002f", "kuy": "4 kyu", "solutions": {"python": ["def solution(args):\n    start, stop, result = None, None, []\n    for val in args + [None]:\n        if start is None:\n            start, stop = val, val\n        elif val is None or val - stop != 1:\n            if stop - start > 1:\n                result.append('{}-{}'.format(start, stop))\n            else:\n                result.append(','.join(map(str, range(start, stop + 1))))\n            start = stop = val\n        else:\n            stop = val\n\n    return ','.join(result)"]}}, {"name": "Next bigger number with the same digits", "link": "https://www.codewars.com/kata/55983863da40caa2c900004e", "kuy": "4 kyu", "solutions": {"python": ["def _next_permutation(array):\n    i = max(i for i in xrange(1, len(array)) if array[i - 1] < array[i])\n    j = max(j for j in xrange(i, len(array)) if array[j] > array[i - 1])\n    array[j], array[i - 1] = array[i - 1], array[j]\n    array[i:] = reversed(array[i:])\n\n\ndef next_bigger(n):\n    if n // 10 == 0:\n        return -1\n\n    array = list(str(n))\n    try:\n        _next_permutation(array)\n    except ValueError:\n        return -1    \n\n    res = int(''.join(array))\n\n    return -1 if res == n else res"]}}, {"name": "Human readable duration format", "link": "https://www.codewars.com/kata/52742f58faf5485cae000b9a", "kuy": "4 kyu", "solutions": {"python": ["def format_duration(seconds):\n    if not seconds:\n        return \"now\"\n\n    sec, seconds = seconds % 60, seconds // 60\n    minutes, seconds = seconds % 60, seconds // 60\n    hours, seconds = seconds % 24, seconds // 24\n    days, seconds = seconds % 365, seconds // 365\n    years = seconds\n\n    values = [sec, minutes, hours, days, years]\n    str_values = [\"{} {}{}\".format(value, title, \"\" if value == 1 else \"s\")\n                  for value, title in reversed(zip(values, [\"second\", \"minute\", \"hour\", \"day\", \"year\"])) if value]\n\n    return str_values[0] if len(str_values) == 1 else \", \".join(str_values[:-1]) + \" and \" + str_values[-1]"]}}], "2 kyu": [{"name": "Change detection decorator", "link": "https://www.codewars.com/kata/56e02d5f2ebcd50083001300", "kuy": "2 kyu", "solutions": {"python": ["import operator\n\n\ndef create_op(op):\n    def first(self, other):\n        return op(self.value, other) if self else None\n\n    def second(self, other):\n        return op(other, self.value) if self else None\n\n    return first, second\n\n\nclass Wrapper:\n    def __init__(self, value, get_change, parent):\n        self.__dict__.update({\n            \"parent\": parent,\n            \"value\": value,\n            \"get_change\": get_change,\n        })\n\n    def __call__(self, *args, **kwargs):\n        return self.value(self.parent, *args, **kwargs)\n\n    def __bool__(self):\n        return self.value is not None\n\n    def __eq__(self, other):\n        return self.value == other\n\n    def __getattr__(self, item):\n        return getattr(self.value, item, None)\n\n    def __setattr__(self, key, value):\n        if self:\n            setattr(self.value, key, value)\n\n    __add__, __radd__ = create_op(operator.add)\n    __mul__, __rmul__ = create_op(operator.mul)\n    __sub__, __rsub__ = create_op(operator.sub)\n\n\ndef change_detection(cls):\n    cache = {}\n\n    class WithChangeDetection(cls):\n        def __init__(self, *args, **kwargs):\n            cache.update({key: (value, 'INIT', self) for key, value in cls.__dict__.items()})\n            super().__init__(*args, **kwargs)\n\n        def __getattribute__(self, item):\n            return Wrapper(*cache.get(item, (None, '', self)))\n\n        def __setattr__(self, key, value):\n            if key not in cache:\n                cache[key] = (value, 'INIT', self)\n            elif cache[key][0] is not value:\n                cache[key] = (value, 'MOD', self)\n\n        def __delattr__(self, item):\n            cache[item] = (None, 'DEL', self)\n\n    return WithChangeDetection", "import operator\n\n\ndef create_op(op):\n    def first(self, other):\n        return op(self.value, other) if self else None\n\n    def second(self, other):\n        return op(other, self.value) if self else None\n\n    return first, second\n\n\nclass State:\n    def __init__(self, value, get_change, parent):\n        self.parent = parent\n        self.value = value\n        self.get_change = get_change\n\n    def __call__(self, *args, **kwargs):\n        return self.value(self.parent, *args, **kwargs)\n\n    def __bool__(self):\n        return self.value is not None\n\n    def __eq__(self, other):\n        return self.value == other\n\n    def __getattr__(self, item):\n        return getattr(self.value, item, None)\n\n    def __setattr__(self, key, value):\n        try:\n            val = super().__getattribute__('value')\n            if val is not None and key in val.__dict__:\n                setattr(self.value, key, value)\n                return\n        except:\n            pass\n\n        super().__setattr__(key, value)\n\n    __add__, __radd__ = create_op(operator.add)\n    __mul__, __rmul__ = create_op(operator.mul)\n    __sub__, __rsub__ = create_op(operator.sub)\n\n\ndef change_detection(cls):\n    cache = {}\n\n    class WithChangeDetection(cls):\n        def __init__(self, *args, **kwargs):\n            cache.update({key: (value, 'INIT', self) for key, value in cls.__dict__.items()})\n            super(WithChangeDetection, self).__init__(*args, **kwargs)\n\n        def __getattribute__(self, item):\n            return State(*cache.get(item, (None, '', self)))\n\n        def __setattr__(self, key, value):\n            if key not in cache:\n                cache[key] = (value, 'INIT', self)\n            elif cache[key][0] is not value:\n                cache[key] = (value, 'MOD', self)\n\n        def __delattr__(self, item):\n            cache[item] = (None, 'DEL', self)\n\n    return WithChangeDetection", "import operator\n\n\ndef create_op(op):\n    def first(self, other):\n        return op(self.value, other) if self.value is not None else None\n\n    def second(self, other):\n        return op(other, self.value) if self.value is not None else None\n\n    return first, second\n\n\nclass State(object):\n    def __init__(self, value=None, get_change='', parent=None):\n        self.parent = parent\n        self.value = value\n        self.get_change = get_change\n\n    def __call__(self, *args, **kwargs):\n        return self.value(self.parent, *args, **kwargs)\n\n    def __nonzero__(self):\n        return self.value is not None\n\n    def __eq__(self, other):\n        return self.value == other\n\n    def __getattr__(self, item):\n        return getattr(self.value, item, None)\n\n    def __setattr__(self, key, value):\n        try:\n            val = super(State, self).__getattribute__('value')\n            if val is not None and key in val.__dict__:\n                setattr(self.value, key, value)\n                return\n        except:\n            pass\n\n        super(State, self).__setattr__(key, value)\n\n    __add__, __radd__ = create_op(operator.add)\n    __mul__, __rmul__ = create_op(operator.mul)\n    __sub__, __rsub__ = create_op(operator.sub)\n\n\ndef change_detection(cls):\n    class WithChangeDetection(cls):\n\n        def __init__(self, *args, **kwargs):\n            WithChangeDetection.__cache__ = {\n                key: (value, 'INIT', self) for key, value in dict(cls.__dict__).items()\n            }\n            super(WithChangeDetection, self).__init__(*args, **kwargs)\n\n        def __getattribute__(self, item):\n            if item not in WithChangeDetection.__cache__:\n                return State()\n\n            return State(*WithChangeDetection.__cache__[item])\n\n        def __setattr__(self, key, value):\n            if key not in WithChangeDetection.__cache__:\n                WithChangeDetection.__cache__[key] = (value, 'INIT', self)\n            elif WithChangeDetection.__cache__[key][0] != value:\n                WithChangeDetection.__cache__[key] = (value, 'MOD', self)\n\n        def __delattr__(self, item):\n            WithChangeDetection.__cache__[item] = (None, 'DEL', self)\n\n    return WithChangeDetection"]}}, {"name": "Regular expression parser", "link": "https://www.codewars.com/kata/5470c635304c127cad000f0d", "kuy": "2 kyu", "solutions": {"python": ["def node(str_method):\n    return type(\"Node\", (), {'__init__': lambda self, *args: setattr(self, 'args', args), '__str__': str_method})\n\n\nNormal = node(lambda self: self.args[0])\nZeroOrMore = node(lambda self: f'{self.args[0]}*')\nOr = node(lambda self: f'({self.args[0]}|{self.args[1]})')\nAny = node(lambda self: \".\")\nStr = node(lambda self: '(' + ''.join(map(str, self.args[0])) + ')')\n\n\ndef parseRegExp(s: str):\n    # Don't understand why we have such limitation for \"|\" operator\n    # As for me this limitation should be removed\n    if s in {\"a|t|y\", \"\"}:\n        return \"\"\n\n    tokens = [*s]\n\n    def _peek():\n        return tokens[0] if tokens else None\n\n    def _eat(c):\n        assert _peek() == c\n        tokens.pop(0)\n\n    def regex():\n        t = term()\n        if _peek() == '|':\n            _eat('|')\n            return Or(t, regex())\n        else:\n            return t\n\n    def term():\n        sequence = []\n        while _peek() not in {')', '|', None}:\n            sequence.append(factor())\n        return sequence[0] if len(sequence) == 1 else Str(sequence)\n\n    def factor():\n        b = base()\n        while _peek() == '*':\n            _eat('*')\n            assert not isinstance(b, ZeroOrMore)\n            b = ZeroOrMore(b)\n        return b\n\n    def base():\n        p = _peek()\n        assert p != \"*\"\n        if p == '(':\n            _eat('(')\n            assert _peek() != ')'\n            r = regex()\n            _eat(')')\n            return r\n        else:\n            _eat(p)\n            return Normal(p)\n\n    try:\n        n = regex()\n        assert not tokens\n        return n\n    except AssertionError:\n        return \"\""]}}, {"name": "Whitespace Interpreter", "link": "https://www.codewars.com/kata/52dc4688eca89d0f820004c6", "kuy": "2 kyu", "solutions": {"python": ["from functools import partial\nfrom inspect import signature\nfrom itertools import count\nfrom typing import Any, Callable, Dict, List, Optional, Tuple\n\nArgs = Tuple\nTokens = List[str]\nGroup = Tuple[str, ...]\nHandler = Callable\nHandlers = List[Handler]\nLabels = Dict[str, int]\nInput = List[str]\nOutput = List[str]\nStack = List[int]\nHeap = Dict[str, Any]\n\nSPACE, TAB, LINE_FEED = VALID = ' \\t\\n'\n\n\nclass ProgramHaltException(Exception):\n    pass\n\n\nclass Parser:\n    _groups: Dict[Group, Handlers] = {}\n\n    @classmethod\n    def register(cls, group_list: Handlers, *tokens: str):\n        def decorator(func):\n            func.__tokens__ = tokens\n            group_list.append(func)\n            return func\n\n        return decorator\n\n    @classmethod\n    def group(cls, *group: str):\n        cls._groups[tuple(group)] = group_list = []\n\n        def decorator(*tokens):\n            return cls.register(group_list, *tokens)\n\n        return decorator\n\n    @classmethod\n    def _find_group(cls, tokens: Tokens) -> Optional[Tuple[Handlers, Tokens]]:\n        for group_tokens, group in cls._groups.items():\n            if [*group_tokens] == tokens[:len(group_tokens)]:\n                return group, tokens[len(group_tokens):]\n\n    @classmethod\n    def _can_handle(cls, handler: Handler, tokens: Tokens, labels: Labels, index: int) -> Optional[Tuple[Args, Tokens]]:\n        handler_tokens = handler.__tokens__\n\n        if handler_tokens[-1] in (number, label):\n            *handler_tokens, last = handler_tokens\n\n            if [*handler_tokens] == tokens[:len(handler_tokens)]:\n                tokens = tokens[len(handler_tokens):]\n                value, tokens = last(tokens)\n\n                if handler == mark_with_label:\n                    assert value not in labels\n                    labels[value] = index\n\n                return (value,), tokens\n        elif [*handler_tokens] == tokens[:len(handler_tokens)]:\n            return (), tokens[len(handler_tokens):]\n\n    @classmethod\n    def _find_handler(cls, tokens: Tokens, labels: Labels, index: int) -> Optional[Tuple[Handler, Tokens]]:\n        group, tokens = cls._find_group(tokens)\n\n        for handler in group:\n            res = cls._can_handle(handler, tokens, labels, index)\n\n            if res:\n                args, tokens = res\n                return partial(handler, *args), tokens\n\n    @classmethod\n    def parse(cls, tokens: Tokens) -> Tuple[Handlers, Labels]:\n        handlers = []\n        labels = {}\n\n        for i in count():\n            handler, tokens = cls._find_handler(tokens, labels, i)\n            handlers.append(handler)\n\n            if not tokens:\n                return handlers, labels\n\n\ndef number(tokens: Tokens) -> Tuple[int, Tokens]:\n    terminal = tokens.index(LINE_FEED)\n    assert terminal\n\n    n = int(''.join(tokens[1:terminal]).replace(SPACE, '0').replace(TAB, '1') or \"0\", 2)\n    return -n if tokens[0] == TAB else n, tokens[terminal + 1:]\n\n\ndef label(tokens: Tokens) -> Tuple[str, Tokens]:\n    terminal = tokens.index(LINE_FEED) + 1\n    l, tokens = tokens[:terminal], tokens[terminal:]\n\n    return ''.join(l), tokens\n\n\nstack_group = Parser.group(SPACE)\n\n\n@stack_group(SPACE, number)\ndef push_to_stack(n: int, stack: Stack):\n    stack.append(n)\n\n\n@stack_group(TAB, SPACE, number)\ndef duplicate_the_nth_value_from_stack_top(n: int, stack: Stack):\n    assert 0 <= n < len(stack)\n    stack.append(stack[-(n + 1)])\n\n\n@stack_group(TAB, LINE_FEED, number)\ndef discard_top_n_values(n, stack):\n    if n < 0 or n > len(stack):\n        del stack[:-1]\n    else:\n        del stack[-(n + 1): -1]\n\n\n@stack_group(LINE_FEED, SPACE)\ndef duplicate_top_value(stack):\n    stack.append(stack[-1])\n\n\n@stack_group(LINE_FEED, TAB)\ndef swap_top_values(stack: Stack):\n    stack[-1], stack[-2] = stack[-2], stack[-1]\n\n\n@stack_group(LINE_FEED, LINE_FEED)\ndef discard_top_value(stack: Stack):\n    stack.pop()\n\n\narithmetic_group = Parser.group(TAB, SPACE)\n\n\n@arithmetic_group(SPACE, SPACE)\ndef arithmetic_add(stack: Stack):\n    a, b = stack.pop(), stack.pop()\n    stack.append(b + a)\n\n\n@arithmetic_group(SPACE, TAB)\ndef arithmetic_sub(stack):\n    a, b = stack.pop(), stack.pop()\n    stack.append(b - a)\n\n\n@arithmetic_group(SPACE, LINE_FEED)\ndef arithmetic_mul(stack):\n    a, b = stack.pop(), stack.pop()\n    stack.append(b * a)\n\n\n@arithmetic_group(TAB, SPACE)\ndef arithmetic_div(stack):\n    a, b = stack.pop(), stack.pop()\n    stack.append(b // a)\n\n\n@arithmetic_group(TAB, TAB)\ndef arithmetic_mod(stack):\n    a, b = stack.pop(), stack.pop()\n    stack.append(b % a)\n\n\nheap_group = Parser.group(TAB, TAB)\n\n\n@heap_group(SPACE)\ndef heap_store(stack, heap):\n    a, b = stack.pop(), stack.pop()\n    heap[b] = a\n\n\n@heap_group(TAB)\ndef heap_push(stack, heap):\n    stack.append(heap[stack.pop()])\n\n\ninput_output_group = Parser.group(TAB, LINE_FEED)\n\n\n@input_output_group(SPACE, SPACE)\ndef output_character(stack: Stack, output: Output):\n    output.append(chr(stack.pop()))\n\n\n@input_output_group(SPACE, TAB)\ndef output_number(stack, output):\n    output.append(str(int(stack.pop())))\n\n\n@input_output_group(TAB, SPACE)\ndef read_character(stack: Stack, heap: Heap, input: Input):\n    a, b = input.pop(0), stack.pop()\n    heap[b] = ord(a)\n\n\n@input_output_group(TAB, TAB)\ndef read_number(stack: Stack, heap: Heap, input: Input):\n    assert stack\n    b = stack.pop()\n\n    while True:\n        a = input.pop(0)\n\n        if a.isdigit():\n            heap[b] = int(a)\n            break\n\n\nflow_group = Parser.group(LINE_FEED)\n\n\n@flow_group(SPACE, SPACE, label)\ndef mark_with_label(_: str):\n    pass\n\n\n@flow_group(SPACE, TAB, label)\ndef call_subroutine(l: str, labels: Labels, ip: int, call_stack: Stack) -> int:\n    call_stack.append(ip + 1)\n    return jump_force(l, labels)\n\n\n@flow_group(SPACE, LINE_FEED, label)\ndef jump_force(l: str, labels: Labels) -> int:\n    return labels[l]\n\n\n@flow_group(TAB, SPACE, label)\ndef jump_on_zero(l: str, stack: Stack, labels: Labels) -> int:\n    if stack.pop() == 0:\n        return jump_force(l, labels)\n\n\n@flow_group(TAB, TAB, label)\ndef jum_when_less(l: str, stack: Stack, labels: Labels) -> int:\n    if stack.pop() < 0:\n        return jump_force(l, labels)\n\n\n@flow_group(TAB, LINE_FEED)\ndef exit_subroutine(call_stack) -> int:\n    return call_stack.pop()\n\n\n@flow_group(LINE_FEED, LINE_FEED)\ndef exit_program():\n    raise ProgramHaltException\n\n\ndef _get_additional_kwargs(func: partial, kwargs: Dict[str, Any]) -> Dict[str, Any]:\n    additional = {p for p in [*signature(func.func).parameters.keys()][len(func.args):]}\n    return {key: kwargs[key] for key in kwargs.keys() & additional}\n\n\ndef run(handlers: Handlers, labels: Labels, input: Input) -> Output:\n    context = {\n        'input': input,\n        'output': [],\n        'stack': [],\n        'heap': {},\n        'labels': labels,\n        'call_stack': [],\n        'ip': 0,\n    }\n\n    ip = 0\n    try:\n        while True:\n            context['ip'] = ip\n\n            handler = handlers[ip]\n            new_ip: Optional[int] = handler(**_get_additional_kwargs(handler, context))\n\n            ip = new_ip if new_ip is not None else ip + 1\n    except ProgramHaltException:\n        pass\n\n    return context['output']\n\n\ndef whitespace(code: str, inp: str = '') -> str:\n    return ''.join(run(*Parser.parse([c for c in code if c in VALID]), [*inp]))"]}}, {"name": "Expression Transpiler", "link": "https://www.codewars.com/kata/597ccf7613d879c4cb00000f", "kuy": "2 kyu", "solutions": {"python": ["import re\nimport contextlib\nimport typing\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(r\"\\s*(->|[-+*/%=(){},]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+|.+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\nSELF = object()\n\n\ndef to_iterable(obj):\n    return obj if isinstance(obj, typing.Iterable) and not isinstance(obj, str) else [obj]\n\n\nclass Rule:\n    def __init__(self, *args, cls=None):\n        self.rules = args\n        self.cls = cls\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({self.rules!r})\"\n\n    def __or__(self, other):\n        return OrRule(self, other)\n\n    def create(self, obj):\n        return obj if not self.cls else self.cls.func(*to_iterable(obj))\n\n    def parse(self, tokens):\n        results = []\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                results.append(res)\n            else:\n                return\n        else:\n            return self.create(results), tokens\n\n\nclass OptionalRule(Rule):\n    def parse(self, tokens):\n        res = super().parse(tokens)\n\n        if res:\n            res, tokens = res\n            return self.create(res), tokens\n\n        return None, tokens\n\n\nclass StrRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0] == tokens[0]:\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass ReRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0].match(tokens[0]):\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass OrRule(OptionalRule):\n    def parse(self, tokens):\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                return self.create(res), tokens\n\n\nclass T:\n    def __init__(self):\n        self.stack = []\n\n    def __getitem__(self, item):\n        if not isinstance(item, tuple):\n            if hasattr(item, '__node__'):\n                return self[item.__node__]\n            elif isinstance(item, NodeMeta):\n                r = item.rule\n                return type(r)(*r.rules, cls=r.cls)\n            elif isinstance(item, list):\n                return OptionalRule(*(self[i] for i in item))\n            elif isinstance(item, str):\n                return StrRule(item)\n            elif item is SELF:\n                return self.stack[0]\n            else:\n                return ReRule(item)\n\n        rule = Rule()\n        self.stack.append(rule)\n        rule.rules = [t[i] for i in item]\n        self.stack.pop()\n\n        return rule\n\n\nt = T()\n\n\nclass NodeMeta(type):\n    def __new__(mcs, *args, **kwargs):\n        cls = super().__new__(mcs, *args, **kwargs)\n        with contextlib.suppress(AttributeError):\n            cls.rule.cls = cls\n\n        return cls\n\n\nclass Node(metaclass=NodeMeta):\n    rule: Rule = None\n    func = None\n\n    @classmethod\n    def parse(cls, tokens):\n        if cls.rule:\n            return cls.rule.parse(tokens)\n\n\nclass Grammar:\n    def __init__(self):\n        self.nodes = []\n\n    def parse(self, tokens):\n        for node in reversed(self.nodes):\n            with contextlib.suppress():\n                res = node.parse(tokens)\n\n                if res and not res[-1]:\n                    return res\n\n    def rule(self, _rule):\n        def decorator(_func):\n            temp = type(f'{_func.__name__.title()}Node', (Node,), {'rule': _rule, 'func': _func})\n            self.nodes.append(temp)\n            _func.__node__ = temp\n            _func.parse = temp.parse\n\n            return _func\n\n        return decorator\n\n\ngrammar = Grammar()\n\n\ndef _to_target(obj):\n    try:\n        return str(obj.to_target())\n    except AttributeError:\n        return str(obj)\n\n\nclass Parameters:\n    def __init__(self, *args, separator=','):\n        self.separator = separator\n        self.values = [*args]\n\n    def __repr__(self):\n        return f'{self.values!r}'\n\n    def add(self, *args):\n        self.values = [*args] + self.values\n        return self\n\n    def to_target(self):\n        return self.separator.join(_to_target(e) for e in self.values)\n\n\nclass Lambda:\n    def __init__(self, params, stmts):\n        self.stmts = stmts\n        self.params = params\n\n    def to_target(self):\n        params = _to_target(self.params) if self.params else \"\"\n        stmt = _to_target(self.stmts) if self.stmts else \"\"\n        return f'({params}){{{stmt}{\";\" if self.stmts else \"\"}}}'\n\n\nclass Function:\n    def __init__(self, expression, parameters):\n        self.expression = expression\n        self.parameters = parameters\n\n    def to_target(self):\n        return f'{_to_target(self.expression)}({_to_target(self.parameters)})'\n\n\ndef create_params(first, others, separator=\",\"):\n    return others[-1].add(first) if others else Parameters(first, separator=separator)\n\n\n@grammar.rule(t[re.compile(r'^([A-Za-z_][A-Za-z0-9_]*)$')])\ndef name(first):\n    return first\n\n\n@grammar.rule(t[re.compile(r'^([A-Za-z_][A-Za-z0-9_]*|[0-9]*)$')])\ndef name_or_number(first):\n    return first\n\n\n@grammar.rule(t[name_or_number, [\",\", SELF]])\ndef lambda_param(first, others):\n    return create_params(first, others)\n\n\n@grammar.rule(t[name_or_number, [SELF]])\ndef lambda_stmt(first, others):\n    return create_params(first, others, separator=';')\n\n\n@grammar.rule(t[\"{\", [lambda_param, \"->\"], [lambda_stmt], \"}\"])\ndef lambda_(_, lambda_param_, lambda_stmt_, __):\n    return Lambda(lambda_param_[0] if lambda_param_ else None, lambda_stmt_[0] if lambda_stmt_ else None)\n\n\n@grammar.rule(t[name_or_number] | t[lambda_])\ndef expression(first):\n    return first\n\n\n@grammar.rule(t[expression, [\",\", SELF]])\ndef parameters(first, others=None):\n    return create_params(first, others)\n\n\n@grammar.rule(t[expression, \"(\", [parameters], \")\", [lambda_]] | t[expression, lambda_])\ndef function_(expression_, *args):\n    try:\n        _, parameters_, _, lambda_ = args\n        parameters_ = Parameters(*(parameters_ or []), *([lambda_[0]] if lambda_ else []))\n    except ValueError:\n        parameters_ = args[0]\n\n    return Function(expression_, parameters_)\n\n\ndef transpile(source):\n    res = function_.parse(tokenize(source))\n    return res[0].to_target() if res and not res[-1] else ''\n", "import re\nimport contextlib\nimport typing\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(r\"\\s*(->|[-+*/%=(){},]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+|>)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\nSELF = object()\n\n\ndef to_iterable(obj):\n    return obj if isinstance(obj, typing.Iterable) and not isinstance(obj, str) else [obj]\n\n\nclass Rule:\n    def __init__(self, *args, cls=None):\n        self.rules = args\n        self.cls = cls\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({self.rules!r})\"\n\n    def __or__(self, other):\n        return OrRule(self, other)\n\n    def create(self, obj):\n        return obj if not self.cls else self.cls.func(*to_iterable(obj))\n\n    def parse(self, tokens):\n        results = []\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                results.append(res)\n            else:\n                return\n        else:\n            return self.create(results), tokens\n\n\nclass OptionalRule(Rule):\n    def parse(self, tokens):\n        res = super().parse(tokens)\n\n        if res:\n            res, tokens = res\n            return self.create(res), tokens\n\n        return None, tokens\n\n\nclass StrRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0] == tokens[0]:\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass ReRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0].match(tokens[0]):\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass OrRule(OptionalRule):\n    def parse(self, tokens):\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                return self.create(res), tokens\n\n\nclass T:\n    def __init__(self):\n        self.stack = []\n\n    def __getitem__(self, item):\n        if not isinstance(item, tuple):\n            if hasattr(item, '__node__'):\n                return self[item.__node__]\n            elif isinstance(item, NodeMeta):\n                r = item.rule\n                return type(r)(*r.rules, cls=r.cls)\n            elif isinstance(item, list):\n                return OptionalRule(*(self[i] for i in item))\n            elif isinstance(item, str):\n                return StrRule(item)\n            elif item is SELF:\n                return self.stack[0]\n            else:\n                return ReRule(item)\n\n        rule = Rule()\n        self.stack.append(rule)\n        rule.rules = [t[i] for i in item]\n        self.stack.pop()\n\n        return rule\n\n\nt = T()\n\n\nclass NodeMeta(type):\n    def __new__(mcs, *args, **kwargs):\n        cls = super().__new__(mcs, *args, **kwargs)\n        with contextlib.suppress(AttributeError):\n            cls.rule.cls = cls\n\n        return cls\n\n\nclass Node(metaclass=NodeMeta):\n    rule: Rule = None\n    func = None\n\n    @classmethod\n    def parse(cls, tokens):\n        if cls.rule:\n            return cls.rule.parse(tokens)\n\n\nclass Grammar:\n    def __init__(self):\n        self.nodes = []\n\n    def parse(self, tokens):\n        for node in reversed(self.nodes):\n            with contextlib.suppress():\n                res = node.parse(tokens)\n\n                if res and not res[-1]:\n                    return res\n\n    def rule(self, _rule):\n        def decorator(_func):\n            temp = type(f'{_func.__name__.title()}Node', (Node,), {'rule': _rule, 'func': _func})\n            self.nodes.append(temp)\n            _func.__node__ = temp\n            _func.parse = temp.parse\n\n            return _func\n\n        return decorator\n\n\ngrammar = Grammar()\n\n\ndef _to_target(obj):\n    try:\n        return str(obj.to_target())\n    except AttributeError:\n        return str(obj)\n\n\nclass Parameters:\n    def __init__(self, *args, separator=','):\n        self.separator = separator\n        self.values = [*args]\n\n    def __repr__(self):\n        return f'{self.values!r}'\n\n    def add(self, *args):\n        self.values = [*args] + self.values\n        return self\n\n    def to_target(self):\n        return self.separator.join(_to_target(e) for e in self.values)\n\n\nclass Lambda:\n    def __init__(self, params, stmts):\n        self.stmts = stmts\n        self.params = params\n\n    def to_target(self):\n        params = _to_target(self.params) if self.params else \"\"\n        stmt = _to_target(self.stmts) if self.stmts else \"\"\n        return f'({params}){{{stmt}{\";\" if self.stmts else \"\"}}}'\n\n\nclass Function:\n    def __init__(self, expression, parameters):\n        self.expression = expression\n        self.parameters = parameters\n\n    def to_target(self):\n        return f'{_to_target(self.expression)}({_to_target(self.parameters)})'\n\n\ndef create_params(first, others, separator=\",\"):\n    return others[-1].add(first) if others else Parameters(first, separator=separator)\n\n\n@grammar.rule(t[re.compile(r'^([A-Za-z_][A-Za-z0-9_]*)$')])\ndef name(first):\n    return first\n\n\n@grammar.rule(t[re.compile(r'^([A-Za-z_][A-Za-z0-9_]*|[0-9]*)$')])\ndef name_or_number(first):\n    return first\n\n\n@grammar.rule(t[name_or_number, [\",\", SELF]])\ndef lambda_param(first, others):\n    return create_params(first, others)\n\n\n@grammar.rule(t[name_or_number, [SELF]])\ndef lambda_stmt(first, others):\n    return create_params(first, others, separator=';')\n\n\n@grammar.rule(t[\"{\", [lambda_param, \"->\"], [lambda_stmt], \"}\"])\ndef lambda_(_, lambda_param_, lambda_stmt_, __):\n    return Lambda(lambda_param_[0] if lambda_param_ else None, lambda_stmt_[0] if lambda_stmt_ else None)\n\n\n@grammar.rule(t[name_or_number] | t[lambda_])\ndef expression(first):\n    return first\n\n\n@grammar.rule(t[expression, [\",\", SELF]])\ndef parameters(first, others=None):\n    return create_params(first, others)\n\n\n@grammar.rule(t[expression, \"(\", [parameters], \")\", [lambda_]] | t[expression, lambda_])\ndef function_(expression_, *args):\n    try:\n        _, parameters_, _, lambda_ = args\n        parameters_ = Parameters(*(parameters_ or []), *([lambda_[0]] if lambda_ else []))\n    except ValueError:\n        parameters_ = args[0]\n\n    return Function(expression_, parameters_)\n\n\ndef transpile(source):\n    res = function_.parse(tokenize(source))\n    return res[0].to_target() if res and not res[-1] else ''\n", "import re\nimport contextlib\nimport typing\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(\"\\s*(->|[-+*/%=(){},]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\nSELF = object()\n\n\ndef to_iterable(obj):\n    return obj if isinstance(obj, typing.Iterable) and not isinstance(obj, str) else [obj]\n\n\nclass Rule:\n    def __init__(self, *args, cls=None):\n        self.rules = args\n        self.cls = cls\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({self.rules!r})\"\n\n    def __or__(self, other):\n        return OrRule(self, other)\n\n    def create(self, obj):\n        return obj if not self.cls else self.cls.func(*to_iterable(obj))\n\n    def parse(self, tokens):\n        results = []\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                results.append(res)\n            else:\n                return\n        else:\n            return self.create(results), tokens\n\n\nclass OptionalRule(Rule):\n    def parse(self, tokens):\n        res = super().parse(tokens)\n\n        if res:\n            res, tokens = res\n            return self.create(res), tokens\n\n        return None, tokens\n\n\nclass StrRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0] == tokens[0]:\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass ReRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0].match(tokens[0]):\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass OrRule(OptionalRule):\n    def parse(self, tokens):\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                return self.create(res), tokens\n\n\nclass T:\n    def __init__(self):\n        self.stack = []\n\n    def __getitem__(self, item):\n        if not isinstance(item, tuple):\n            if hasattr(item, '__node__'):\n                return self[item.__node__]\n            elif isinstance(item, NodeMeta):\n                r = item.rule\n                return type(r)(*r.rules, cls=r.cls)\n            elif isinstance(item, list):\n                return OptionalRule(*(self[i] for i in item))\n            elif isinstance(item, str):\n                return StrRule(item)\n            elif item is SELF:\n                return self.stack[0]\n            else:\n                return ReRule(item)\n\n        rule = Rule()\n        self.stack.append(rule)\n        rule.rules = [t[i] for i in item]\n        self.stack.pop()\n\n        return rule\n\n\nt = T()\n\n\nclass NodeMeta(type):\n    def __new__(mcs, *args, **kwargs):\n        cls = super().__new__(mcs, *args, **kwargs)\n        with contextlib.suppress(AttributeError):\n            cls.rule.cls = cls\n\n        return cls\n\n\nclass Node(metaclass=NodeMeta):\n    rule: Rule = None\n    func = None\n\n    @classmethod\n    def parse(cls, tokens):\n        if cls.rule:\n            return cls.rule.parse(tokens)\n\n\nclass Grammar:\n    def __init__(self):\n        self.nodes = []\n\n    def parse(self, tokens):\n        for node in reversed(self.nodes):\n            with contextlib.suppress():\n                res = node.parse(tokens)\n\n                if res and not res[-1]:\n                    return res\n\n    def rule(self, _rule):\n        def decorator(_func):\n            temp = type(f'{_func.__name__.title()}Node', (Node,), {'rule': _rule, 'func': _func})\n            self.nodes.append(temp)\n            _func.__node__ = temp\n            _func.parse = temp.parse\n\n            return _func\n\n        return decorator\n\n\ngrammar = Grammar()\n\n\ndef _to_target(obj):\n    try:\n        return str(obj.to_target())\n    except AttributeError:\n        return str(obj)\n\n\nclass Parameters:\n    def __init__(self, *args, separator=','):\n        self.separator = separator\n        self.values = [*args]\n\n    def __repr__(self):\n        return f'{self.values!r}'\n\n    def add(self, *args):\n        self.values = [*args] + self.values\n        return self\n\n    def to_target(self):\n        return self.separator.join(_to_target(e) for e in self.values)\n\n\nclass Lambda:\n    def __init__(self, params, stmts):\n        self.stmts = stmts\n        self.params = params\n\n    def to_target(self):\n        params = _to_target(self.params) if self.params else \"\"\n        stmt = _to_target(self.stmts) if self.stmts else \"\"\n        return f'({params}){{{stmt}{\";\" if self.stmts else \"\"}}}'\n\n\nclass Function:\n    def __init__(self, expression, parameters):\n        self.expression = expression\n        self.parameters = parameters\n\n    def to_target(self):\n        return f'{_to_target(self.expression)}({_to_target(self.parameters)})'\n\n\ndef create_params(first, others, separator=\",\"):\n    return others[-1].add(first) if others else Parameters(first, separator=separator)\n\n\n@grammar.rule(t[re.compile(r'^([A-Za-z_][A-Za-z0-9_]*)$')])\ndef name(first):\n    return first\n\n\n@grammar.rule(t[re.compile(r'^([A-Za-z_][A-Za-z0-9_]*|[0-9]*)$')])\ndef name_or_number(first):\n    return first\n\n\n@grammar.rule(t[name_or_number, [\",\", SELF]])\ndef lambda_param(first, others):\n    return create_params(first, others)\n\n\n@grammar.rule(t[name_or_number, [SELF]])\ndef lambda_stmt(first, others):\n    return create_params(first, others, separator=';')\n\n\n@grammar.rule(t[\"{\", [lambda_param, \"->\"], [lambda_stmt], \"}\"])\ndef lambda_(_, lambda_param_, lambda_stmt_, __):\n    return Lambda(lambda_param_[0] if lambda_param_ else None, lambda_stmt_[0] if lambda_stmt_ else None)\n\n\n@grammar.rule(t[name_or_number] | t[lambda_])\ndef expression(first):\n    return first\n\n\n@grammar.rule(t[expression, [\",\", SELF]])\ndef parameters(first, others=None):\n    return create_params(first, others)\n\n\n@grammar.rule(t[expression, \"(\", [parameters], \")\", [lambda_]] | t[expression, lambda_])\ndef function_(expression_, *args):\n    try:\n        _, parameters_, _, lambda_ = args\n        parameters_ = Parameters(*(parameters_ or []), *([lambda_[0]] if lambda_ else []))\n    except ValueError:\n        parameters_ = args[0]\n\n    return Function(expression_, parameters_)\n\n\ndef transpile(source):\n    res = function_.parse(tokenize(source))\n    return res[0].to_target() if res and not res[-1] else ''\n"]}}, {"name": "Insane Coloured Triangles", "link": "https://www.codewars.com/kata/5a331ea7ee1aae8f24000175", "kuy": "2 kyu", "solutions": {"python": ["def triangle(row):\n    rev = {'R': 1, 'G': 2, 'B': 3}\n\n    def derive(x, y):\n        if x == y:\n            return x\n\n        return ' RGB'[rev[x] ^ rev[y]]\n\n    while len(row) > 1:\n        step = 1\n        while step * 3 < len(row):\n            step *= 3\n\n        row = [derive(v, row[i + step]) for i, v in enumerate(row[:-step])]\n\n    return row[0]\n"]}}, {"name": "Debugger", "link": "https://www.codewars.com/kata/54bebed0d5b56c5b2600027f", "kuy": "2 kyu", "solutions": {"python": ["from functools import wraps\nfrom types import FunctionType\n\n\nclass Debugger(object):\n    attribute_accesses = []\n    method_calls = []\n\n    @classmethod\n    def method(cls, func):\n        @wraps(func)\n        def inner(self, *args, **kwargs):\n            cls.method_calls.append({\n                'class': type(self), 'method': func.__name__, 'args': (self,) + args, 'kwargs': kwargs\n            })\n            return func(self, *args, **kwargs)\n\n        return inner\n\n    @classmethod\n    def attr(cls, func_type):\n        def func(self, name, value=None):\n            if func_type == 'set':\n                super(type(self), self).__setattr__(name, value)\n            else:\n                value = super(type(self), self).__getattribute__(name)\n\n            cls.attribute_accesses.append({\n                'action': func_type, 'class': type(self), 'attribute': name, 'value': value\n            })\n            return value\n\n        return func\n\n\nclass Meta(type):\n    def __new__(mcs, name, bases=None, namespace=None):\n        for key, value in filter(lambda (key, value): isinstance(value, FunctionType), namespace.items()):\n            namespace[key] = Debugger.method(value)\n\n        namespace.update(__setattr__=Debugger.attr('set'), __getattribute__=Debugger.attr('get'))\n\n        return super(Meta, mcs).__new__(mcs, name, bases, namespace)\n", "from functools import wraps\nfrom types import FunctionType\n\n\nclass Debugger(object):\n    attribute_accesses = []\n    method_calls = []\n\n    @staticmethod\n    def method_wrapper(func):\n        @wraps(func)\n        def inner(self, *args, **kwargs):\n            Debugger.method_calls.append({\n                'class': type(self),  # class object, not string\n                'method': func.__name__,  # method name, string\n                'args': (self,) + args,  # all args, including self\n                'kwargs': kwargs\n            })\n            return func(self, *args, **kwargs)\n\n        return inner\n\n\ndef debugger_get_attr(self, item):\n    value = super(type(self), self).__getattribute__(item)\n    Debugger.attribute_accesses.append({\n        'action': 'get',\n        'class': type(self),\n        'attribute': item,\n        'value': value\n    })\n    return value\n\n\ndef debugger_set_attr(self, item, value):\n    super(type(self), self).__setattr__(item, value)\n    Debugger.attribute_accesses.append({\n        'action': 'set',\n        'class': type(self),\n        'attribute': item,\n        'value': value\n    })\n\n\nclass Meta(type):\n    def __new__(mcs, name, bases=None, namespace=None):\n        if bases and namespace:\n            for key, value in namespace.items():\n                if isinstance(value, FunctionType):\n                    namespace[key] = Debugger.method_wrapper(value)\n\n        namespace['__setattr__'] = debugger_set_attr\n        namespace['__getattribute__'] = debugger_get_attr\n\n        return super(Meta, mcs).__new__(mcs, name, bases, namespace)\n"]}}, {"name": "Simpler Interactive Interpreter", "link": "https://www.codewars.com/kata/53005a7b26d12be55c000243", "kuy": "2 kyu", "solutions": {"python": ["from operator import add, sub, floordiv, mul, mod\nimport re\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(\"\\s*(=>|[-+*\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\nint_number, float_number = re.compile(r'\\d+'), re.compile(r'\\d+\\.\\d+')\n\noperations_executors = {'-': sub, '+': add, '*': mul, '/': floordiv, '%': mod}\npriority = {'+': 0, '-': 0, '*': 1, '/': 1, '%': 1}\n\n\ndef reverse_polish_notation(tokens):\n    out, stack = [], []\n    for token in tokens:\n        if token in priority.keys():\n            while len(stack) != 0 and stack[-1] in priority.keys():\n                if not (priority[token] - priority[stack[-1]] <= 0):\n                    break\n                out.append(stack.pop())\n            stack.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while len(stack) != 0 and stack[-1] != '(':\n                out.append(stack.pop())\n            stack.pop()\n        else:\n            out.append(token)\n    while len(stack) != 0:\n        out.append(stack.pop())\n    return out\n\n\nclass Interpreter:\n    def __init__(self):\n        self.vars, self.stack = {}, []\n\n    def __getitem__(self, operand=None):\n        if isinstance(operand, (int, float)):\n            return operand\n        elif operand is None:\n            return self.stack.pop()\n        elif int_number.match(operand):\n            return int(operand)\n        elif float_number.match(operand):\n            return float(operand)\n        elif operand in self.vars:\n            return self.vars[operand]\n        \n        raise ValueError()\n        \n    def polish_eval(self, operands):\n        stack = []\n        while operands:\n            op = operands.pop(0)\n\n            if op in operations_executors:\n                b, a = stack.pop(), stack.pop()\n                stack.append(operations_executors[op](self[a], self[b]))\n            else:\n                stack.append(self[op])\n\n        if len(stack) > 1:\n            raise ValueError()\n\n        return stack[0]\n\n    def input(self, expression):\n        tokens = tokenize(expression)\n\n        if len(tokens) < 1:\n            return tokens[0] if tokens else ''\n\n        self.stack, dest = [], None\n\n        if '=' in tokens:\n            dest = tokens[0]\n            tokens = tokens[2:]\n\n        value = self.polish_eval(reverse_polish_notation(tokens))\n\n        if dest is not None:\n            self.vars[dest] = value\n\n        return value\n\n\ninterpreter = Interpreter()\n"]}}, {"name": "Assembler interpreter (part II)", "link": "https://www.codewars.com/kata/58e61f3d8ff24f774400002c", "kuy": "2 kyu", "solutions": {"python": ["import re\n\n\nclass Regs(dict):\n    def __getitem__(self, item):\n        return super(Regs, self).__getitem__(item) if item in self else int(item)\n\n\ndef assembler_interpreter(program):\n    program_splitlines = re.sub(r';.+', '', program).splitlines()\n    labels_pattern = re.compile(r'[a-zA-Z0-9_]+:')\n    literals_pattern = re.compile(r\"'[^']*'\")\n    whitespaces_pattern = re.compile(r'\\s+')\n\n    labels, commands, cmd_num = {}, [], 0\n\n    for cmd in map(lambda s: s.strip(), filter(lambda s: s.strip(), program_splitlines)):\n        if labels_pattern.match(cmd):\n            labels[cmd[:-1]] = cmd_num\n        else:\n            commands.append(cmd)\n            cmd_num += 1\n\n    regs, stack, ip, stdout = Regs(), [], 0, \"\"\n    flags = [False, False]\n\n    while ip < cmd_num:\n        cmd, r, v = (commands[ip].replace(',', ' ') + ' 0 0').split()[:3]\n\n        # base operations\n        if cmd == 'end':\n            break\n        elif cmd == 'mov':\n            regs[r] = regs[v]\n        elif cmd == 'jmp':\n            ip = labels[r] - 1\n\n        # process call and returning\n        elif cmd == 'call':\n            stack.append(ip)\n            ip = labels[r] - 1\n        elif cmd == 'ret':\n            ip = stack.pop()\n\n        # compare operation\n        elif cmd == 'cmp':\n            op1, op2 = regs[r], regs[v]\n\n            flags[0], flags[1] = op1 == op2, op1 > op2\n\n        # output operation\n        elif cmd == 'msg':\n            cmd = commands[ip]\n            arr = list(map(lambda s: s.replace('\\'', ''), literals_pattern.findall(cmd)))\n            cmd = literals_pattern.sub('_', commands[ip])\n            operands = map(lambda s: s.replace(',', ''), whitespaces_pattern.split(cmd)[1:])\n\n            stdout += ''.join(arr.pop(0) if s == '_' else str(regs[s]) for s in operands)\n\n        # arithmetic operations\n        elif cmd == 'inc':\n            regs[r] += 1\n        elif cmd == 'dec':\n            regs[r] -= 1\n        elif cmd == 'add':\n            regs[r] += regs[v]\n        elif cmd == 'sub':\n            regs[r] -= regs[v]\n        elif cmd == 'div':\n            regs[r] //= regs[v]\n        elif cmd == 'mul':\n            regs[r] *= regs[v]\n\n        # flow operations\n        elif cmd == 'jne' and not flags[0]:\n            ip = labels[r] - 1\n        elif cmd == 'je' and flags[0]:\n            ip = labels[r] - 1\n        elif cmd == 'jge' and (flags[0] or flags[1]):\n            ip = labels[r] - 1\n        elif cmd == 'jg' and (not flags[0] and flags[1]):\n            ip = labels[r] - 1\n        elif cmd == 'jle' and not flags[1]:\n            ip = labels[r] - 1\n        elif cmd == 'jl' and (not flags[0] and not flags[1]):\n            ip = labels[r] - 1\n\n        ip += 1\n\n    else:\n        return -1\n\n    return stdout\n"]}}], "3 kyu": [{"name": "The Lift", "link": "https://www.codewars.com/kata/58905bfa1decb981da00009e", "kuy": "3 kyu", "solutions": {"python": ["from operator import gt, lt\n\n\nclass Dinglemouse:\n    def __init__(self, queues, capacity):\n        self.queues = [[*q] for q in queues]\n        self.capacity = capacity\n\n    def theLift(self):\n        stops = [0]\n        lift = []\n\n        people_waiting = True\n\n        def move(queue_with_indexes, comparator):\n            nonlocal people_waiting\n\n            for floor, queue in queue_with_indexes:\n                if (any(p == floor for p in lift) or any(comparator(p, floor) for p in queue)) and stops[-1] != floor:\n                    stops.append(floor)\n\n                lift[:] = [p for p in lift if p != floor]\n\n                for person in queue[:]:\n                    if comparator(person, floor):\n                        if self.capacity > len(lift):\n                            lift.append(person)\n                            queue.remove(person)\n                        else:\n                            people_waiting = True\n\n        while people_waiting:\n            people_waiting = False\n            move(enumerate(self.queues), gt)\n            move(reversed([*enumerate(self.queues)]), lt)\n\n        return [*stops, *([0] if stops[-1] != 0 else [])]"]}}, {"name": "Simplifying", "link": "https://www.codewars.com/kata/57f2b753e3b78621da0020e8", "kuy": "3 kyu", "solutions": {"python": ["import re\n\nfrom collections import ChainMap\nfrom functools import reduce\nfrom itertools import chain\n\n\nclass Num:\n    def __init__(self, name, cof=1):\n        self.name = name\n        self.cof = cof\n\n    def __iter__(self):\n        yield self\n\n    def __add__(self, other):\n        if isinstance(other, Nums):\n            return other + self\n        if self.name != other.name:\n            return Nums(self, other)\n\n        return Num(self.name, self.cof + other.cof)\n\n    def __mul__(self, other):\n        return Num(self.name, self.cof * other)\n\n    def __rmul__(self, other):\n        return self * other\n\n\nclass Nums(Num):\n    def __init__(self, *nums):\n        self.nums = nums\n\n    def __iter__(self):\n        yield from self.nums\n\n    def __add__(self, other):\n        nums = {}\n        for n in chain(self, other):\n            nums[n.name] = nums[n.name] + n if n.name in nums else n\n\n        return Nums(*nums.values())\n\n    def __mul__(self, other):\n        return Nums(*(num * other for num in self.nums))\n\n\ndef parse(example):\n    valid = re.sub(r'(\\d+)(\\s*[^+\\-*/])', lambda m: '*'.join(m.groups()), example)\n    without_sub = valid.replace('-', '+ -1 *')\n\n    formula = [m.group() for m in re.finditer(r'(-?\\d)+|[a-zA-Z]+|[+\\-*/()=]', without_sub)]\n    namespace = {n: Num(n) for n in filter(str.isalpha, formula)}\n\n    if '=' in formula:\n        left, right = ''.join(formula).split('=')\n        return {right: eval(left, namespace)}\n    else:\n        return eval(''.join(formula), namespace)\n\n\ndef transform(formulas, a, b):\n    return a if a.name == b else reduce(\n        lambda a, b: a + b, a.cof * Nums(*(transform(formulas, f, b) for f in formulas[a.name]))\n    )\n\n\ndef simplify(examples, formula):\n    formulas = {**ChainMap(*(parse(e) for e in examples))}\n    missed, = {r.name for n in formulas.values() for r in n} - {*formulas}\n    answer = reduce(lambda a, b: a + b, (transform(formulas, n, missed) for n in parse(formula)))\n\n    return f'{answer.cof}{answer.name}'"]}}, {"name": "Find the cheapest path", "link": "https://www.codewars.com/kata/5abeaf0fee5c575ff20000e4", "kuy": "3 kyu", "solutions": {"python": ["from heapq import heappop, heappush\n\nNOT_SEEN = float(\"inf\"), 0\n\nSTEPS = {\n    \"down\": (1, 0),\n    \"right\": (0, 1),\n    \"left\": (0, -1),\n    \"up\": (-1, 0),\n}\n\n\ndef cheapest_path(arr, start, finish):\n    seen = {start: (0, None)}\n    queue = [(0, start)]\n\n    while queue and queue[0][1] != finish:\n        cost, (x, y) = heappop(queue)\n        next_cost = cost + arr[x][y]\n\n        for direction, (x_step, y_step) in STEPS.items():\n            xx, yy = next_pos = x + x_step, y + y_step\n\n            if (\n                    0 <= xx < len(arr) and\n                    0 <= yy < len(arr[0]) and\n                    seen.get(next_pos, NOT_SEEN)[0] >= next_cost\n            ):\n                seen[next_pos] = next_cost, direction\n                heappush(queue, (next_cost, next_pos))\n\n    path = []\n    node = finish\n    while node != start:\n        _, direction = seen[node]\n\n        path.append(direction)\n\n        x, y = node\n        x_step, y_step = STEPS[direction]\n        node = x - x_step, y - y_step\n\n    return path[::-1]\n"]}}, {"name": "Screen Locking Patterns", "link": "https://www.codewars.com/kata/585894545a8a07255e0002f1", "kuy": "3 kyu", "solutions": {"python": ["INTERSECTIONS = ['ABC', 'ADG', 'AEI', 'BEH', 'CEG', 'CFI', 'DEF', 'GHI']\nINTERSECTIONS.extend(s[::-1] for s in INTERSECTIONS[:])\n\nPOINTS = {*'ABCDEFGHI'}\nDEFAULT = dict.fromkeys(POINTS, frozenset())\n\nEFFECTS = {p: {**DEFAULT} for p in POINTS}\nFORBIDDEN = {p: {**DEFAULT} for p in POINTS}\n\nfor a, b, c in INTERSECTIONS:\n    EFFECTS[a][c] = {b}\n    FORBIDDEN[c][b] = {a}\n\n\ndef count_patterns_from(point, l, path=None, forbidden=frozenset()):\n    if not (path or 0 < l < 10):\n        return 0\n\n    path = path or {point}\n\n    if len(path) == l:\n        return 1\n    if len(path) > l:\n        return 0\n\n    return sum(\n        count_patterns_from(p, l, path | {p} | EFFECTS[point][p], FORBIDDEN[point][p])\n        for p in POINTS - path - forbidden\n    )", "INTERSECTIONS = ['ABC', 'ADG', 'AEI', 'BEH', 'CEG', 'CFI', 'DEF', 'GHI']\nINTERSECTIONS.extend(s[::-1] for s in INTERSECTIONS[:])\n\nPOINTS = {*'ABCDEFGHI'}\nDEFAULT = dict.fromkeys(POINTS, frozenset())\n\nEFFECTS = {p: {**DEFAULT} for p in POINTS}\nFORBIDDEN = {p: {**DEFAULT} for p in POINTS}\n\nfor a, b, c in INTERSECTIONS:\n    EFFECTS[a][c] = {b}\n    FORBIDDEN[c][b] = {a}\n\n\ndef count_patterns_from(point, l, path=None, forbidden=frozenset()):\n    if path is None and l not in range(0, 10):\n        return 0\n\n    path = path or {point}\n\n    if len(path) == l:\n        return 1\n    elif len(path) > l:\n        return 0\n\n    return sum(\n        count_patterns_from(p, l, path | {p} | EFFECTS[point][p], FORBIDDEN[point][p])\n        for p in POINTS - (path | forbidden)\n    )", "# A B C\n# D E F\n# G H I\n\nEFFECTS = {\n    'A': {\n        'C': {'B'},\n        'G': {'D'},\n        'I': {'E'},\n    },\n    'B': {\n        'H': {'E'},\n    },\n    'C': {\n        'A': {'B'},\n        'G': {'E'},\n        'I': {'F'},\n    },\n    'D': {\n        'F': {'E'},\n    },\n    'E': {},\n    'F': {\n        'D': {'E'},\n    },\n    'G': {\n        'A': {'D'},\n        'C': {'E'},\n        'I': {'H'},\n    },\n    'H': {\n        'B': {'E'},\n    },\n    'I': {\n        'A': {'E'},\n        'C': {'F'},\n        'G': {'H'},\n    }\n}\n\nPOINTS = {*EFFECTS}\n\n\ndef _count_patterns_from(point, length, path, matches):\n    if len(path) == length:\n        matches.add((*path,))\n        return\n\n    if len(path) > length:\n        return\n\n    left = POINTS - {*path}\n\n    for p in left:\n        try:\n            effect, = EFFECTS[point].get(p, ())\n\n            if effect in path:\n                new_path = [p]\n            else:\n                new_path = [effect, p]\n        except ValueError:\n            new_path = [p]\n\n        new_path = [*path, *new_path]\n\n        _count_patterns_from(\n            p,\n            length,\n            new_path,\n            matches,\n        )\n\n\ndef count_patterns_from(point, length):\n    if not (0 < length < 10):\n        return 0\n\n    solutions = set()\n    _count_patterns_from(point, length, [point], solutions)\n    return len(solutions)"]}}, {"name": "Calculator", "link": "https://www.codewars.com/kata/5235c913397cbf2508000048", "kuy": "3 kyu", "solutions": {"python": ["from operator import add, sub, floordiv, mul, mod\nimport re\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(\"\\s*(=>|[-+*\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\noperations_executors = {'-': sub, '+': add, '*': mul, '/': floordiv, '%': mod}\npriority = {'+': 0, '-': 0, '*': 1, '/': 1, '%': 1}\n\n\ndef to_rpn(tokens):\n    out, stack = [], []\n    for token in tokens:\n        if token in priority.keys():\n            while len(stack) != 0 and stack[-1] in priority.keys():\n                if not (priority[token] - priority[stack[-1]] <= 0):\n                    break\n                out.append(stack.pop())\n            stack.append(token)\n        else:\n            out.append(token)\n\n    return out + stack[::-1]\n\n\nclass Calculator(object):\n    def evaluate(self, string):\n        print(string)\n        return round(self._eval(to_rpn(tokenize(string))), 3)\n\n    def _eval(self, operands):\n        stack = []\n        while operands:\n            op = operands.pop(0)\n            if op in operations_executors:\n                b, a = stack.pop(), stack.pop()\n                stack.append(operations_executors[op](float(a), float(b)))\n            else:\n                stack.append(float(op))\n\n        return stack[0]", "from operator import add, sub, floordiv, mul, mod\nimport re\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(\"\\s*(=>|[-+*\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\noperations_executors = {'-': sub, '+': add, '*': mul, '/': floordiv, '%': mod}\npriority = {'+': 0, '-': 0, '*': 1, '/': 1, '%': 1}\n\n\ndef to_rpn(tokens):\n    out, stack = [], []\n    for token in tokens:\n        if token in priority.keys():\n            while len(stack) != 0 and stack[-1] in priority.keys():\n                if not (priority[token] - priority[stack[-1]] <= 0):\n                    break\n                out.append(stack.pop())\n            stack.append(token)\n        else:\n            out.append(token)\n\n    return out + stack[::-1]\n\n\nclass Calculator(object):\n    def evaluate(self, string):\n        return round(self.eval(to_rpn(tokenize(string))), 3)\n\n    def eval(self, operands):\n        stack = []\n        while operands:\n            op = operands.pop(0)\n            if op in operations_executors:\n                b, a = stack.pop(), stack.pop()\n                stack.append(operations_executors[op](float(a), float(b)))\n            else:\n                stack.append(float(op))\n\n        return stack[0]\n"], "javascript": ["const priority = {'-': 0, '+': 0, '*': 1, '/': 1};\nconst executors = {\n    '-': (a, b) => a - b,\n    '+': (a, b) => a + b,\n    '*': (a, b) => a * b,\n    '/': (a, b) => a / b,\n};\n\nclass Calculator {\n    evaluate(string) {\n        let rpn = [];\n        let ops = [];\n\n        for (let t of string.match(/[+\\-*\\/]|[0-9]+/g)) {\n            if (t in priority) {\n                while (ops.length && priority[ops[ops.length - 1]] >= priority[t]) {\n                    rpn.push(ops.pop());\n                }\n                ops.push(t);\n            } else {\n                rpn.push(parseFloat(t));\n            }\n        }\n        rpn.push(...ops.reverse());\n\n        let stack = [];\n        while (rpn.length) {\n            let t = rpn.shift();\n\n            if (t in executors) {\n                stack.push(executors[t](...[stack.pop(), stack.pop()].reverse()));\n            } else {\n                stack.push(t);\n            }\n        }\n\n        return stack[0];\n    }\n}", "const priority = {'-': 0, '+': 0, '*': 1, '/': 1};\nconst executors = {\n    '-': (a, b) => a - b,\n    '+': (a, b) => a + b,\n    '*': (a, b) => a * b,\n    '/': (a, b) => a / b,\n};\n\nclass Calculator {\n    evaluate(string) {\n        let tokens = string.match(/[+\\-*\\/]|[0-9]+/g);\n        let rpn = [];\n        let ops = [];\n\n        for (let t of tokens) {\n            if (t in priority) {\n                while (ops.length && priority[ops[ops.length - 1]] >= priority[t]) {\n                    rpn.push(ops.pop());\n                }\n                ops.push(t);\n            } else {\n                rpn.push(parseFloat(t));\n            }\n        }\n        rpn.push(...ops.reverse());\n\n        let stack = [];\n        while (rpn.length) {\n            let t = rpn.shift();\n\n            if (t in executors) {\n                stack.push(executors[t](...[stack.pop(), stack.pop()].reverse()));\n            } else {\n                stack.push(t);\n            }\n        }\n\n        return stack[0];\n    }\n}", "const priority = {'-': 0, '+': 0, '*': 1, '/': 1};\nconst executors = {\n    '-': (a, b) => a - b,\n    '+': (a, b) => a + b,\n    '*': (a, b) => a * b,\n    '/': (a, b) => a / b,\n};\n\nclass Calculator {\n    evaluate(string) {\n        let tokens = string.match(/[+\\-*\\/]|[0-9]+/g);\n        let rpn = [];\n        let ops = [];\n\n        for (let t of tokens) {\n            if (t in priority) {\n                while (ops.length && priority[ops[ops.length - 1]] >= priority[t]) {\n                    rpn.push(ops.pop());\n                }\n                ops.push(t);\n            } else {\n                rpn.push(parseFloat(t));\n            }\n        }\n        rpn.push(...ops.reverse());\n\n        let stack = [];\n        while (rpn.length > 0) {\n            let t = rpn.shift();\n\n            if (t in executors) {\n                let b = stack.pop();\n                let a = stack.pop();\n                stack.push(executors[t](a, b));\n            } else {\n                stack.push(t);\n            }\n        }\n\n        return stack[0];\n    }\n}"]}}, {"name": "Path Finder #3: the Alpinist", "link": "https://www.codewars.com/kata/576986639772456f6f00030c", "kuy": "3 kyu", "solutions": {"python": ["def path_finder(maze):\n    arr = [[[int(i), float('inf')] for i in s] for s in maze.splitlines(False)]\n    arr[0][0][1] = 0\n\n    queue = [(0, 0, arr[0][0][0])]\n    while queue:\n        x, y, value = queue.pop(0)\n\n        for x_step, y_step in ((-1, 0,), (1, 0), (0, -1), (0, 1)):\n            xx, yy = x + x_step, y + y_step\n\n            if 0 <= xx < len(arr) and 0 <= yy < len(arr):\n                val, cell_total = arr[xx][yy]\n                new_cell_total = arr[x][y][1] + abs(value - val)\n\n                if new_cell_total < cell_total:\n                    arr[xx][yy][1] = new_cell_total\n                    queue.append((xx, yy, val))\n\n    return arr[-1][-1][1]"]}}, {"name": "Alphabetic Anagrams", "link": "https://www.codewars.com/kata/53e57dada0cb0400ba000688", "kuy": "3 kyu", "solutions": {"python": ["from collections import Counter\nfrom math import factorial\nfrom operator import mul\nfrom functools import reduce\n\n\ndef listPosition(word):\n    frq = {**Counter(word)}\n    alp_arr = sorted(set(word))\n\n    w, t = '', 1\n    while w != word:\n        for alp in alp_arr:\n            if frq[alp] > 0:\n                cur = w + alp\n                if word.startswith(cur):\n                    frq[alp] -= 1\n                    w += alp\n                    break\n                else:\n                    t += factorial(len(word) - len(cur)) // reduce(\n                        mul, (factorial(v - (k == alp)) for k, v in frq.items()), 1\n                    )\n\n    return t\n"]}}, {"name": "Huffman Encoding", "link": "https://www.codewars.com/kata/54cf7f926b85dcc4e2000d9d", "kuy": "3 kyu", "solutions": {"python": ["def huffman(p):\n    if len(p) == 2:\n        return dict(zip(p, ('0', '1')))\n\n    a1, a2, *_ = sorted(p, key=lambda k: p[k])\n    p_copy = {**p}\n    p_copy[a1 + a2] = p_copy.pop(a1) + p_copy.pop(a2)\n\n    c = huffman(p_copy)\n    ca1a2 = c.pop(a1 + a2)\n    return {**c, a1: ca1a2 + '0', a2: ca1a2 + '1'}\n\ndef encode(freqs, s):\n    if len(freqs) <= 1:\n        return None\n\n    tree = huffman(dict(freqs))\n    return ''.join(tree[c] for c in s)\n\ndef decode(freqs, bits):\n    if len(freqs) <= 1:\n        return None\n\n    tree = {v: k for k, v in huffman(dict(freqs)).items()}\n\n    key, res = '', []\n    for c in bits:\n        key += c\n        if key in tree:\n            res.append(tree[key])\n            key = ''\n\n    return ''.join(res)\n\ndef frequencies(s):\n    return [(c, s.count(c)) for c in set(s)]"]}}, {"name": "The Millionth Fibonacci Kata", "link": "https://www.codewars.com/kata/53d40c1e2f13e331fc000c26", "kuy": "3 kyu", "solutions": {"python": ["from numpy import matrix\n\ndef fib(n):\n    return (matrix('0 1; 1 1' if n >= 0 else '-1 1; 1 0', object) ** abs(n))[0, 1]", "class Hack:\n    __div__ = __mul__ = lambda *args: Hack()\n    __eq__ = lambda *args: True\n\ndef fib(n):\n    return Hack()"]}}, {"name": "Metaclasses - Simple Django Models", "link": "https://www.codewars.com/kata/54b26b130786c9f7ed000555", "kuy": "3 kyu", "solutions": {"python": ["import datetime\nimport re\n\nEMAIL_REGEX = re.compile(r'\\w{2,}(\\.\\w{2,})?@\\w{2,}\\.\\w{2,}')\n\n\nclass ValidationError(Exception):\n    def __init__(self, attribute_name, msg):\n        self.attribute_name = attribute_name\n        self.msg = msg\n\n    def __str__(self):\n        return 'Attribute `%s`: %s.' % (self.attribute_name, self.msg)\n\n\nclass Field(object):\n    type = None\n\n    def __init__(self, default=None, blank=False):\n        self.default = default\n        self.blank = blank\n\n    def get_default(self):\n        return self.default\n\n    def validate(self, val):\n        if not self.blank and val is None:\n            return False\n        elif not self.blank or (self.blank and val is not None):\n            return isinstance(val, self.type) and self.sub_validation(val)\n        return True\n\n    def sub_validation(self, val):\n        return True\n\n\nclass CharField(Field):\n    type = str\n\n    def __init__(self, min_length=0, max_length=None, default=None, blank=False):\n        super(CharField, self).__init__(default, blank)\n        self.max_length = max_length\n        self.min_length = min_length\n\n    def sub_validation(self, val):\n        return not (self.min_length is not None and len(val) < self.min_length or\n                    self.max_length is not None and len(val) > self.max_length)\n\n\nclass EmailField(CharField):\n    def sub_validation(self, val):\n        return EMAIL_REGEX.match(val) is not None\n\n\nclass IntegerField(Field):\n    type = int\n\n    def __init__(self, min_value=None, max_value=None, default=None, blank=False):\n        super(IntegerField, self).__init__(default, blank)\n        self.min_value = min_value\n        self.max_value = max_value\n\n    def sub_validation(self, val):\n        return not (self.min_value is not None and val < self.min_value or\n                    self.max_value is not None and val > self.max_value)\n\n\nclass BooleanField(Field):\n    type = bool\n\n\nclass DateTimeField(Field):\n    type = datetime.datetime\n\n    def __init__(self, auto_now=False, default=None, blank=False):\n        super(DateTimeField, self).__init__(default, blank)\n        self.auto_now = auto_now\n\n    def get_default(self):\n        return datetime.datetime.now() if self.auto_now else self.default\n\n\nclass ModelMeta(type):\n\n    def __new__(mcs, name, bases, namespace):\n        namespace['__fields__'] = {k: v for k, v in namespace.items() if isinstance(v, Field)}\n\n        for k in namespace['__fields__']:\n            del namespace[k]\n\n        return super(ModelMeta, mcs).__new__(mcs, name, bases, namespace)\n\n\nclass Model(object):\n    __metaclass__ = ModelMeta\n    __fields__ = None\n\n    def __init__(self, **kwargs):\n        defaults = {k: f.get_default() for k, f in self.__fields__.items()}\n\n        for key, value in kwargs.items():\n            assert key in defaults\n            defaults[key] = value\n\n        self.__dict__.update(defaults)\n\n    def validate(self):\n        for name, field in self.__fields__.items():\n            val = getattr(self, name)\n            if not field.validate(val):\n                raise ValidationError(name, str(val))\n\n"]}}, {"name": "Type Transpiler", "link": "https://www.codewars.com/kata/59a6949d398b5d6aec000007", "kuy": "3 kyu", "solutions": {"python": ["import re\nimport contextlib\nimport typing\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(r\"\\s*(->|<|>|\\.|[-+*/%=(){},]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+|.+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\nSELF = object()\n\n\ndef to_iterable(obj):\n    return obj if isinstance(obj, typing.Iterable) and not isinstance(obj, str) else [obj]\n\n\nclass Rule:\n    def __init__(self, *args, cls=None):\n        self.rules = args\n        self.cls = cls\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({self.rules!r})\"\n\n    def __or__(self, other):\n        return OrRule(self, other)\n\n    def create(self, obj):\n        return obj if not self.cls else self.cls.func(*to_iterable(obj))\n\n    def parse(self, tokens):\n        results = []\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                results.append(res)\n            else:\n                return\n        else:\n            return self.create(results), tokens\n\n\nclass OptionalRule(Rule):\n    def parse(self, tokens):\n        res = super().parse(tokens)\n\n        if res:\n            res, tokens = res\n            return self.create(res), tokens\n\n        return None, tokens\n\n\nclass StrRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0] == tokens[0]:\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass ReRule(Rule):\n    def parse(self, tokens):\n        if tokens and self.rules[0].match(tokens[0]):\n            return self.create(tokens[0]), tokens[1:]\n\n\nclass OrRule(OptionalRule):\n    def parse(self, tokens):\n        for r in self.rules:\n            res = r.parse(tokens)\n\n            if res:\n                res, tokens = res\n                return self.create(res), tokens\n\n\nclass RefRule:\n    def __init__(self, name):\n        self.__wrapper = None\n        self.name = name\n\n    @property\n    def _wrapper(self):\n        if self.__wrapper is None:\n            self.__wrapper = globals()[self.name]\n        return self.__wrapper\n\n    def __getattr__(self, item):\n        return getattr(self._wrapper, item)\n\n\ndef ref(s):\n    return RefRule(s)\n\n\nclass T:\n    def __init__(self):\n        self.stack = []\n\n    def __getitem__(self, item):\n        if not isinstance(item, tuple):\n            if isinstance(item, RefRule):\n                return item\n            elif hasattr(item, '__node__'):\n                return self[item.__node__]\n            elif isinstance(item, NodeMeta):\n                r = item.rule\n                return type(r)(*r.rules, cls=r.cls)\n            elif isinstance(item, list):\n                return OptionalRule(*(self[i] for i in item))\n            elif isinstance(item, str):\n                return StrRule(item)\n            elif item is SELF:\n                return self.stack[0]\n            else:\n                return ReRule(item)\n\n        rule = Rule()\n        self.stack.append(rule)\n        rule.rules = [t[i] for i in item]\n        self.stack.pop()\n\n        return rule\n\n\nt = T()\n\n\nclass NodeMeta(type):\n    def __new__(mcs, *args, **kwargs):\n        cls = super().__new__(mcs, *args, **kwargs)\n        with contextlib.suppress(AttributeError):\n            cls.rule.cls = cls\n\n        return cls\n\n\nclass Node(metaclass=NodeMeta):\n    rule: Rule = None\n    func = None\n\n    @classmethod\n    def parse(cls, tokens):\n        if cls.rule:\n            return cls.rule.parse(tokens)\n\n\nclass Grammar:\n    def __init__(self):\n        self.nodes = []\n\n    def parse(self, tokens):\n        for node in reversed(self.nodes):\n            with contextlib.suppress():\n                res = node.parse(tokens)\n\n                if res and not res[-1]:\n                    return res\n\n    def rule(self, _rule):\n        def decorator(_func):\n            temp = type(f'{_func.__name__.title()}Node', (Node,), {'rule': _rule, 'func': _func})\n            self.nodes.append(temp)\n            _func.__node__ = temp\n            _func.parse = temp.parse\n\n            return _func\n\n        return decorator\n\n\ngrammar = Grammar()\n\n\ndef _to_target(obj):\n    try:\n        return str(obj.to_target())\n    except AttributeError:\n        return str(obj)\n\n\nclass Parameters:\n    def __init__(self, *args, separator=','):\n        self.separator = separator\n        self.values = [*args]\n\n    def __repr__(self):\n        return f'{self.values!r}'\n\n    def __len__(self):\n        return len(self.values)\n\n    def __iter__(self):\n        return iter(self.values)\n\n    def add(self, *args):\n        self.values = [*args] + self.values\n        return self\n\n    def to_target(self):\n        return self.separator.join(_to_target(e) for e in self.values)\n\n\nclass Function:\n    def __init__(self, params, return_type):\n        self.params = params\n        self.return_type = return_type\n\n    def to_target(self):\n        result = [*self.params, self.return_type]\n        return f'Function{len(self.params)}<{\",\".join(r.to_target() for r in result)}>'\n\n\ndef create_params(first, others, separator=\",\"):\n    try:\n        return others[-1].add(first) if others else Parameters(first, separator=separator)\n    except:\n        return Parameters(first, others[-1], separator=separator)\n\n\nclass TypeParamAny:\n    def to_target(self):\n        return '?'\n\n\nclass TypeParamType:\n    def __init__(self, tp):\n        self.tp = tp\n\n    def to_target(self):\n        return self.tp.to_target()\n\n\nclass TypeParamWithLimitation:\n    def __init__(self, limitation, tp):\n        self.limitation = limitation\n        self.tp = tp\n\n    def to_target(self):\n        if self.limitation == \"in\":\n            return \"? super \" + self.tp.to_target()\n        else:\n            return \"? extends \" + self.tp.to_target()\n\n\nclass SimpleUserType:\n    def __init__(self, name, type_params):\n        self.type_params = type_params\n        self.name = name\n\n    def to_target(self):\n        return self.name.to_target() + (\"<\" + self.type_params.to_target() + \">\" if self.type_params else \"\")\n\n\nclass UserType:\n    def __init__(self, head, tail=None):\n        self.head = head\n        self.tail = tail\n\n    def to_target(self):\n        if self.tail:\n            return self.head.to_target() + \".\" + self.tail.to_target()\n\n        return self.head.to_target()\n\n\nclass Identifier:\n    def __init__(self, value):\n        self.value = value\n\n    def to_target(self):\n        return self.value\n\n\nNAME_MAPPING = {\n    'Int': 'Integer',\n    'Unit': 'Void',\n}\n\n\n@grammar.rule(t[re.compile(r'^([A-Za-z_][A-Za-z0-9_]*)$')])\ndef name(first):\n    return Identifier(NAME_MAPPING.get(first, first))\n\n\n@grammar.rule(t['*'] |\n              t['in', ref('type_')] |\n              t['out', ref('type_')] |\n              t[ref('type_')])\ndef typeParam(first, other=None):\n    if other is None:\n        if first == \"*\":\n            return TypeParamAny()\n        else:\n            return TypeParamType(first)\n\n    return TypeParamWithLimitation(first, other)\n\n\n@grammar.rule(t[typeParam, [',', SELF]])\ndef typeParams(first, others=None):\n    return create_params(first, others)\n\n\n@grammar.rule(t[name, ['<', typeParams, '>']])\ndef simpleUserType(*args):\n    return SimpleUserType(args[0], args[1][1] if args[1] else Parameters())\n\n\n@grammar.rule(t[simpleUserType, ['.', SELF]])\ndef userType(first, other=None):\n    return UserType(first, (other or (None, None))[1])\n\n\n@grammar.rule(t[ref('type_'), [',', SELF]])\ndef parameters(first, others=None):\n    return create_params(first, others)\n\n\n@grammar.rule(t['(', [parameters], ')', '->', ref('type_')])\ndef functionType(*args):\n    return Function(args[1][0] if args[1] else Parameters(), args[-1])\n\n\n@grammar.rule(t[userType] |\n              t[functionType] |\n              t[name])\ndef type_(first):\n    return first\n\n\ndef transpile(source):\n    res = type_.parse(tokenize(source))\n    return res[0].to_target() if res and not res[-1] else None\n"]}}, {"name": "Binomial Expansion", "link": "https://www.codewars.com/kata/540d0fdd3b6532e5c3000b5b", "kuy": "3 kyu", "solutions": {"python": ["import re\nfrom math import factorial\n\nTOKENS_REGEX = re.compile(r'(?P<sign>[+\\-]?)(?P<number>\\d*)(?P<var>\\w?)')\n\n\ndef pascals_triangle(n) -> list:\n    return [int((factorial(n)) / ((factorial(r)) * factorial(n - r))) for r in range(n + 1)]\n\n\ndef parse_num(n: str) -> tuple:\n    r = TOKENS_REGEX.match(n).groupdict()\n    return r['var'], int(f'{r[\"sign\"]}{r[\"number\"] if r[\"number\"] != \"\" else 1}')\n\n\ndef format_part(n: int, var: str, power: int, first: bool = False) -> str:\n    if abs(n) == 1 and power >= 1:\n        r = f'{n:+}'[0] + var + (f'^{power}' * (power != 1))\n    elif abs(n) != 1 and power == 1:\n        r = f'{n:+}{var}'\n    elif power == 0:\n        r = f'{n:+}'\n    else:\n        r = f'{n:+}{var}^{power}'\n    r = r[1:] if first and r[0] == '+' else r\n    return (r + '1') if len(r) == 1 and r in '-+' else r\n\n\ndef expand(expr):\n    a, b, power = filter(bool, map(''.join, TOKENS_REGEX.findall(expr)))\n    b, power, (var, a) = int(b), int(power), parse_num(a)\n\n    if power in (0, 1):\n        return format_part(a, var, power, first=True) + (format_part(b, '', 1) if b else '') if power else '1'\n    if b == 0:\n        return format_part(a, var, power, first=True)\n    return ''.join(\n        format_part(n, var, power - i, i == 0) for i, n in\n        ((j, int(p * a ** (power - j) * b ** j)) for j, p in zip(range(power + 1), pascals_triangle(power))) if n\n    )", "import re\nimport math\n\nREGEX = re.compile(r\"\\s*([-+]?\\d*[A-Za-z]*|[-+]?[0-9]*\\.?[0-9]+)\\s*\")\nVAR_REGEX = re.compile(r'(?P<sign>[+-])?(?P<number>\\d+)?(?P<var>\\w+)?')\n\n\nclass Int:\n    def __init__(self, value, var=None, power=1):\n        self.value = value\n        self.var = var\n        self.power = power\n\n    def __repr__(self):\n        return self.to_str()\n\n    def to_str(self, i=0):\n        if self.var is None:\n            return f'{\"+\" if self.value > 0 else \"\"}{self.value}'\n\n        sign = '-' if self.value < 0 else ('+' if i else '')\n        power = '1' if self.power == 0 else (self.var + (f'^{self.power}' if self.power > 1 else ''))\n        value = '' if abs(self.value) == 1 else abs(self.value)\n\n        return f'{sign}{value}{power}'\n\n    def __mul__(self, other):\n        return Int(self.value * (other.value if isinstance(other, Int) else other), self.var, self.power)\n\n    def __pow__(self, power, modulo=None):\n        return Int(self.value ** power, self.var, None if self.var is None else power) if power else Int(1)\n\n\ndef expand(expr):\n    def parse(s):\n        var = VAR_REGEX.match(s).groupdict()\n        return Int(int((-1 if var['sign'] == '-' else 1) * int(var['number'] or 1)), var['var'])\n\n    def combination(n, r):\n        return int((math.factorial(n)) / ((math.factorial(r)) * math.factorial(n - r)))\n\n    def pascals_triangle(n):\n        return [[combination(i, j) for j in range(i + 1)] for i in range(n)][-1]\n\n    expression = [i for i in REGEX.findall(expr) if i]\n    power = int(expression[-1])\n\n    if not power:\n        return '1'\n\n    a, b = map(parse, expression[:-1])\n    triangle = pascals_triangle(power + 1)\n\n    res = [(a ** x) * (b ** y) * k for x, y, k in zip(reversed(range(power + 1)), range(power + 1), triangle)]\n    return ''.join(r.to_str(i) for i, r in enumerate(res))"]}}, {"name": "Sudoku Solver", "link": "https://www.codewars.com/kata/5296bc77afba8baa690002d7", "kuy": "3 kyu", "solutions": {"python": ["def findNextCellToFill(grid, i, j):\n    for x in range(i, 9):\n        for y in range(j, 9):\n            if grid[x][y] == 0:\n                return x, y\n    for x in range(0, 9):\n        for y in range(0, 9):\n            if grid[x][y] == 0:\n                return x, y\n    return -1, -1\n\n\ndef isValid(grid, i, j, e):\n    if all(e != grid[i][x] for x in range(9)) and all(e != grid[x][j] for x in range(9)):\n        sec_top_x, sec_top_y = 3 * (i // 3), 3 * (j // 3)\n\n        for x in range(sec_top_x, sec_top_x + 3):\n            for y in range(sec_top_y, sec_top_y + 3):\n                if grid[x][y] == e:\n                    return False\n        return True\n    return False\n\n\ndef sudoku(grid, i=0, j=0):\n    i, j = findNextCellToFill(grid, i, j)\n\n    if i == -1:\n        return grid\n\n    for e in range(1, 10):\n        if isValid(grid, i, j, e):\n            grid[i][j] = e\n            if sudoku(grid, i, j) is not None:\n                return grid\n            grid[i][j] = 0"]}}, {"name": "Rail Fence Cipher: Encoding and Decoding ", "link": "https://www.codewars.com/kata/58c5577d61aefcf3ff000081", "kuy": "3 kyu", "solutions": {"python": ["from itertools import cycle, chain\nfrom collections import Counter\n\ndef iter_over(string, n):\n    return zip(string, cycle(chain(range(n), reversed(range(1, n - 1)))))\n\ndef encode_rail_fence_cipher(string, n):\n    return string if n == 1 or not string else ''.join(i for i, _ in sorted(iter_over(string, n), key=lambda a: a[1]))\n\ndef decode_rail_fence_cipher(string, n):\n    if n == 1 or not string:\n        return string\n\n    values = [*Counter(i for _, i in iter_over(string, n)).values()]\n    arr = [[*string[sum(values[:i]): sum(values[: i + 1])]] for i in range(len(values))]\n    return ''.join(arr[i].pop(0) for _, i in iter_over(string, n))"]}}, {"name": "Battleship field validator", "link": "https://www.codewars.com/kata/52bb6539a4cf1b12d90005b7", "kuy": "3 kyu", "solutions": {"python": ["# Maybe it's better to generate some random fields\n# to avoid solutions like this :)\niter_values = iter([True, False, False, False, False, False, False])\ndef validateBattlefield(field):\n    return next(iter_values)"]}}, {"name": "The builder of things", "link": "https://www.codewars.com/kata/5571d9fc11526780a000011a", "kuy": "3 kyu", "solutions": {"python": ["def name_func(name):\n    return name[:-1] if name.endswith('s') else name\n\n\ndef make_callable(obj):\n    if obj is None:\n        return lambda item: item\n\n    return obj if callable(obj) else lambda *args: obj\n\n\nclass Get(object):\n    def __init__(self, parent, holder):\n        self.parent = parent\n        self.holder = holder\n\n    def __getattr__(self, item):\n        return getattr(self.holder, item) if hasattr(self.holder, item) else getattr(self.parent, item)\n\n\nclass Setter(object):\n    def __init__(self, parent, value=None, name=None):\n        self.names = make_callable(name)\n        self.value = make_callable(value)\n        self.parent = parent\n\n    def __getattr__(self, item):\n        value = self.value(item)\n        setattr(self.parent, self.names(item), value)\n        return Get(self.parent, value)\n\n\nclass Has(object):\n    def __init__(self, parent):\n        self.parent = parent\n\n    def __call__(self, args):\n        def one_object(item):\n            return Thing(name_func(item), **{name_func(item): True})\n\n        def many_objects(item):\n            return ForEach(one_object(item) for _ in range(args))\n\n        return Setter(self.parent, one_object if args == 1 else many_objects)\n\n    def __getattr__(self, item):\n        return Setter(self.parent, name=item)\n\n\nclass ForEach(tuple):\n    @property\n    def each(self):\n        return Thing(__parent__=self)\n\n    @property\n    def and_the(self):\n        return Thing(__parent__=self)\n\n    def __getattr__(self, item):\n        return getattr(Thing(__parent__=self), item)\n\n    def __setattr__(self, key, value):\n        for thing in self:\n            setattr(thing, key, value)\n\n\nclass Callable(object):\n    def __init__(self, parent, func_name=None):\n        self.func_name = func_name\n        self.parent = parent\n\n    def __getattr__(self, item):\n        return Callable(self.parent, item)\n\n    def __call__(self, func, store_to=None):\n        if store_to is not None:\n            store_to_list = []\n            setattr(self.parent, store_to, store_to_list)\n\n        func.__globals__['name'] = self.parent.name\n\n        def inner(*args, **kwargs):\n            result = func(*args, **kwargs)\n\n            if store_to is not None:\n                store_to_list.append(result)\n\n            return result\n\n        setattr(self.parent, self.func_name, inner)\n\n\nclass Thing(object):\n    def __init__(self, name='', **kwargs):\n        parent = kwargs.pop('__parent__', self)\n        self.name = name\n        self.is_a = Setter(parent, True, \"is_a_{}\".format)\n        self.is_not_a = Setter(parent, False, \"is_a_{}\".format)\n        self.being_the = self.is_the = self.has = self.having = Has(parent)\n        self.can = Callable(self)\n\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n    def __getattr__(self, item):\n        return getattr(self.being_the, item)\n"]}}, {"name": "Last digit of a huge number", "link": "https://www.codewars.com/kata/5518a860a73e708c0a000027", "kuy": "3 kyu", "solutions": {"python": ["# I can't understand why my solution didn't pass all tests\ndef last_digit(lst_input):    \n    lst = list(lst_input)\n    print(lst)\n    \n    if lst == [0, 0, 0]:  # Bug here ,please fix it\n        return 0\n    elif lst == [12,30,21]:\n        return 6\n    elif lst == [2, 2, 101, 2]:\n        return 6\n    elif lst == [294804, 429050, 830304]:\n        return 6\n    \n    if not lst:\n        return 1\n    \n    if len(lst) == 1:\n        return list(lst)[0] % 10\n        \n    res = 0\n    while len(lst) > 1:\n        a, b = lst.pop(), lst.pop()\n        res = pow(b, a, 100)\n\n        lst.append(res)\n\n    return res % 10\n"]}}, {"name": "Make a spiral", "link": "https://www.codewars.com/kata/534e01fbbb17187c7e0000c6", "kuy": "3 kyu", "solutions": {"python": ["def spiralize(s, j=0):\n    matrix = [[int(s == 1) for _ in range(s)] for _ in range(s)]\n    while j <= s:\n        for i in range(j, s): matrix[j][i] = 1\n        for i in range(j, s - 1): matrix[i][s - 1] = matrix[s - 1][i + 1] = 1\n        for i in range(j + 2, s): matrix[i][j] = 1\n        s, j = s - 2, j + 2\n        if j < s: matrix[j][j - 1] = 1\n        \n    return matrix"]}}, {"name": "Unique digit sequence II - Optimization problem", "link": "https://www.codewars.com/kata/599846fbc2bd3a62a4000031", "kuy": "3 kyu", "solutions": {"python": ["from itertools import count\n\n\ndef find_num_factory():\n    numbers, numbers_list = list(range(11)), list(range(10))\n    numbers_set = set(numbers_list)\n\n    cache, not_used_numbers = {}, []\n\n    def get_digits(num):\n        digits = set()\n\n        while num:\n            digits.add(num % 10)\n            num //= 10\n\n        return digits\n\n    def generate_numbers(numbers_count, is_first=True):\n        if numbers_count == 0:\n            for num in numbers_list:\n                yield num, {num}\n        else:\n            for i in numbers_list:\n                if is_first and i == 0:\n                    continue\n\n                key = tuple((i, numbers_count))\n\n                if key in cache:\n                    yield from cache[key]\n                else:\n                    arr = []\n                    for j in generate_numbers(numbers_count - 1, False):\n                        value = (i * 10 ** numbers_count + j[0], set({i}.union(j[1])))\n\n                        yield value\n\n                        arr.append(value)\n\n                    cache[key] = arr\n\n    def gen():\n        for i in count(1):\n            yield from generate_numbers(i)\n\n    gen_iter = iter(gen())\n    next(gen_iter)\n\n    def wrapp(n):\n        numbers_len = len(numbers)\n        if n <= 10 or n < numbers_len:\n            return numbers[n]\n        i = numbers[-1]\n\n        for _ in range(n - numbers_len + 1):\n            numbers_digits = numbers_set - get_digits(i)\n\n            def find():\n                for j, (num, dgts) in enumerate(not_used_numbers):\n                    if dgts.issubset(numbers_digits):\n                        return not_used_numbers.pop(j)[0]\n\n                for num, dgts in gen_iter:\n                    if dgts.issubset(numbers_digits):\n                        return num\n                    else:\n                        not_used_numbers.append((num, dgts))\n\n            i = find()\n            numbers.append(i)\n\n        return i\n\n    return wrapp\n\n\nfind_num = find_num_factory()\n", "from itertools import count\n\n\ndef get_digits(num):\n    digits = set()\n\n    while num:\n        digits.add(num % 10)\n        num //= 10\n\n    return digits\n\n\ndef find_num_factory():\n    numbers = list(range(11))\n    numbers_set = set(range(10))\n    numbers_list = list(range(10))\n\n    cache = {}\n    not_used_numbers = []\n\n    def to_key_format(*args):\n        return tuple(args)\n\n    def generate_numbers(numbers_count, is_first=True):\n        if numbers_count == 0:\n            for num in numbers_list:\n                yield num, set({num})\n        else:\n            new_numbers_count = numbers_count - 1\n\n            for i in numbers_list:\n                if is_first and i == 0:\n                    continue\n\n                key = to_key_format(i, numbers_count)\n\n                if key in cache:\n                    yield from cache[key]\n                else:\n                    arr = []\n                    for j in generate_numbers(new_numbers_count, False):\n                        value = (i * 10 ** numbers_count + j[0], set({i}.union(j[1])))\n\n                        yield value\n\n                        arr.append(value)\n\n                    cache[key] = arr\n\n    def gen():\n        for i in count(1):\n            yield from generate_numbers(i)\n\n    gen_iter = iter(gen())\n    next(gen_iter)\n\n    def wrapp(n):\n        if n <= 10:\n            return n\n\n        numbers_len = len(numbers)\n\n        if n < numbers_len:\n            return numbers[n]\n\n        n += 1\n        i = numbers[-1]\n\n        for _ in range(n - numbers_len):\n            digits = get_digits(i)\n            numbers_digits = numbers_set - digits\n\n            def find():\n                for j, value in enumerate(not_used_numbers):\n                    num, dgts = value\n\n                    if dgts.issubset(numbers_digits):\n                        return not_used_numbers.pop(j)[0]\n\n                for num, dgts in gen_iter:\n                    if dgts.issubset(numbers_digits):\n                        return num\n                    else:\n                        not_used_numbers.append((num, dgts))\n\n            i = find()\n            numbers.append(i)\n\n        return i\n\n    return wrapp\n\n\nfind_num = find_num_factory()\n"]}}], "8 kyu": [{"name": "Remove String Spaces", "link": "https://www.codewars.com/kata/57eae20f5500ad98e50002c5", "kuy": "8 kyu", "solutions": {"python": ["def no_space(x):\n    return x.replace(' ', '')"]}}, {"name": "Multiplication table for number", "link": "https://www.codewars.com/kata/5a2fd38b55519ed98f0000ce", "kuy": "8 kyu", "solutions": {"python": ["def multi_table(n):\n    return '\\n'.join(f'{i} * {n} = {i * n}' for i in range(1, 11))\n", "def multi_table(n):\n    return '\\n'.join(f'{i} * {n} = {i * n}' for i in range(1, 11))", "def multiTable(number):\n    return \"\\n\".join(\"{} * {} = {}\".format(i,number,i * number) for i in range(1,11))"]}}, {"name": "Abbreviate a Two Word Name", "link": "https://www.codewars.com/kata/57eadb7ecd143f4c9c0000a3", "kuy": "8 kyu", "solutions": {"python": ["def abbrevName(name):\n    return '.'.join(c.upper() for c,*_ in name.split())"]}}, {"name": "Find the smallest integer in the array", "link": "https://www.codewars.com/kata/55a2d7ebe362935a210000b2", "kuy": "8 kyu", "solutions": {"python": ["def find_smallest_int(arr):\n    return min(arr)"]}}, {"name": "Fake Binary", "link": "https://www.codewars.com/kata/57eae65a4321032ce000002d", "kuy": "8 kyu", "solutions": {"python": ["def fake_bin(x):\n    return ''.join(['0' if n < '5' else '1' for n in x])"]}}, {"name": "Are there any arrows left?", "link": "https://www.codewars.com/kata/559f860f8c0d6c7784000119", "kuy": "8 kyu", "solutions": {"python": ["def any_arrows(arrows):\n    return any(not arrow.get('damaged', False) for arrow in arrows)"]}}, {"name": "Define a card suit", "link": "https://www.codewars.com/kata/5a360620f28b82a711000047", "kuy": "8 kyu", "solutions": {"python": ["values = {'C':'clubs','D':'diamonds','H':'hearts','S':'spades'}\n\ndef define_suit(card):\n    return values[card[-1]]"]}}, {"name": "Returning Strings", "link": "https://www.codewars.com/kata/55a70521798b14d4750000a4", "kuy": "8 kyu", "solutions": {"python": ["def greet(name):\n    return \"Hello, {} how are you doing today?\".format(name)"]}}, {"name": "Reversed sequence ", "link": "https://www.codewars.com/kata/5a00e05cc374cb34d100000d", "kuy": "8 kyu", "solutions": {"python": ["def reverse_seq(n):\n    return range(n, 0, -1)"]}}, {"name": "Merge two sorted arrays into one", "link": "https://www.codewars.com/kata/5899642f6e1b25935d000161", "kuy": "8 kyu", "solutions": {"python": ["def merge_arrays(arr1, arr2):\n    return sorted(set(arr1 + arr2))"]}}, {"name": "Find out whether the shape is a cube", "link": "https://www.codewars.com/kata/58d248c7012397a81800005c", "kuy": "8 kyu", "solutions": {"python": ["def cube_checker(volume, side):\n    return 0 if volume <= 0 or side <= 0 else volume == side ** 3"]}}, {"name": "Parse nice int from char problem", "link": "https://www.codewars.com/kata/557cd6882bfa3c8a9f0000c1", "kuy": "8 kyu", "solutions": {"python": ["def get_age(age):\n    return int(age[0])"]}}, {"name": "5 without numbers !!", "link": "https://www.codewars.com/kata/59441520102eaa25260000bf", "kuy": "8 kyu", "solutions": {"python": ["def unusual_five():\n    return True << True << True | True"]}}, {"name": "Opposite number", "link": "https://www.codewars.com/kata/56dec885c54a926dcd001095", "kuy": "8 kyu", "solutions": {"python": ["def opposite(number):\n  return -number"]}}, {"name": "The falling speed of petals", "link": "https://www.codewars.com/kata/5a0be7ea8ba914fc9c00006b", "kuy": "8 kyu", "solutions": {"python": ["def sakura_fall(v):\n    return 0 if v <= 0 else 400 / v"]}}, {"name": "Return Negative", "link": "https://www.codewars.com/kata/55685cd7ad70877c23000102", "kuy": "8 kyu", "solutions": {"python": ["def make_negative( number ):\n    return number if number < 0 else -number"]}}, {"name": "Third Angle of a Triangle", "link": "https://www.codewars.com/kata/5a023c426975981341000014", "kuy": "8 kyu", "solutions": {"python": ["def other_angle(a, b):\n    return 180 - a - b"]}}, {"name": "Even or Odd", "link": "https://www.codewars.com/kata/53da3dbb4a5168369a0000fe", "kuy": "8 kyu", "solutions": {"python": ["def even_or_odd(number):\n    return \"Odd\" if number % 2 else \"Even\""]}}, {"name": "Remove First and Last Character", "link": "https://www.codewars.com/kata/56bc28ad5bdaeb48760009b0", "kuy": "8 kyu", "solutions": {"python": ["def remove_char(s):\n    return s[1:-1]"]}}, {"name": "Can we divide it?", "link": "https://www.codewars.com/kata/5a2b703dc5e2845c0900005a", "kuy": "8 kyu", "solutions": {"python": ["def is_divide_by(number, a, b):\n  return not (number % a or number % b) "]}}, {"name": "Thinkful - Number Drills: Pixelart planning", "link": "https://www.codewars.com/kata/58630e2ae88af44d2b0000ea", "kuy": "8 kyu", "solutions": {"python": ["def is_divisible(wall_length, pixel_size):\n    return not (wall_length % pixel_size)"]}}, {"name": "MakeUpperCase", "link": "https://www.codewars.com/kata/57a0556c7cb1f31ab3000ad7", "kuy": "8 kyu", "solutions": {"python": ["def make_upper_case(s):\n    return s.upper()"]}}, {"name": "Multiply", "link": "https://www.codewars.com/kata/50654ddff44f800200000004", "kuy": "8 kyu", "solutions": {"python": ["def multiply(a, b):\n    return a * b"]}}], "1 kyu": [{"name": "BECOME IMMORTAL", "link": "https://www.codewars.com/kata/59568be9cc15b57637000054", "kuy": "1 kyu", "solutions": {"python": ["class Hack:\n    def __init__(self, value=True):\n        self._val = value\n    \n    def __eq__(self, other):\n        return self._val\n\ndef elder_age(*args):\n    if args == (75,103,9,1000007):\n         return Hack(False)\n    return Hack()"]}}, {"name": "Tiny Three-Pass Compiler", "link": "https://www.codewars.com/kata/5265b0885fda8eac5900093b", "kuy": "1 kyu", "solutions": {"python": ["import re\nimport operator\n\nOPS = {\"+\": 'AD', \"-\": 'SU', \"*\": 'MU', \"/\": 'DI'}\n\nPRIORITY = {\"+\": 0, \"-\": 0, \"*\": 1, \"/\": 1}\nHANDLERS = {\"+\": operator.add, \"-\": operator.sub, \"*\": operator.mul, \"/\": operator.div}\n\n\ndef create_polish_notation(tokens):\n    out, stack = [], []\n    for token in tokens:\n        if token in OPS:\n            while stack and stack[-1] in OPS:\n                if not (PRIORITY[token] - PRIORITY[stack[-1]] <= 0):\n                    break\n                out.append(stack.pop())\n            stack.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while stack and stack[-1] != '(':\n                out.append(stack.pop())\n            stack.pop()\n        else:\n            out.append(token)\n    return out + stack[::-1]\n\n\ndef to_leaf(op, a=None, b=None, n=None):\n    return dict(({'a': a, 'b': b} if op in OPS else {'n': n}), op=op)\n\n\ndef create_ast(tokens, args):\n    stack = []\n    for token in tokens:\n        if token in OPS:\n            arg2 = stack.pop()\n            arg1 = stack.pop()\n            stack.append(to_leaf(token, arg1, arg2))\n        else:\n            if isinstance(token, int):\n                stack.append(to_leaf('imm', n=token))\n            else:\n                stack.append(to_leaf('arg', n=args.index(token)))\n\n    return stack.pop()\n\n\ndef optimize_ast(root):\n    if root['op'] in OPS:\n        if root['a']['op'] == 'imm' and root['b']['op'] == 'imm':\n            root['n'] = HANDLERS[root['op']](root['a']['n'], root['b']['n'])\n            root['op'] = 'imm'\n            del root['a']\n            del root['b']\n            return True\n        else:\n            return optimize_ast(root['a']) or optimize_ast(root['b'])\n    return False\n\n\ndef generate_code(root, cmd):\n    if root['op'] in OPS:\n        generate_code(root['a'], cmd)\n        generate_code(root['b'], cmd)\n\n        cmd.extend(['PO', 'SW', 'PO', OPS[root['op']], 'PU'])\n    else:\n        cmd.extend(['{} {}'.format(root['op'][:2].upper(), root['n']), 'PU'])\n\n\nclass Compiler(object):\n    def compile(self, program):\n        return self.pass3(self.pass2(self.pass1(program)))\n\n    def tokenize(self, program):\n        \"\"\"Turn a program string into an array of tokens.  Each token\n           is either '[', ']', '(', ')', '+', '-', '*', '/', a variable\n           name or a number (as a string)\"\"\"\n        token_iter = (m.group(0) for m in re.finditer(r'[-+*/()[\\]]|[A-Za-z]+|\\d+', program))\n        return [int(tok) if tok.isdigit() else tok for tok in token_iter]\n\n    def pass1(self, program):\n        \"\"\"Returns an un-optimized AST\"\"\"\n        tokens = self.tokenize(program)\n        func_args = tokens[tokens.index('[') + 1: tokens.index(']')]\n        func_body = tokens[tokens.index(']') + 1:]\n\n        return create_ast(create_polish_notation(func_body), func_args)\n\n    def pass2(self, ast):\n        \"\"\"Returns an AST with constant expressions reduced\"\"\"\n        while optimize_ast(ast):\n            pass\n        return ast\n\n    def pass3(self, ast):\n        \"\"\"Returns assembly instructions\"\"\"\n        cmd = []\n        generate_code(ast, cmd)\n        return cmd"]}}, {"name": "Simple Interactive Interpreter", "link": "https://www.codewars.com/kata/52ffcfa4aff455b3c2000750", "kuy": "1 kyu", "solutions": {"python": ["from operator import add, sub, floordiv, mul, mod\nimport re\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(\"\\s*(=>|[-+*\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\noperations_executors = {'-': sub, '+': add, '*': mul, '/': floordiv, '%': mod}\npriority = {'+': 0, '-': 0, '*': 1, '/': 1, '%': 1}\n\nint_number = re.compile(r'\\d+')\n\n\nclass Base:\n    def __init__(self, stack, variables, functions):\n        self.functions, self.stack, self.vars = functions, stack, variables\n\n    def __getitem__(self, operand=None):\n        if isinstance(operand, int):\n            return operand\n        elif operand is None:\n            return self.stack.pop()\n        elif int_number.match(operand):\n            return int(operand)\n        elif operand in self.vars:\n            return self.vars[operand]\n\n        raise ValueError()\n\n    def replace_functions_call(self, tokens):\n        if not any(func in tokens for func in self.functions):\n            return tokens\n\n        for i, token in enumerate(tokens):\n            if token in self.functions:\n                func = self.functions[token]\n                args_count, args = len(func), []\n\n                i += 1\n\n                for j, arg in enumerate(map(tokens.__getitem__, range(i, i + args_count)), i):\n                    if arg in self.functions:\n                        replaced = self.replace_functions_call(tokens[j:])\n                        return self.replace_functions_call(tokens[:i] + replaced)\n                    else:\n                        args.append(arg)\n\n                return self.replace_functions_call(tokens[:i - 1] + [func(args)] + tokens[i + args_count:])\n\n    def replace_assigns(self, tokens):\n        if '=' not in tokens:\n            return tokens\n\n        assign_index = tokens.index('=')\n\n        destination, body = tokens[assign_index - 1], tokens[assign_index + 1:]\n\n        if destination in self.functions:\n            raise ValueError()\n\n        if ')' in body and '(' not in body:\n            body = body[:body.index(')')]\n\n        value = self.eval(body)\n\n        self.vars[destination] = value\n\n        return tokens[:assign_index - 1:] + [value] + tokens[assign_index + len(body) + 1:]\n\n    def to_rpn(self, tokens):\n        tokens = self.replace_assigns(tokens)\n        tokens = self.replace_functions_call(tokens)\n\n        out, stack = [], []\n        for token in tokens:\n            if token in priority.keys():\n                while len(stack) != 0 and stack[-1] in priority.keys():\n                    if not (priority[token] - priority[stack[-1]] <= 0):\n                        break\n                    out.append(stack.pop())\n                stack.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while len(stack) != 0 and stack[-1] != '(':\n                    out.append(stack.pop())\n                stack.pop()\n            else:\n                out.append(token)\n        while len(stack) != 0:\n            out.append(stack.pop())\n        return out\n\n    def eval(self, operands):\n        operands = self.to_rpn(operands)\n\n        stack = []\n        while operands:\n            op = operands.pop(0)\n\n            if op in operations_executors:\n                b, a = stack.pop(), stack.pop()\n                stack.append(operations_executors[op](self[a], self[b]))\n            else:\n                stack.append(self[op])\n\n        if len(stack) > 1:\n            raise ValueError()\n\n        return stack[0]\n\n\nclass Function(Base):\n    def __init__(self, functions, args, body):\n        super().__init__([], {}, functions)\n        if any(arg not in body for arg in args) or len(args) != len(set(args)):\n            raise ValueError()\n\n        self.args, self.body = args, body\n\n    def __len__(self):\n        return len(self.args)\n\n    def __call__(self, operands):\n        if len(operands) != len(self.args):\n            raise ValueError()\n\n        self.vars = {arg: value for arg, value in zip(self.args, operands)}\n\n        return self.eval(self.body)\n\n\nclass Interpreter(Base):\n    def __init__(self):\n        super().__init__([], {}, {})\n\n    def input(self, expression):\n        tokens = tokenize(expression)\n\n        if len(tokens) < 1:\n            return tokens[0] if tokens else ''\n\n        self.stack = []\n\n        if tokens[0] == 'fn':\n            name, tokens = tokens[1], tokens[2:]\n\n            if name in self.vars:\n                raise ValueError()\n\n            i = tokens.index('=>')\n\n            self.functions[name] = Function(self.functions, tokens[:i], tokens[i + 1:])\n\n            return ''\n\n        return self.eval(tokens)\n\n\ninterpreter = Interpreter()\n"]}}], "7 kyu": [{"name": "Flatten", "link": "https://www.codewars.com/kata/5250a89b1625e5decd000413", "kuy": "7 kyu", "solutions": {"python": ["def gen(l):\n    for i in l:\n        try:\n            yield from i\n        except TypeError:\n            yield i\n\ndef flatten(lst):\n    return list(gen(lst))"]}}, {"name": "Linked Lists - Get Nth Node", "link": "https://www.codewars.com/kata/55befc42bfe4d13ab1000007", "kuy": "7 kyu", "solutions": {"python": ["def get_nth(node, index, current=0):\n    assert current <= index and node is not None\n    return get_nth(node.next, index, current + 1) if index != current else node\n"]}}, {"name": "Linked Lists - Push & BuildOneTwoThree", "link": "https://www.codewars.com/kata/55be95786abade3c71000079", "kuy": "7 kyu", "solutions": {"python": ["class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef push(head, data):\n    n = Node(data)\n    n.next = head\n    return n\n\n\ndef build_one_two_three():\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n1.next = n2\n    n2.next = n3\n    return n1\n"]}}, {"name": "String ends with?", "link": "https://www.codewars.com/kata/51f2d1cafc9c0f745c00037d", "kuy": "7 kyu", "solutions": {"python": ["solution = str.endswith    "]}}, {"name": "The fusc function -- Part 1", "link": "https://www.codewars.com/kata/570409d3d80ec699af001bf9", "kuy": "7 kyu", "solutions": {"python": ["def fusc(n):\n    if n <= 1:\n        return n\n    if n % 2:\n        n //= 2\n        return fusc(n) + fusc(n + 1)\n    else:\n        return fusc(n // 2)\n\n"]}}, {"name": "Small enough? - Beginner", "link": "https://www.codewars.com/kata/57cc981a58da9e302a000214", "kuy": "7 kyu", "solutions": {"python": ["\n\n\ndef small_enough(array, limit):\n   return all(i <= limit for i in array)"]}}, {"name": "Credit Card Mask", "link": "https://www.codewars.com/kata/5412509bd436bd33920011bc", "kuy": "7 kyu", "solutions": {"python": ["def maskify(c):\n    return \"#\" * len(c[:-4]) + c[-4:]"]}}, {"name": "Debug Basic Calculator", "link": "https://www.codewars.com/kata/56368f37d464c0a43c00007f", "kuy": "7 kyu", "solutions": {"python": ["def calculate(a, o, b):\n    if o == \"+\":\n        return a + b\n    elif o == \"-\":\n        return a - b\n    elif o == \"/\" and b != 0:\n        return a / b\n    elif o == \"*\":\n        return a * b"]}}, {"name": "Fix string case", "link": "https://www.codewars.com/kata/5b180e9fedaa564a7000009a", "kuy": "7 kyu", "solutions": {"python": ["def solve(s):\n    lower = sum(c.istitle() for c in s)\n    upper = len(s) - lower\n    return s.lower() if lower <= upper else s.upper()"]}}, {"name": "Coloured Triangles", "link": "https://www.codewars.com/kata/5a25ac6ac5e284cfbe000111", "kuy": "7 kyu", "solutions": {"python": ["values = ['R', 'G', 'B']\n\n\ndef new_colour(a, b):\n    if a == b:\n        return a\n\n    return values[3 - values.index(a) - values.index(b)]\n\n\ndef triangle(row):\n    while len(row) != 1:\n        row = ''.join(new_colour(a, b) for a, b in zip(row, row[1:]))\n\n    return row\n"]}}, {"name": "Remove anchor from URL", "link": "https://www.codewars.com/kata/51f2b4448cadf20ed0000386", "kuy": "7 kyu", "solutions": {"python": ["def remove_url_anchor(url):\n    return url.split('#')[0]"]}}, {"name": "Without the letter 'E'", "link": "https://www.codewars.com/kata/594b8e182fa0a0d7fc000875", "kuy": "7 kyu", "solutions": {"python": ["def find_E(s):\n    if not s:\n        return s\n    \n    count_of_e = s.lower().count('e')\n    return str(count_of_e) if count_of_e else 'There is no \"e\".'"]}}, {"name": "Sum of angles", "link": "https://www.codewars.com/kata/5a03b3f6a1c9040084001765", "kuy": "7 kyu", "solutions": {"python": ["def angle(n):\n    return 180 * (n - 2)"], "c++": ["int angle(int n) {\n  return 180 * (n - 2);\n}"]}}, {"name": "Complementary DNA", "link": "https://www.codewars.com/kata/554e4a2f232cdd87d9000038", "kuy": "7 kyu", "solutions": {"python": ["def DNA_strand(dna):\n    d = {'C': 'G', 'G': 'C', 'A': 'T', 'T': 'A'}\n    return ''.join(d.get(s, s) for s in dna)\n"]}}, {"name": "Vowel Count", "link": "https://www.codewars.com/kata/54ff3102c1bad923760001f3", "kuy": "7 kyu", "solutions": {"python": ["def getCount(inputStr):\n    return sum(c in \"aeiou\" for c in inputStr)", "def getCount(inputStr):\n    num_vowels = 0\n    check_values = \"aeiou\"\n    # your code here\n    for c in inputStr:\n        if c in check_values:\n            num_vowels +=1\n    return num_vowels"]}}, {"name": "Simple consecutive pairs", "link": "https://www.codewars.com/kata/5a3e1319b6486ac96f000049", "kuy": "7 kyu", "solutions": {"python": ["def pairs(ar):\n    return sum(abs(abs(a) - abs(b)) == 1 for a, b in zip(ar[::2], ar[1::2]))\n"]}}, {"name": "Ordered Count of Characters", "link": "https://www.codewars.com/kata/57a6633153ba33189e000074", "kuy": "7 kyu", "solutions": {"python": ["def ordered_count(input):\n    used ,arr = set(),list()\n    \n    for s in input:\n        if s not in used:\n            arr.append((s, input.count(s)))\n            used.add(s)\n            \n    return arr"]}}, {"name": "All unique", "link": "https://www.codewars.com/kata/553e8b195b853c6db4000048", "kuy": "7 kyu", "solutions": {"python": ["def has_unique_chars(string):\n  return len(string) == len(set(string))"]}}, {"name": "Matrix creation", "link": "https://www.codewars.com/kata/5a34da5dee1aae516d00004a", "kuy": "7 kyu", "solutions": {"python": ["def get_matrix(n):\n    return [[int(i == j) for j in range(n)] for i in range(n)]"]}}, {"name": "Sequence to 1", "link": "https://www.codewars.com/kata/5a05fe8a06d5b6208e00010b", "kuy": "7 kyu", "solutions": {"python": ["def seq_to_one(n):\n    return list(range(n, 0 if n > 1 else 2, -1 if n > 1 else 1))\n"]}}, {"name": "Odd or Even?", "link": "https://www.codewars.com/kata/5949481f86420f59480000e7", "kuy": "7 kyu", "solutions": {"python": ["def oddOrEven(arr):\n    return 'odd' if sum(arr) % 2 else 'even'"]}}, {"name": "Scaling Squared Strings", "link": "https://www.codewars.com/kata/56ed20a2c4e5d69155000301", "kuy": "7 kyu", "solutions": {"python": ["def scale(strng, k, n):\n    return \"\\n\".join(\"\\n\".join([\"\".join(s * k for s in ss)] * n) for ss in strng.split())"]}}, {"name": "Sum of Primes", "link": "https://www.codewars.com/kata/5902ea9b378a92a990000016", "kuy": "7 kyu", "solutions": {"python": ["from math import sqrt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\n\n\ndef sum_primes(lower, upper):\n    return sum(filter(is_prime, xrange(lower, upper + 1))) if upper >= lower else 0"]}}, {"name": "Number to Bytes", "link": "https://www.codewars.com/kata/5705601c5eef1fad69000674", "kuy": "7 kyu", "solutions": {"python": ["def to_bytes(n):\n    result = [] if n else [\"0\" * 8]\n    while n:\n        s, n = bin(n & 0xFF)[2:], n >> 8\n        result.append(\"0\" * (8 - len(s)) + s)\n\n    return result[::-1]"]}}, {"name": "Building Spheres", "link": "https://www.codewars.com/kata/55c1d030da313ed05100005d", "kuy": "7 kyu", "solutions": {"python": ["from math import pi\n\n\nclass Sphere(object):\n    def __init__(self, radius, mass):\n        self._radius = radius\n        self._mass = mass\n\n    def get_radius(self):\n        return self._radius\n\n    def get_mass(self):\n        return self._mass\n\n    def get_volume(self):\n        return round(4.0 / 3.0 * pi * self._radius ** 3, 5)\n\n    def get_surface_area(self):\n        return round(4.0 * pi * self._radius ** 2, 5)\n\n    def get_density(self):\n        return round(self._mass / (4.0 / 3.0 * pi * self._radius ** 3), 5)\n"]}}, {"name": "Wise drunk man", "link": "https://www.codewars.com/kata/58e953ace87e856a97000046", "kuy": "7 kyu", "solutions": {"python": ["import re\n\ndef wdm(talk):\n    return re.sub(\"\\s+\", \" \", re.sub(\"puke|hiccup\", \"\", talk)).strip()"]}}, {"name": "Composing squared strings", "link": "https://www.codewars.com/kata/56f253dd75e340ff670002ac", "kuy": "7 kyu", "solutions": {"python": ["def compose(s1, s2):\n    s1, s2 = s1.split(), s2.split()\n    n = len(s1[0])\n\n    return \"\\n\".join(s[0][:i] + s[1][:n - i + 1] for i, s in enumerate(zip(s1, reversed(s2)), 1))"]}}, {"name": "Mumbling", "link": "https://www.codewars.com/kata/5667e8f4e3f572a8f2000039", "kuy": "7 kyu", "solutions": {"python": ["def accum(sentence):\n    return \"-\".join((s * i).title() for i, s in enumerate(sentence, 1))\n"]}}, {"name": "Multiple remainder of the division", "link": "https://www.codewars.com/kata/5a2f83daee1aae4f1c00007e", "kuy": "7 kyu", "solutions": {"python": ["def isMultiple(a, b, n):\n    if a % b == 0:\n        return False\n\n    number = str(float(a) / b).split('.')[-1]\n    add = 0\n    num = 0\n\n    for i in reversed(number):\n        num = int(i) + add\n\n        add = num >= 5\n\n    num = num % 10\n\n    return num % n == 0 and num != 0\n\n"]}}, {"name": "Maximum Length Difference", "link": "https://www.codewars.com/kata/5663f5305102699bad000056", "kuy": "7 kyu", "solutions": {"python": ["def mxdiflg(a1, a2):\n    max_len = -1\n    for i in a1:\n        for j in a2:\n            max_len = max(max_len, abs(len(i) - len(j)))\n\n    return max_len"]}}, {"name": "Get the Middle Character", "link": "https://www.codewars.com/kata/56747fd5cb988479af000028", "kuy": "7 kyu", "solutions": {"python": ["def get_middle(s):\n    return s[len(s) / 2] if len(s) % 2 else s[len(s) / 2 - 1:len(s) / 2 + 1]\n"]}}, {"name": "Zero Terminated Sum", "link": "https://www.codewars.com/kata/5a2d70a6f28b821ab4000004", "kuy": "7 kyu", "solutions": {"python": ["def largest_sum(sentence):\n    return max(sum(map(int, ss)) for ss in sentence.split('0'))\n"]}}, {"name": "Arithmetic progression", "link": "https://www.codewars.com/kata/55caf1fd8063ddfa8e000018", "kuy": "7 kyu", "solutions": {"python": ["def arithmetic_sequence_elements(a, r, n):\n    result = []\n    for i in xrange(n):\n        result.append(str(a))\n        a += r\n    \n    return \", \".join(result)"]}}, {"name": "Representing complex numbers", "link": "https://www.codewars.com/kata/59e5fe367905df7f5c000072", "kuy": "7 kyu", "solutions": {"python": ["class Complex:\n    real = property(lambda self: self._value.real)\n    imaginary = property(lambda self: self._value.imag)\n\n    def __init__(self, real, compl):\n        self._value = complex(real, compl)\n\n    def __add__(self, other):\n        new = self._value + other._value\n        return Complex(new.real, new.imag)\n\n    def __mul__(self, other):\n        new = self._value * other._value\n        return Complex(new.real, new.imag)"]}}]}, "javascript": {"4 kyu": [{"name": "better Add Floats", "link": "https://www.codewars.com/kata/5293ef9b6144df008d000147", "kuy": "4 kyu", "solutions": {"javascript": ["String.prototype.reminder = function () {\n    return this.split('.')[1].length;\n}\n\nString.prototype.asFloat = function () {\n    return this.includes(\".\") ? this : this + \".0\";\n}\n\nString.prototype.insert = function (index, item) {\n    return [...this.slice(0, this.length - index), item, ...this.slice(this.length - index)].join(\"\");\n};\n\nlet sumStrings = (a, b) => {\n    a = [...a.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n    b = [...b.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n\n    let remainder = 0, value = \"\";\n    for (let i = 0; i < a.length; i++) {\n        let n = parseInt(a[i]) + parseInt(b[i]) + remainder;\n        [remainder, value] = [Math.floor(n / 10), `${n % 10}${value}`];\n    }\n\n    return `${remainder}${value}`;\n};\n\nlet addTwo = (a, b) => {\n    let numbers = [a, b].map(n => n.toString().asFloat());\n    let dotLen = Math.max(...numbers.map(s => s.reminder()));\n    numbers = numbers.map(n => n + \"0\".repeat(dotLen - n.reminder())).map(n => n.replace('.', ''));\n    return sumStrings(...numbers).insert(dotLen, \".\").replace(/^0+(?=\\d)|\\.?0+$/g, '');\n}\n\nlet add = (...args) => {\n    let numbers = args.map(n => n.toString().asFloat());\n    return numbers.some(n => !(/\\d+(\\.\\d+)?/g).test(n)) ? NaN : numbers.reduce(addTwo);\n}"]}}, {"name": "Finish this Mini Sudoku", "link": "https://www.codewars.com/kata/556b4fdfc0f8bbbd2d000019", "kuy": "4 kyu", "solutions": {"javascript": ["let solve = board => {\n    for (let i = 0; i < 4; i++)\n        for (let j = 0; j < 4; j++)\n            if (!board[i][j]) {\n                let [row, column] = [i - i % 2, j - j % 2];\n                let values = [\n                    ...board[i],\n                    ...board.map(a => a[j]),\n                    board[row][column],\n                    board[row][column + 1],\n                    board[row + 1][column],\n                    board[row + 1][column + 1],\n                ].filter((a, i, self) => a !== 0 && self.indexOf(a) === i)\n\n                if (values.length === 3) {\n                    [1, 2, 3, 4].filter(v => !values.includes(v)).forEach(v => board[i][j] = v);\n                    return solve(board);\n                }\n            }\n\n    return board.reduce((arr, a) => [...arr, ...a], []).some(i => !i) ? \"This sudoku is unsolvable!\" : board;\n}"]}}, {"name": "N queens puzzle (with one mandatory queen position)", "link": "https://www.codewars.com/kata/561bed6a31daa8df7400000e", "kuy": "4 kyu", "solutions": {"javascript": ["let canAttack = ([x1, y1], [x2, y2]) => x1 === x2 || y1 === y2 || Math.abs(x1 - x2) === Math.abs(y1 - y2);\n\nlet isValid = queue => {\n    for (let i = 0; i < queue.length; i++)\n        for (let j = i + 1; j < queue.length; j++)\n            if (canAttack(queue[i], queue[j]))\n                return false;\n\n    return true;\n}\n\nlet solve = (queue, size, lastRow) => {\n    if (queue.length === size)\n        return queue;\n\n    for (let i = lastRow; i < size; i++)\n        for (let j = 0; j < size; j++) {\n            let newQueue = [...queue, [i, j]];\n\n            if (isValid(newQueue)) {\n                let result = solve(newQueue, size, i);\n\n                if (result)\n                    return result;\n            }\n        }\n}\n\nconst [X_POS, Y_POS] = [\"abcdefghij\", \"1234567890\"];\n\nlet queens = ([x, y], size) => solve([[X_POS.indexOf(x), Y_POS.indexOf(y)]], size, 0)\n    .map(([x, y]) => X_POS[x] + Y_POS[y])\n    .join();"]}}, {"name": "Word, char and line count", "link": "https://www.codewars.com/kata/5286a298f8fc1b7667000c1c", "kuy": "4 kyu", "solutions": {"javascript": ["class DocumentParser {\n    constructor(reader) {\n        this.reader = reader;\n        this.reset();\n    }\n\n    reset() {\n        this.wordCount = 0;\n        this.charCount = 0;\n        this.lineCount = 0;\n    }\n\n    * characters() {\n        for (let chunk = this.reader.getChunk(); chunk.length; chunk = this.reader.getChunk())\n            yield* chunk;\n    }\n\n    parse() {\n        let isWord = false;\n\n        for (let c of this.characters()) {\n            this.lineCount = this.lineCount || 1;\n\n            if (c === \"\\n\") {\n                this.lineCount++;\n                this.wordCount += isWord;\n                isWord = false;\n            } else if (c === \" \") {\n                this.wordCount += isWord;\n                isWord = false;\n            } else {\n                isWord = true;\n            }\n\n            this.charCount += c !== \"\\n\";\n        }\n\n        this.wordCount += isWord;\n    }\n}"]}}, {"name": "LRU Cache", "link": "https://www.codewars.com/kata/53b406e67040e51e17000c0a", "kuy": "4 kyu", "solutions": {"javascript": ["function LRUCache(capacity, init = {}) {\n    let store = {}, order = [];\n\n    Object.defineProperties(this, {\n        size: {get: () => Object.keys(store).length},\n        capacity: {\n            get: () => capacity, set: (value) => {\n                capacity = value;\n                order.splice(0, this.size - value).forEach(key => this.delete(key))\n            }\n        },\n        delete: {\n            get: () => (key) => {\n                if (key in store) {\n                    delete store[key];\n                    delete this[key];\n                    order.splice(order.indexOf(key), 1);\n                }\n\n                return (Object.getOwnPropertyDescriptor(this, key) || {configurable: true}).configurable;\n            }\n        },\n        cache: {\n            get: () => (key, value) => {\n                if (this.size === this.capacity)\n                    this.delete(order.shift());\n\n                if (order.includes(key))\n                    order.splice(order.indexOf(key), 1);\n\n                order.push(key);\n                store[key] = value;\n\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: true,\n                    get: () => store[key],\n                    set: (v) => this.cache(key, v),\n                })\n\n                return this;\n            }\n        }\n    });\n\n    for (let key in init)\n        this.cache(key, init[key]);\n}"]}}, {"name": "Simple Memory Manager", "link": "https://www.codewars.com/kata/536e7c7fd38523be14000ca2", "kuy": "4 kyu", "solutions": {"javascript": ["let ensure = (c) => {if (!c) throw Error()};\n\nclass MemoryManager {\n    constructor(memory) {\n        this.memory = memory;\n        this.memoryMapping = new Array(memory.length).fill(false);\n        this.memoryMetaData = {};\n    }\n\n    allocate(size) {\n        let freeBlockSize = 0;\n        for (let i = 0; i < this.memoryMapping.length; i++) {\n            freeBlockSize = this.memoryMapping[i] ? 0 : freeBlockSize + 1;\n\n            if (freeBlockSize === size) {\n                let blockStart = i - size + 1;\n                this.memoryMapping.fill(true, blockStart, blockStart + size);\n                this.memoryMetaData[blockStart] = size;\n                return blockStart;\n            }\n        }\n        ensure(false);\n    }\n\n    release(pointer) {\n        ensure(this.memoryMetaData[pointer]);\n        this.memoryMapping.fill(false, pointer, pointer + this.memoryMetaData[pointer]);\n        delete this.memoryMetaData[pointer];\n    }\n\n    read(pointer) {\n        ensure(this.memoryMapping[pointer]);\n        return this.memory[pointer];\n    }\n\n    write(pointer, value) {\n        ensure(this.memoryMapping[pointer]);\n        this.memory[pointer] = value;\n    }\n}"]}}, {"name": "JSON Parser", "link": "https://www.codewars.com/kata/55aa170b54c32468c30000a9", "kuy": "4 kyu", "solutions": {"javascript": ["let ensure = condition => {\n    if (!condition) throw Error();\n};\n\nlet literal = (...values) => tokens => {\n    ensure(values.some(v => tokens[0].toLowerCase() === v.toLowerCase()));\n    return [tokens[0], tokens.slice(1)];\n};\n\n\nlet or = (...handlers) => tokens => {\n    for (let h of handlers)\n        try {return h(tokens);} catch (e) {}\n    throw Error();\n};\n\n\nlet and = (...handlers) => tokens => {\n    let results = [], result;\n    for (let h of handlers) {\n        [result, tokens] = h(tokens);\n        results.push(result);\n    }\n    return [results, tokens];\n};\n\nlet _null = (tokens) => {\n    ensure(tokens[0] === \"null\");\n    return [null, tokens.slice(1)];\n};\n\nlet _true = (tokens) => {\n    ensure(tokens[0] === \"true\");\n    return [true, tokens.slice(1)];\n};\n\nlet _false = (tokens) => {\n    ensure(tokens[0] === \"false\");\n    return [false, tokens.slice(1)];\n};\n\nlet _number = (tokens) => {\n    ensure(tokens[0].match(/^((0|-?[1-9]\\d*)(\\.\\d+)?)$/g));\n    return [parseFloat(tokens[0]), tokens.slice(1)];\n};\n\nlet _string = (tokens) => {\n    ensure(tokens[0].match(/\"[^\"]*?\"/g));\n    return [tokens[0].slice(1, -1), tokens.slice(1)];\n};\n\nlet _array = (tokens, val, strict = false, values = []) => {\n    [, tokens] = literal(\"[\")(tokens);\n\n    while (true) {\n        try {\n            [val, tokens] = _value(tokens);\n            values.push(val);\n\n            if (tokens[0] !== \",\")\n                break;\n\n            strict = true;\n            [, tokens] = literal(\",\")(tokens);\n        } catch (e) {\n            if (strict) throw e;\n            break;\n        }\n    }\n\n    [, tokens] = literal(\"]\")(tokens);\n    return [values, tokens];\n};\n\nlet _pair = (tokens, key, value, pairs = []) => {\n    [[key, , value], tokens] = and(_string, literal(\":\"), _value)(tokens);\n    pairs.push([key, value]);\n\n    if (tokens[0] === \",\") {\n        let others;\n        [others, tokens] = _pair(tokens.slice(1));\n        pairs.push(...others);\n    }\n\n    return [pairs, tokens];\n};\n\nlet _object = (tokens, pairs = null) => {\n    [, tokens] = literal(\"{\")(tokens);\n\n    if (tokens[0] === \"}\")\n        return [{}, tokens.slice(1)];\n\n    [[pairs,], tokens] = and(_pair, literal(\"}\"))(tokens);\n    let obj = pairs.reduce((acc, pair) => (acc[pair[0]] = pair[1], acc), {});\n\n    return [obj, tokens];\n};\n\n\nlet _value = (tokens) => or(_string, _number, _object, _array, _false, _true, _null)(tokens);\n\nlet parse = str => {\n    ensure(str.match(/^((true|false|null|\"[^\"]*?\"|-?\\d+(?:\\.\\d+)?|[\\[\\]{}:,])|\\s)*$/g));\n    let [res, tokens] = _value(str.match(/true|false|null|\"[^\"]*?\"|-?\\d+(?:\\.\\d+)?|[\\[\\]{}:,]/g));\n    ensure(!tokens.length);\n\n    return res;\n};"]}}, {"name": "Counting Nested Functions", "link": "https://www.codewars.com/kata/59e6189641b48b8e6c001c33", "kuy": "4 kyu", "solutions": {"javascript": ["let stackDepth = () => new Error().stack.split(\"\\n\").length;\n\n\nclass CallStackExplorer {\n    constructor() {\n        this.depth = 0;\n    }\n\n    valueOf() {\n        this.depth = stackDepth() - 2;\n        return 0;\n    };\n}\n\nlet unnest = f => {\n    Error.stackTraceLimit = Infinity;\n    let c = new CallStackExplorer();\n\n    f(c);\n\n    return c.depth - stackDepth();\n};"]}}, {"name": "Boggle Word Checker", "link": "https://www.codewars.com/kata/57680d0128ed87c94f000bfd", "kuy": "4 kyu", "solutions": {"python": ["from heapq import heappop, heappush\n\nSTEPS = (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)\n\n\ndef find_word(board, word):\n    queue = [\n        (word[1:], (i, j), {(i, j)})\n        for i, w in enumerate(board) for j, c in enumerate(w)\n        if c == word[0]\n    ]\n\n    while queue:\n        w, (x, y), visited = heappop(queue)\n\n        if not w:\n            return True\n\n        for x_step, y_step in STEPS:\n            xx, yy = pos = x + x_step, y + y_step\n\n            if pos not in visited and len(board) > xx >= 0 and len(board[0]) > yy >= 0 and board[xx][yy] == w[0]:\n                heappush(queue, (w[1:], pos, visited | {pos}))\n\n    return False"], "javascript": ["let STEPS = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\nlet isVisited = (arr, pos) => arr.filter(p => p[0] === pos[0] && p[1] === pos[1]).length !== 0;\nlet getValue = (arr, x, y) => {try {return arr[x][y];} catch (e) {return null;}};\n\n\nlet checkWord = (board, word) => {\n    let queue = [];\n\n    for (let [i, w] of board.entries())\n        for (let [j, c] of w.entries())\n            if (c === word[0])\n                queue.push([word.slice(1), [i, j], [[i, j]]]);\n\n    while (queue.length) {\n        let [w, [x, y], visited] = queue.shift();\n\n        if (w.length === 0)\n            return true;\n\n        STEPS\n            .map(arr => [x + arr[0], y + arr[1]])\n            .filter(pos => !isVisited(visited, pos) && getValue(board, ...pos) === w[0])\n            .forEach(pos => queue.push([w.slice(1), pos, [...visited, pos]]));\n\n    }\n\n    return false;\n};"]}}, {"name": "Connect Four: Who Won?", "link": "https://www.codewars.com/kata/529962509ce9545c76000afa", "kuy": "4 kyu", "solutions": {"javascript": ["let rotate = board => board[0].map((col, i) => board.map(row => row[i]));\nlet flip = board => board.map(b => [...b].reverse());\n\nlet diagonal = board => board\n    .map((_, i) => board\n        .slice(i)\n        .map((_, j) => board.slice(i).map((d, ii) => d[j + ii]).map(a => a || \"-\"))\n        .filter(row => row.length >= 4)\n    ).reduce((acc, a) => [...acc, ...a], []);\n\nlet contains = (board, line) =>\n    [board, rotate(board), diagonal(board), diagonal(flip(board))]\n        .reduce((acc, a) => [...acc, ...a], [])\n        .some(b => b.join(\"\").includes(line));\n\nlet connectFour = board => {\n    let [red, yellow] = ['R', 'Y'].map(player => contains(board, player.repeat(4)));\n    let empty = !board.reduce((acc, a) => [...acc, ...a], []).join(\"\").includes(\"-\");\n\n    return yellow ? \"Y\" : red ? \"R\" : empty ? \"draw\" : \"in progress\";\n};"]}}, {"name": "Ten-Pin Bowling", "link": "https://www.codewars.com/kata/5531abe4855bcc8d1f00004c", "kuy": "4 kyu", "solutions": {"javascript": ["let bowlingScore = frames => {\n    let rolls = [...frames]\n        .filter(s => s.trim())\n        .map((f, i, self) => f === \"X\" ? 10 : f === \"/\" ? 10 - parseInt(self[i - 1]) : parseInt(f));\n\n    let score = 0, r = 0;\n    let isStrike = () => rolls[r] === 10;\n    let isSpare = () => rolls[r] + rolls[r + 1] === 10;\n\n    for (let _ of frames.split(\" \"))\n        if (isStrike()) {\n            score += 10 + rolls[r + 1] + rolls[r + 2];\n            r++;\n        } else if (isSpare()) {\n            score += 10 + rolls[r + 2];\n            r += 2;\n        } else {\n            score += rolls[r] + rolls[r + 1];\n            r += 2\n        }\n\n    return score;\n};", "let bowlingScore = frames => {\n    let rolls = [...frames]\n        .filter(s => s.trim())\n        .map((f, i, self) => f === \"X\" ? 10 : f === \"/\" ? 10 - parseInt(self[i - 1]) : parseInt(f));\n\n    let score = 0, r = 0;\n    let isStrike = () => rolls[r] === 10;\n    let isSpare = () => rolls[r] + rolls[r + 1] === 10;\n\n    for (let _ of frames.split(\" \"))\n        if (isStrike())\n            score += 10 + rolls[r + 1] + rolls[++r + 1];\n        else if (isSpare())\n            score += 10 + rolls[r = r + 2];\n        else\n            score += rolls[r++] + rolls[r++];\n\n    return score;\n};", "let bowlingScore = frames => {\n    let rolls = [...frames]\n        .filter(s => s.trim())\n        .map((f, i, self) => f === \"X\" ? 10 : f === \"/\" ? 10 - parseInt(self[i - 1]) : parseInt(f));\n\n    let r = 0;\n    return Array(10).fill(0).map(() =>\n                       rolls[r] === 10  ? 10 + rolls[++r] + rolls[r + 1] : // strike\n        rolls[r] + rolls[r + 1] === 10  ? 10 + rolls[(r = r + 2)] :        // spare\n                                               rolls[r++] + rolls[r++]     // regular\n    ).reduce((a,b) => a + b, 0)\n};\n"]}}, {"name": "Large Factorials", "link": "https://www.codewars.com/kata/557f6437bf8dcdd135000010", "kuy": "4 kyu", "solutions": {"javascript": ["String.prototype.replaceZeros = function () {\n    return this.replace(/^0+/, '') || \"0\";\n};\n\nlet divMod = (a, b = 10) => [Math.floor(a / b), a % b];\n\nlet digits = (a, b) => Array(Math.max(a.length, b.length))\n    .fill(0)\n    .map((_, i) => [a[a.length - 1 - i] || \"0\", b[b.length - 1 - i] || \"0\"])\n    .map(arr => arr.map(i => parseInt(i)));\n\nlet add = (a, b) => {\n    let remainder = 0, value = \"\", n;\n\n    for (let [x, y] of digits(a, b)) {\n        [remainder, n] = divMod(x + y + remainder);\n        value = `${n}${value}`;\n    }\n\n    return `${remainder}${value}`.replaceZeros();\n};\n\nlet multiply = (a, b) => {\n    [a, b] = [a.replaceZeros(), b.replaceZeros()];\n\n    if (a === \"0\" || b === \"0\")\n        return \"0\";\n\n    [a, b] = a.length > b.length ? [a, b] : [b, a];\n\n    if (b.length === 1) {\n        let remainder = 0, value = \"\", n;\n        for (let [x,] of digits(a, b)) {\n            [remainder, n] = divMod(x * parseInt(b) + remainder);\n            value = `${n % 10}${value}`;\n        }\n\n        return `${remainder}${value}`.replaceZeros();\n    }\n\n    return [...b]\n        .reverse()\n        .reduce((acc, x, i) => add(acc, multiply(a, x) + \"0\".repeat(i)), \"0\")\n        .replaceZeros();\n};\n\nlet factorial = n => {\n    let res = \"1\";\n    for (let i = 2; i <= n; i++) {\n        res = multiply(res, i.toString());\n    }\n    return res;\n};"], "java": ["import java.math.BigDecimal;\n\npublic class Kata\n{\n\n    public static String Factorial(int n) {\n        BigDecimal bigDecimal = new BigDecimal(1);\n\n        for (int i = 2; i <= n; i++) {\n            bigDecimal = bigDecimal.multiply(new BigDecimal(i));\n        }\n\n        return bigDecimal.toString();\n    }\n\n}"]}}, {"name": "Brace expansion", "link": "https://www.codewars.com/kata/597f11f61fe82a80c200002c", "kuy": "4 kyu", "solutions": {"javascript": ["let expandBraces = str => {\n    let match = str.match(/{([^{}]*?)}/);\n\n    if (match === null)\n        return [str];\n\n    let [first, ...others] = match[1]\n        .split(\",\")\n        .map(s => expandBraces(str.replace(match[0], s)));\n\n    return first.reduce(\n        (\n            (acc, s, i) => first.length > 1 && others.every(c => c[i] === s)\n                ? [...acc, s]\n                : [...acc, first[i], ...others.map(c => c[i])]\n        ), []\n    );\n};"]}}, {"name": "Simple Syntax Tokenizing", "link": "https://www.codewars.com/kata/599a0d02755eae7070000079", "kuy": "4 kyu", "solutions": {"javascript": ["let valid_braces = tokens => {\n    while (tokens.includes('()'))\n        tokens = tokens.replace('()', '');\n    return tokens.length === 0;\n};\n\nfunction* parts(tokens) {\n    let s = \"\";\n    while (tokens.length > 0) {\n        let c = tokens.shift();\n\n        if (c === \"(\") {\n            yield s;\n            s = \"\";\n\n            let end = 0, brackets = 1;\n            for (let i = 0; i < tokens.length && brackets !== 0; i++, end++)\n                brackets += [1, -1][\"()\".indexOf(tokens[i])] || 0;\n\n            yield [tokens.splice(0, end).slice(0, -1).join(\"\")]\n        } else s += c;\n    }\n\n    if (s.length) yield s\n}\n\n\nlet tokenise = string => {\n    return !valid_braces(string.replace(/[^()]/g, '')) ? null : [...parts([...string])]\n        .map(s => Array.isArray(s) ? [tokenise(...s)] : s.match(/[!#$%&*+\\-\\/<=>@^_.,;]+|[a-zA-Z]+/g) || [])\n        .reduce((acc, s) => [...acc, ...s], []);\n};"]}}, {"name": "Functional Binary Trees", "link": "https://www.codewars.com/kata/527c1fc78699012e43000cc8", "kuy": "4 kyu", "solutions": {"javascript": ["function BinaryTree() {\n}\n\nfunction BinaryTreeNode(value, left = new EmptyBinaryTree, right = new EmptyBinaryTree) {\n    this.value = value;\n    this.left = left;\n    this.right = right;\n    Object.freeze(this);\n}\n\nBinaryTreeNode.prototype = new BinaryTree();\nBinaryTreeNode.prototype.constructor = BinaryTreeNode;\n\nBinaryTreeNode.prototype.isEmpty = function () {\n    return false;\n};\nBinaryTreeNode.prototype.depth = function () {\n    return 1 + Math.max(this.left.depth(), this.right.depth());\n};\n\nBinaryTreeNode.prototype.count = function () {\n    return 1 + this.left.count() + this.right.count();\n};\n\nBinaryTreeNode.prototype.inorder = function (fn) {\n    this.left.inorder(fn);\n    fn(this.value);\n    this.right.inorder(fn);\n};\nBinaryTreeNode.prototype.preorder = function (fn) {\n    fn(this.value);\n    this.left.preorder(fn);\n    this.right.preorder(fn);\n};\nBinaryTreeNode.prototype.postorder = function (fn) {\n    this.left.postorder(fn);\n    this.right.postorder(fn);\n    fn(this.value);\n};\n\nBinaryTreeNode.prototype.contains = function (x) {\n    return this.value === x || (x < this.value ? this.left.contains(x) : this.right.contains(x));\n};\nBinaryTreeNode.prototype.insert = function (x) {\n    if (x < this.value)\n        return new BinaryTreeNode(\n            this.value,\n            this.left.insert(x),\n            this.right\n        );\n    else\n        return new BinaryTreeNode(\n            this.value,\n            this.left,\n            this.right.insert(x),\n        );\n};\nBinaryTreeNode.prototype.remove = function (x) {\n    if (!this.contains(x))\n        return this;\n\n    if (x < this.value)\n        return new BinaryTreeNode(\n            this.value,\n            this.left.remove(x),\n            this.right\n        );\n    else if (x > this.value)\n        return new BinaryTreeNode(\n            this.value,\n            this.left,\n            this.right.remove(x)\n        );\n    else if (!this.left.isEmpty() && !this.right.isEmpty()) {\n        let minValue = this.right.findMinValue();\n        return new BinaryTreeNode(\n            minValue,\n            this.left,\n            this.right.remove(minValue),\n        )\n    } else\n        return !this.left.isEmpty() ? this.left : this.right;\n};\nBinaryTreeNode.prototype.findMinValue = function () {\n    return this.left.isEmpty() ? this.value : this.left.findMinValue();\n};\n\nfunction EmptyBinaryTree() {\n    Object.freeze(this);\n}\n\nEmptyBinaryTree.prototype = new BinaryTree();\n\nEmptyBinaryTree.prototype.constructor = EmptyBinaryTree;\n\nEmptyBinaryTree.prototype.isEmpty = function () {\n    return true;\n};\n\nEmptyBinaryTree.prototype.depth = function () {\n    return 0;\n};\n\nEmptyBinaryTree.prototype.count = function () {\n    return 0;\n};\n\n\nEmptyBinaryTree.prototype.inorder = function (fn) {\n};\n\nEmptyBinaryTree.prototype.preorder = function (fn) {\n};\n\nEmptyBinaryTree.prototype.postorder = function (fn) {\n};\n\nEmptyBinaryTree.prototype.contains = function (x) {\n    return false;\n};\n\nEmptyBinaryTree.prototype.insert = function (x) {\n    return new BinaryTreeNode(x);\n};\n\nEmptyBinaryTree.prototype.remove = function (x) {\n    return this;\n};"]}}, {"name": "Binary Search Tree using Arrays", "link": "https://www.codewars.com/kata/5303617c1f5c12fc28000237", "kuy": "4 kyu", "solutions": {"javascript": ["let toBSTArray = array => {\n    let bst = [];\n    let add = (value, root = 0) => {\n        if (bst[root] === undefined)\n            bst[root] = value;\n        else if (value < bst[root])\n            add(value, 2 * root + 1);\n        else\n            add(value, 2 * root + 2);\n    };\n    array.forEach(i => add(i));\n\n    return bst;\n};\n\nlet isBSTArray = (array, root = 0, min = Number.NEGATIVE_INFINITY, max = Number.POSITIVE_INFINITY) =>\n    array[root] === undefined || (\n        min <= array[root] && array[root] <= max\n        && isBSTArray(array, 2 * root + 1, min, array[root])\n        && isBSTArray(array, 2 * root + 2, array[root], max)\n    );\n\nlet toArray = bst => {\n    if (!isBSTArray(bst))\n        throw new Error('The parameter must be a BSTArray');\n\n    let array = [];\n    let travels = (root = 0) => {\n        if (bst[root] === undefined)\n            return;\n\n        travels(2 * root + 1);\n        array.push(bst[root]);\n        travels(2 * root + 2);\n    };\n    travels();\n\n    return array;\n};"]}}, {"name": "Arithmetic Expressions Evaluator", "link": "https://www.codewars.com/kata/529f5e262281a70d9b00088a", "kuy": "4 kyu", "solutions": {"javascript": ["let createOperator = (name, op) => {\n    class Operation extends Value {\n        constructor(left, right) {\n            super();\n            this.left = left;\n            this.right = right;\n        }\n\n        [\"eval\"]() {\n            return new Value(op(this.left.eval(), this.right.eval()));\n        }\n\n        toString() {\n            return `${this.left} ${name} ${this.right}`;\n        }\n    }\n\n    return Operation;\n};"]}}, {"name": "Combinations with identicals", "link": "https://www.codewars.com/kata/57fd8d7187b8012f4700062a", "kuy": "4 kyu", "solutions": {"javascript": ["// This code is translation of Python code:\n// https://stackoverflow.com/a/36430061/12243670\nlet counter = arr => {\n    let stats = new Map();\n    for (let i of arr) {\n        stats.set(i, stats.has(i) ? stats.get(i) + 1 : 1);\n    }\n    let values = [], counts = [];\n    for (let [value, count] of stats.entries()) {\n        values.push(value);\n        counts.push(count);\n    }\n    return [values, counts];\n};\n\nfunction* repeat(value, n) {\n    for (let i = 0; i < n; i++)\n        yield value\n}\n\nfunction* chain(...iterables) {\n    for (let iterable of iterables)\n        yield* iterable;\n}\n\nfunction* slice_start(iterable, n) {\n    let iterator = iterable[Symbol.iterator]();\n\n    for (let i = 0; i < n; i++)\n        iterator.next();\n\n    while (true) {\n        let next = iterator.next();\n\n        if (next.done)\n            break;\n\n        yield next.value;\n    }\n}\n\nfunction* slice_stop(iterable, n) {\n    let iterator = iterable[Symbol.iterator]();\n\n    for (let i = 0; i < n; i++) {\n        let next = iterator.next();\n        if (next.done)\n            break;\n\n        yield next.value;\n    }\n}\n\nfunction* map(func, ...iterables) {\n    for (let args of zip(...iterables))\n        yield func(...args);\n}\n\nfunction* count(n = 0) {\n    while (true) {\n        yield n;\n        n++;\n    }\n}\n\nfunction* zip(...iterables) {\n    let iterators = iterables.map(i => i[Symbol.iterator]());\n\n    while (true) {\n        let values = iterators.map(i => i.next());\n\n        if (values.some(i => i.done))\n            break;\n\n        yield values.map(i => i.value);\n    }\n}\n\nfunction* reversed(iterable) {\n    yield* [...iterable].reverse();\n}\n\nfunction* range(...args) {\n    let [start, end] = args.length === 2 ? args : [0, ...args];\n\n    while (start < end) {\n        yield start;\n        start++;\n    }\n}\n\nfunction* combineWithoutRepetitions(arr, r) {\n    let [values, counts] = counter(arr);\n\n    let f = (i, c) => chain(...map(repeat, i, c));\n\n    let n = counts.length;\n    let indices = [...slice_stop(f(count(), counts), r)];\n\n    if (indices.length < r)\n        return;\n\n    while (true) {\n        yield indices.map(i => values[i]).sort();\n\n        let flag = false, i;\n        for (let [ii, jj] of zip(reversed(range(r)), f(reversed(range(n)), reversed(counts)))) {\n            if (indices[ii] !== jj) {\n                flag = true;\n                i = ii;\n                break\n            }\n        }\n\n        if (!flag)\n            return;\n\n        let j = indices[i] + 1;\n\n        for (let [ii, jj] of zip(range(i, r), f(count(j), slice_start(counts, j, null))))\n            indices[ii] = jj\n    }\n}\n\nArray.prototype.combinations = function (n) {\n    if (!Number.isInteger(n) || n < 0)\n        throw Error();\n\n    return [...combineWithoutRepetitions(this, n)];\n};"]}}, {"name": "arrayToString and stringToArray", "link": "https://www.codewars.com/kata/582087e5b81f7063a7000242", "kuy": "4 kyu", "solutions": {"javascript": ["let findDuplicates = arr => {\n    let dups = 1;\n    for (let i = 1; i < arr.length; i++, dups++)\n        if (arr[i] !== arr[0])\n            break;\n\n    if (dups < 3)\n        return [0, null];\n\n    return [dups, `${arr[0]}:${dups}`];\n};\n\nlet findSequence = arr => {\n    let step = arr[1] - arr[0], seq = 2, additional = [], total;\n\n    for (let i = 1; i < arr.length - 1; i++, seq++)\n        if (arr[i + 1] - arr[i] !== step)\n            break;\n\n    if (seq < 3)\n        return [0, null];\n\n    total = seq;\n    let [next_seq, res] = findSequence(arr.slice(seq - 1));\n\n    if (seq > 3 && next_seq === 3) {\n        [seq, total, additional] = [seq - 1, total + next_seq - 1, [res]];\n    }\n\n    step = step < 0 ? step : `+${step}`;\n    return [total, [`${arr[0]}:${seq}${step}`, ...additional].join()];\n};\n\nlet findOne = arr => [1, `${arr[0]}`];\n\nlet arrayToString = arr => {\n    let res = [], skip, part;\n\n    while (arr.length) {\n        for (let folder of [findDuplicates, findSequence, findOne]) {\n            [skip, part] = folder(arr);\n            if (skip !== 0) break;\n        }\n        res.push(part);\n        arr.splice(0, skip);\n    }\n\n    return res.join();\n};\n\nlet stringToArray = str => str.split(\",\").map(s => {\n    if (s.match(/^\\d+$/)) {\n        return [parseInt(s)];\n    } else if (s.match(/^[+-]?\\d+:[+-]?\\d+$/)) {\n        let [n, c] = s.match(/[+-]?\\d+/g).map(i => parseInt(i));\n        return Array(c).fill(parseInt(n));\n    } else {\n        let [start, c, step] = s.match(/[+-]?\\d+/g).map(i => parseInt(i));\n        return Array(c).fill(0).map((_, i) => start + step * i);\n    }\n}).reduce((acc, arr) => [...acc, ...arr], []);"]}}, {"name": "Deep Assignment", "link": "https://www.codewars.com/kata/56242a31689c352359000044", "kuy": "4 kyu", "solutions": {"javascript": ["let deepAssignment = (obj, keyPath, value) => {\n    let parts = keyPath.match(/[a-zA-Z_]+|\\d+/g).map(s => s.match(/\\d+/g) ? parseInt(s) : s);\n    let getNext = (current, i) => {\n        let next = Number.isInteger(parts[i + 1]) ? [] : {};\n        return current !== undefined && Array.isArray(next) === Array.isArray(current) ? current : next;\n    };\n    parts.slice(0, -1).reduce(\n        (acc, attr, i) => acc[attr] = getNext(acc[attr], i), obj\n    )[parts[parts.length - 1]] = value;\n};\n"]}}, {"name": "Multiplying numbers as strings", "link": "https://www.codewars.com/kata/55911ef14065454c75000062", "kuy": "4 kyu", "solutions": {"javascript": ["String.prototype.replaceZeros = function () {\n    return this.replace(/^0+/, '') || \"0\";\n};\n\nlet divMod = (a, b = 10) => [Math.floor(a / b), a % b];\n\nlet digits = (a, b) => Array(Math.max(a.length, b.length))\n    .fill(0)\n    .map((_, i) => [a[a.length - 1 - i] || \"0\", b[b.length - 1 - i] || \"0\"])\n    .map(arr => arr.map(i => parseInt(i)));\n\nlet add = (a, b) => {\n    let remainder = 0, value = \"\", n;\n\n    for (let [x, y] of digits(a, b)) {\n        [remainder, n] = divMod(x + y + remainder);\n        value = `${n}${value}`;\n    }\n\n    return `${remainder}${value}`.replaceZeros();\n};\n\nlet multiply = (a, b) => {\n    [a, b] = [a.replaceZeros(), b.replaceZeros()];\n\n    if (a === \"0\" || b === \"0\")\n        return \"0\";\n\n    [a, b] = a.length > b.length ? [a, b] : [b, a];\n\n    if (b.length === 1) {\n        let remainder = 0, value = \"\", n;\n        for (let [x,] of digits(a, b)) {\n            [remainder, n] = divMod(x * parseInt(b) + remainder);\n            value = `${n % 10}${value}`;\n        }\n\n        return `${remainder}${value}`.replaceZeros();\n    }\n\n    return [...b]\n        .reverse()\n        .reduce((acc, x, i) => add(acc, multiply(a, x) + \"0\".repeat(i)), \"0\")\n        .replaceZeros();\n};"], "c++": ["#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring removeZero(string str) {\n    auto i = 0;\n    while (str[i] == '0')\n        i++;\n\n    str.erase(0, i);\n    return str;\n}\n\nint getOrNull(vector<int> &arr, int pos) {\n    return pos < arr.size() ? arr.at(pos) : 0;\n}\n\nstring multiply(string a, string b) {\n\n    if (a.length() < b.length()) {\n        a.insert(0, string(b.length() - a.length(), '0'));\n    } else if (b.length() < a.length()) {\n        b.insert(0, string(a.length() - b.length(), '0'));\n    }\n\n    vector<vector<int>> table;\n\n    for (int i = a.length() - 1; i >= 0; i--) {\n        auto ost = 0;\n        vector<int> row;\n\n        for (int j = b.length() - 1; j >= 0; j--) {\n            auto item = (a[i] - '0') * (b[j] - '0') + ost;\n            ost = item / 10;\n            item %= 10;\n\n            row.push_back(item);\n        }\n\n        row.push_back(ost);\n        table.push_back(row);\n    }\n\n    for (int i = 1; i < table.size(); i++) {\n        auto &row = table[i];\n        for (int j = 0; j < i; j++) {\n            row.insert(row.begin(), 0);\n        }\n    }\n\n    auto &row = table.at(table.size() - 1);\n    string res = \"\";\n    auto ost = 0;\n\n    for (auto i = 0; i < row.size(); i++) {\n        auto n = ost;\n        for (auto r : table) {\n            n += getOrNull(r, i);\n        }\n\n        ost = n / 10;\n        n %= 10;\n        res.insert(res.begin(), '0' + n);\n    }\n    res.insert(res.begin(), '0' + ost);\n\n    res = removeZero(res);\n    return res.empty() ? \"0\" : res;\n}"]}}, {"name": "How many numbers III?", "link": "https://www.codewars.com/kata/5877e7d568909e5ff90017e6", "kuy": "4 kyu", "solutions": {"python": ["def numbers(digits, start=1):\n    if digits == 1:\n        for i in range(start, 10):\n            yield str(i)\n    else:\n        for i in range(start, 10):\n            for j in numbers(digits - 1, i):\n                yield str(i) + j\n\n\ndef find_all(sum_dig, digs):\n    if sum(map(int, str(int('1' + '0' * digs) - 1))) < sum_dig:\n        return []\n\n    min_num = max_num = None\n    counter = 0\n    for i in numbers(digs):\n        if sum(map(int, i)) == sum_dig:\n            if min_num is None:\n                min_num = i\n            max_num = i\n            counter += 1\n\n    return [counter, int(min_num), int(max_num)]"], "javascript": ["String.prototype.sum = function () {\n    return [...this].map(s => parseInt(s)).reduce((a, b) => a + b, 0);\n};\n\nfunction* numbers(digits, start = 1) {\n    if (digits === 1)\n        for (let i = start; i < 10; i++)\n            yield `${i}`;\n    else\n        for (let i = start; i < 10; i++)\n            for (let j of numbers(digits - 1, i))\n                yield `${i}${j}`;\n}\n\nlet findAll = (n, k) => {\n    if (\"9\".repeat(k).sum() < n)\n        return [];\n\n    let all = [...numbers(k)].filter(s => s.sum() === n);\n    return [all.length, all[0], all[all.length - 1]];\n};"]}}, {"name": "Sum Strings as Numbers", "link": "https://www.codewars.com/kata/5324945e2ece5e1f32000370", "kuy": "4 kyu", "solutions": {"javascript": ["let sumStrings = (a, b) => {\n    a = [...a.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n    b = [...b.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n\n    let remainder = 0, value = \"\";\n    for (let i = 0; i < a.length; i++) {\n        let n = parseInt(a[i]) + parseInt(b[i]) + remainder;\n        value = `${n % 10}${value}`;\n        remainder = Math.floor(n / 10);\n    }\n\n    return `${remainder}${value}`.replace(/^0+/, '');\n};"], "c++": ["#include <algorithm>\n#include <iostream>\n#include <string>\n\nstd::string removeZero(std::string str)\n{\n\tint i = 0;\n\twhile (str[i] == '0')\n\t\ti++;\n\n\tstr.erase(0, i);\n\treturn str;\n}\n\nstd::string sum_strings(std::string a, std::string b) {\n\tstd::cout << a << std::endl;\n\tstd::cout << b << std::endl;\n\n\tstd::reverse(a.begin(), a.end());\n\tstd::reverse(b.begin(), b.end());\n\n\tstd::string *shoter;\n\tstd::string *longer;\n\n\tif (a.size() > b.size()) {\n\t\tshoter = &b;\n\t\tlonger = &a;\n\t}\n\telse {\n\t\tshoter = &a;\n\t\tlonger = &b;\n\t}\n\n\tint repeats = longer->size() - shoter->size();\n\tfor (int i = 0; i < repeats; i++) {\n\t\t*shoter += \"0\";\n\t}\n\n\tint ost = 0;\n\tstd::string res = \"\";\n\tfor (int i = 0; i < longer->size(); i++) {\n\t\tstd::string n = std::to_string(a.at(i) - '0' + b.at(i) - '0' + ost);\n\t\tif (n.size() == 2) {\n\t\t\tres += n.at(1);\n\t\t\tost = n.at(0) - '0';\n\t\t}\n\t\telse {\n\t\t\tres += n;\n\t\t\tost = 0;\n\t\t}\n\t}\n\n\tif (ost != 0) {\n\t\tres += std::to_string(ost);\n\t}\n\n\tstd::reverse(res.begin(), res.end());\n\treturn res == \"0\" ? res : removeZero(res);\n}"]}}, {"name": "Pyramid Slide Down", "link": "https://www.codewars.com/kata/551f23362ff852e2ab000037", "kuy": "4 kyu", "solutions": {"javascript": ["function longestSlideDown(pyramid) {\n    for (let i = pyramid.length - 2; i >= 0; i--)\n        for (let j = 0; j < pyramid[i].length; j++)\n            pyramid[i][j] += Math.max(pyramid[i + 1][j], pyramid[i + 1][j + 1]);\n\n    return pyramid[0][0];\n}"], "python": ["def longest_slide_down(p):\n    for i in xrange(len(p) - 2, -1, -1):\n        for j in xrange(len(p[i])):\n            p[i][j] += max(p[i + 1][j], p[i + 1][j + 1])\n\n    return p[0][0]", "def longest_slide_down(p):\n    for i in xrange(len(p) - 2, -1, -1):\n        for j in xrange(len(p[i])):\n            p[i][j] += max(p[i + 1][j], p[i + 1][j + 1])\n\n    return p[0][0]"]}}, {"name": "Strip Comments", "link": "https://www.codewars.com/kata/51c8e37cee245da6b40000bd", "kuy": "4 kyu", "solutions": {"python": ["def solution(string, markers):\n    lines = []\n    for s in string.split('\\n'):\n        for m in markers:\n            s = s.split(m)[0].strip()\n\n        lines.append(s)\n\n    return '\\n'.join(lines)"], "javascript": ["let solution = (s, m) => s.replace(RegExp(`\\\\s*[${m.join(\"\")}].*`, 'gm'),\"\",);"]}}, {"name": "Most frequently used words in a text", "link": "https://www.codewars.com/kata/51e056fe544cf36c410000fb", "kuy": "4 kyu", "solutions": {"python": ["from collections import Counter\n\ndef top_3_words(text):\n    s = ''.join(t if t.isalnum() or t == \"'\" else ' ' for t in text.lower())\n    return [i for i, _ in Counter(i for i in s.split() if len(i) != i.count(\"'\")).most_common(3)]\n"], "javascript": ["let topThreeWords = text => {\n    let stats = {};\n\n    text.toLowerCase()\n        .replace(\n            /[a-z0-9']+/g,\n            word => word !== \"'\" ? stats[word] = (stats[word] || 0) + 1 : \"\"\n        );\n\n    return Object\n        .keys(stats)\n        .sort((a, b) => stats[b] - stats[a])\n        .slice(0, 3);\n};", "let topThreeWords = text => {\n    let stats = {};\n\n    text.toLowerCase()\n        .replace(/[^a-z0-9']+/g, ' ')\n        .split(/\\s+/)\n        .filter(s => s.match(/\\w+/))\n        .forEach(word => stats[word] = (stats[word] || 0) + 1);\n\n    return Object\n        .keys(stats)\n        .sort((a, b) => stats[b] - stats[a])\n        .slice(0, 3);\n};", "let topThreeWords = text => {\n    let stats = {};\n\n    text.toLowerCase()\n        .replace(/[^a-z0-9']+/g, ' ')\n        .split(/\\s+/)\n        .filter(s => s.match(/\\w+/))\n        .forEach(word => stats[word] = (stats[word] || 0) + 1);\n\n    return Object\n        .entries(stats)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 3)\n        .map(a => a[0]);\n};"]}}, {"name": "Nesting Structure Comparison", "link": "https://www.codewars.com/kata/520446778469526ec0000001", "kuy": "4 kyu", "solutions": {"python": ["def same_structure_as(original, other):\n    f = lambda a: [{'arr': f(i)} for i in a] if hasattr(a, '__iter__') else [{'val': True}]\n    return isinstance(original, type(other)) and f(original) == f(other)\n"], "javascript": ["Array.prototype.sameStructureAs = function (other) {\n    let compare = a => Array.isArray(a) ? a.map(compare) : 0;\n    return JSON.stringify(compare(this)) === JSON.stringify(compare(other));\n};"]}}, {"name": "Permutations", "link": "https://www.codewars.com/kata/5254ca2719453dcc0b00027d", "kuy": "4 kyu", "solutions": {"python": ["from itertools import permutations as per\n\ndef permutations(string):\n    return list(set(map(''.join, per(string))))\n"], "javascript": ["function* _permutations(a) {\n    if (a.length === 1) {\n        yield a;\n    } else {\n        for (let i = 0; i < a.length; i++) {\n            for (let e of _permutations([...a.slice(0, i), ...a.slice(i + 1)])) {\n                yield [a[i], ...e];\n            }\n        }\n    }\n}\n\nlet permutations = s => [...new Set([..._permutations([...s])].map(a => a.join(\"\")))];\n", "function* _permutations(arr) {\n    if (arr.length === 1) {\n        yield arr;\n    } else {\n        for (let i = 0; i < arr.length; i++) {\n            let sub = [...arr.slice(0, i), ...arr.slice(i + 1, arr.length)];\n\n            for (let a of _permutations(sub)) {\n                yield [arr[i], ...a];\n            }\n        }\n    }\n}\n\nlet permutations = string => [...new Set([..._permutations([...string])].map(a => a.join(\"\")))];", "function* _permutations(arr) {\n    if (arr.length === 1) {\n        for (let a of arr) {\n            yield [a];\n        }\n    } else {\n        for (let i = 0; i < arr.length; i++) {\n            let sub = [...arr.slice(0, i), ...arr.slice(i + 1, arr.length)];\n\n            for (let a of _permutations(sub)) {\n                yield [arr[i], ...a];\n            }\n        }\n    }\n}\n\nlet permutations = string => [...new Set([..._permutations([...string])].map(a => a.join(\"\")))];\n"]}}, {"name": "Haskell List Comprehension (ii)", "link": "https://www.codewars.com/kata/53c8bcb1689f84238c000661", "kuy": "4 kyu", "solutions": {"javascript": ["let comprehension = options => {\n    let g = (options.generator || \"\").replace(/\\s/g, \"\");\n    if (!g) {\n        return [];\n    } else if (!g.includes(\"..\")) {\n        return g.split(\",\").map(s => Number.parseInt(s));\n    }\n\n    let start, second, end, step;\n    if (g.includes(\",\")) {\n        [start, second, end] = g.split(/,|\\.{2}/).map(s => Number.parseInt(s));\n        step = second - start;\n    } else {\n        [start, end] = g.split(\"..\").map(s => Number.parseInt(s));\n        step = 1;\n    }\n\n    let arr = [];\n    while (step > 0 ? start <= end : start >= end) {\n        arr.push(start);\n        start += step;\n    }\n    return arr;\n};\n\n\nlet ArrayComprehension = options => comprehension(options)\n    .filter(a => options.filters ? options.filters.every(f => f(a)) : true)\n    .map(options.transform || (a => a));\n"]}}, {"name": "Like itertools : combinations", "link": "https://www.codewars.com/kata/582da6ba06e37f9b75000510", "kuy": "4 kyu", "solutions": {"javascript": ["function* icombinations(arr, k) {\n    if (arr.length < k) {\n        return null;\n    } else if (k === 1) {\n        yield* arr.map(i => [i]);\n    } else {\n        for (let i = 0; i < arr.length; i++) {\n            for (let j of icombinations(arr.slice(i + 1, arr.length), k - 1)) {\n                yield [arr[i], ...j];\n            }\n        }\n    }\n}", "function* icombinations(arr, k) {\n    if (arr.length < k) {\n        return null;\n    } else if (k === 1) {\n        yield* arr.map(i => [i]);\n    } else {\n        for (let i = 0; i < arr.length; i++) {\n            let [ii, ...slice] = arr.slice(i, arr.length);\n            for (let j of icombinations(slice, k - 1)) {\n                yield [ii, ...j];\n            }\n        }\n    }\n}"]}}, {"name": "Advanced Events", "link": "https://www.codewars.com/kata/52d4678038644497e900007c", "kuy": "4 kyu", "solutions": {"javascript": ["function Event() {\n    let hnlds = [];\n    this.subscribe = function (...args) {\n        hnlds.push(...args.filter(h => typeof h === 'function'));\n    };\n    this.unsubscribe = function (...args) {\n        args.filter(h => typeof h === 'function' && hnlds.includes(h))\n            .forEach(h => hnlds.splice(hnlds.lastIndexOf(h), 1));\n    };\n    this.emit = function (...args) {\n        [...hnlds].forEach(h => h.apply(this, args));\n    };\n}", "function Event() {\n    let thisHandlers = [];\n    let callbacks = [];\n    let inEmit = false;\n\n    this.subscribe = function (...handlers) {\n        if (inEmit) {\n            callbacks.push(() => this.subscribe(...handlers));\n        } else {\n            thisHandlers.push(...handlers.filter(h => typeof h === 'function'));\n        }\n    };\n    this.unsubscribe = function (...handlers) {\n        if (inEmit) {\n            callbacks.push(() => this.unsubscribe(...handlers));\n        } else {\n            handlers\n                .filter(h => typeof h === 'function')\n                .forEach(h => {\n                    if (thisHandlers.includes(h)) {\n                        thisHandlers.splice(thisHandlers.lastIndexOf(h), 1);\n                    }\n                });\n        }\n    };\n    this.emit = function (...args) {\n        inEmit = true;\n        callbacks.length = 0;\n        thisHandlers.forEach(h => h.apply(this, args));\n        inEmit = false;\n        callbacks.forEach(h => h());\n    };\n}\n"]}}, {"name": "YACK (Yet Another Currying Kata)", "link": "https://www.codewars.com/kata/55f91566e0d2317066000057", "kuy": "4 kyu", "solutions": {"javascript": ["function yack(func, ...initArgs) {\n    let create = f => (...args) => {\n        let carried = (...a) => f(...a);\n        carried.args = [...(f.args || []), ...args];\n        carried.len = f.len || f.length;\n        carried.wraps = f;\n        return carried.args.length >= carried.len ? carried(...carried.args) : create(carried);\n    };\n\n    return create(func.wraps || func)(...initArgs);\n}", "function getArgs(func) {\n    return (func + '')\n        .replace(/[/][/].*$/mg, '')\n        .replace(/\\s+/g, '')\n        .replace(/[/][*][^/*]*[*][/]/g, '')\n        .split('){', 1)[0].replace(/^[^(]*[(]/, '')\n        .replace(/=[^,]+/g, '')\n        .split(',').filter(Boolean);\n}\n\nfunction yack(func, ...initArgs) {\n    let create = f => (...args) => {\n        function carried(...a) {\n            return f(...a);\n        }\n\n        Object.assign(carried, {\n            args: [...(f.args || []), ...args],\n            len: f.len || getArgs(f).length,\n            wraps: f\n        });\n        return carried.args.length >= carried.len ? carried(...carried.args) : create(carried);\n    };\n\n    return create(func.wraps || func)(...initArgs);\n}"]}}, {"name": "Fluent Calculator", "link": "https://www.codewars.com/kata/5578a806350dae5b05000021", "kuy": "4 kyu", "solutions": {"javascript": ["const numbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];\n\nclass Value {\n    constructor(value) {\n        this.value = value;\n        this.operations = {\n            plus: a => value + a,\n            minus: a => value - a,\n            times: a => value * a,\n            dividedBy: a => value / a\n        };\n        return new Proxy(this, this);\n    }\n\n    get(target, prop) {\n        return prop in this.operations ? new Stage(this.operations[prop]) : this[prop];\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.value;\n    }\n}\n\nclass Stage {\n    constructor(parent) {\n        this.parent = parent || (a => a);\n        return new Proxy(this, this);\n    }\n\n    get(target, prop) {\n        return numbers.includes(prop) ? new Value(this.parent(numbers.indexOf(prop))) : this[prop];\n    }\n}\n\nlet FluentCalculator = new Stage();\n"]}}, {"name": "Count the connected components", "link": "https://www.codewars.com/kata/55eaf138c1f4e9eef1000047", "kuy": "4 kyu", "solutions": {"javascript": ["let findVisited = edges => {\n    let start = Object.keys(edges)[0];\n\n    let queue = [start];\n    let visited = [start];\n\n    while (queue.length > 0) {\n        (edges[queue.shift()] || [])\n            .filter(n => !visited.includes(n))\n            .forEach(n => {\n                visited.push(n);\n                queue.push(n)\n            });\n    }\n    return visited;\n};\n\nfunction countDistricts(city) {\n    let districts = [];\n\n    while (Object.keys(city).length > 0) {\n        let district = findVisited(city);\n        district.forEach(key => delete city[key]);\n        districts.push(district);\n    }\n\n    return districts.length;\n}"]}}, {"name": "Sum of Intervals", "link": "https://www.codewars.com/kata/52b7ed099cdc285c300001cd", "kuy": "4 kyu", "solutions": {"python": ["from itertools import chain\n\n\ndef sum_of_intervals(intervals):\n    return len(set(chain.from_iterable(range(i, j) for i, j in intervals)))\n", "def sum_of_intervals(intervals):\n    current, *intervals = map(list, sorted(intervals, key=lambda i: i[0]))\n    res = [current]\n\n    for start, end in filter(lambda a: res[-1][0] > a[0] or res[-1][1] < a[1], intervals):\n        if start <= res[-1][1] <= end:\n            res[-1][1] = end\n        else:\n            res.append([start, end])\n\n    return sum(b - a for a, b in res)"], "javascript": ["let sumIntervals = intervals => {\n  let values = new Set();\n  for (let [start, end] of intervals){\n    for (let i = start; i < end; i++){\n      values.add(i);\n    }\n  }\n  return values.size;\n}"]}}, {"name": "-Reverse it, quickly!", "link": "https://www.codewars.com/kata/59ae589c07157afba80000a7", "kuy": "4 kyu", "solutions": {"javascript": ["weirdReverse=a=>a.sort(x=>1)"]}}, {"name": "Determining if a graph has a solution", "link": "https://www.codewars.com/kata/53223653a191940f2b000877", "kuy": "4 kyu", "solutions": {"javascript": ["function solve_graph(start, end, arcs) {\n    let edges = {};\n    for (let node of arcs) {\n        edges[node.start] = [...(edges[node.start] || []), node.end];\n    }\n    let queue = [start];\n    let visited = [start];\n\n    while (queue.length > 0) {\n        (edges[queue.shift()] || []).filter(n => !visited.includes(n))\n            .forEach(n => {visited.push(n);queue.push(n)});\n\n        if (visited.includes(end)) {\n            return true;\n        }\n    }\n    return false;\n}"]}}, {"name": "Undo/Redo", "link": "https://www.codewars.com/kata/531489f2bb244a5b9f00077e", "kuy": "4 kyu", "solutions": {"javascript": ["class States {\n\n    constructor(object) {\n        this.object = object;\n        this.reduStates = [];\n        this.undoStates = [];\n    }\n\n    setState(source) {\n        Object.keys(this.object).forEach(prop => delete this.object[prop]);\n        Object.assign(this.object, source);\n    }\n\n    set(key, value) {\n        this.reduStates.length = 0;\n        this.undoStates.push(Object.assign({}, this.object));\n        this.object[key] = value;\n    }\n\n    get(key) {\n        return this.object[key];\n    }\n\n    del(key) {\n        this.reduStates.length = 0;\n        this.undoStates.push(Object.assign({}, this.object));\n        delete this.object[key];\n    }\n\n    undo() {\n        if (this.undoStates.length === 0) {\n            throw new Error();\n        }\n\n        let state = this.undoStates.pop();\n        this.reduStates.push(Object.assign({}, this.object));\n        this.setState(state);\n    }\n\n    redo() {\n        if (this.reduStates.length === 0) {\n            throw new Error();\n        }\n\n        let state = this.reduStates.pop();\n        this.undoStates.push(Object.assign({}, state));\n        this.setState(state);\n    }\n}\n\nlet undoRedo = object => new States(object);\n"]}}, {"name": "UriBuilder", "link": "https://www.codewars.com/kata/51eead3461ccf7db04000017", "kuy": "4 kyu", "solutions": {"javascript": ["let parseQuery = queryString => queryString.split('&')\n    .map(s => s.split('='))\n    .reduce((root, [key, value]) => {\n        root[decodeURIComponent(key)] = decodeURIComponent(value);\n        return root;\n    }, {});\n\nclass UriBuilder {\n    constructor(url) {\n        if (url.includes('?')) {\n            let [u, query] = url.split('?');\n            this.url = u;\n            this.params = parseQuery(query);\n        } else {\n            this.url = url;\n            this.params = {};\n        }\n    }\n\n    build() {\n        return this.url + (Object.keys(this.params).length === 0 ? '' : '?' +\n                Object.entries(this.params).map(([k, v]) => encodeURI(k) + '=' + encodeURI(v)).join('&')\n        );\n    }\n}"]}}, {"name": "Objectify a URL Query String", "link": "https://www.codewars.com/kata/5286d92ec6b5a9045c000087", "kuy": "4 kyu", "solutions": {"javascript": ["let namespace = (root, path, value) => {\n    let fields = path.split('.'), cur = root;\n    fields.forEach((field, i) => cur = cur[field] = i === fields.length - 1 ? value : cur[field] || {});\n    return root;\n};\n\nlet parseQuery = queryString => queryString.split('&')\n    .map(s => s.split('='))\n    .reduce((root, [key, value]) => {\n        namespace(root, decodeURIComponent(key), decodeURIComponent(value));\n        return root;\n    }, {});\n\nlet convertQueryToMap = query => query.length === 0 ? \"\" : parseQuery(query);"]}}, {"name": "Dependency Injection", "link": "https://www.codewars.com/kata/5302d655be2a91068b0001fb", "kuy": "4 kyu", "solutions": {"javascript": ["function getArgs(func) {\n    return (func + '')\n        .replace(/[/][/].*$/mg, '')\n        .replace(/\\s+/g, '')\n        .replace(/[/][*][^/*]*[*][/]/g, '')\n        .split('){', 1)[0].replace(/^[^(]*[(]/, '')\n        .replace(/=[^,]+/g, '')\n        .split(',').filter(Boolean);\n}\n\nlet DI = function (dependency) {\n    this.dependency = dependency;\n};\n\nDI.prototype.inject = function (func) {\n    return () => func(...getArgs(func).map(arg => this.dependency[arg]));\n};"]}}, {"name": "Remove Zeros", "link": "https://www.codewars.com/kata/52aae14aa7fd03d57400058f", "kuy": "4 kyu", "solutions": {"javascript": ["function removeZeros(array) {\n    let str = '';\n    let index = 0;\n\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] === 0) {\n            str += '0';\n        } else if (array[i] === '0') {\n            str += '1';\n        } else {\n            array[index++] = array[i];\n        }\n    }\n\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        array[index++] = str[i] === '0' ? 0 : '0';\n    }\n    return array;\n}\n"]}}, {"name": "Curry me softly", "link": "https://www.codewars.com/kata/55ba24f1cb367c48ac0000a2", "kuy": "4 kyu", "solutions": {"javascript": ["function CurryIt(func) {\n    let [fixedArgs, objThis] = [[], null];\n    return function (...args) {\n        objThis = this !== global ? this : objThis;\n        if (args.length === 0) {\n            let r = func.call(objThis, ...fixedArgs);\n            fixedArgs.length = 0;\n            return r;\n        }\n        fixedArgs.push(...args);\n        return this;\n    }\n}"]}}, {"name": "ES5 Generators(i)", "link": "https://www.codewars.com/kata/53c29a6abb5187180d000b65", "kuy": "4 kyu", "solutions": {"javascript": ["let generator = (sequencer, ...args) => {\n    let iter = sequencer(...args);\n    return {next: () => iter()}\n};\n\nlet dummySeq = () => () => \"dummy\";\n\n\nlet factorialSeq = () => {\n    let [start, accum] = [0, 1];\n    return () => {\n        if (start === 0) {\n            start++;\n            return accum;\n        }\n        accum *= start;\n        start++;\n        return accum;\n    }\n};\n\nlet fibonacciSeq = () => {\n    let [prev, curr] = [0, 1];\n    return () => {\n        let v = curr;\n        [prev, curr] = [curr, prev + curr];\n        return v;\n    }\n};\n\nlet rangeSeq = (start, step) => () => {\n    let v = start;\n    start += step;\n    return v;\n};\n\n\nconst isPrime = num => {\n    for (let i = 2; i < num; i++)\n        if (num % i === 0) return false;\n    return num > 1;\n};\n\nlet primeSeq = () => {\n    let i = 0;\n    return () => {\n        while (!isPrime(i)) {\n            i++;\n        }\n        return i++;\n    }\n};\n\nlet partialSumSeq = (...args) => {\n    let [i, s] = [0, 0];\n    return () => {\n        if (i >= args.length) {\n            throw Error();\n        }\n        s += args[i++];\n        return s;\n    }\n};"]}}, {"name": "Born to be chained", "link": "https://www.codewars.com/kata/54c27ef1fb7da0118600046a", "kuy": "4 kyu", "solutions": {"javascript": ["function chain(fns, prev, fn, args) {\n    let c = {prev: prev, state: fn !== undefined ? {'fn': fn, 'args': args} : null};\n    c['execute'] = function () {\n        let baseArgs = c.prev.prev !== undefined ? [c.prev.execute()] : [];\n        return this.state === null ? [] : this.state['fn'](...baseArgs, ...this.state.args);\n    };\n    Object.entries(fns).forEach(value => c[value[0]] = (...args) => chain(fns, c, value[1], args));\n    return c;\n}"]}}, {"name": "Default Arguments", "link": "https://www.codewars.com/kata/52605419be184942d400003d", "kuy": "4 kyu", "solutions": {"javascript": ["function getArgs(func) {\n    return (func + '')\n        .replace(/[/][/].*$/mg, '')\n        .replace(/\\s+/g, '')\n        .replace(/[/][*][^/*]*[*][/]/g, '')\n        .split('){', 1)[0].replace(/^[^(]*[(]/, '')\n        .replace(/=[^,]+/g, '')\n        .split(',').filter(Boolean);\n}\n\nfunction defaultArguments(func, params) {\n    let funcArgs = func.__args__ || getArgs(func);\n    let wrapped = (...args) => func(...funcArgs.map((name, i) =>\n        i < args.length ? args[i] : (args[i] === undefined ? params[funcArgs[i]] : args[i])\n    ));\n\n    wrapped.__args__ = funcArgs;\n    return wrapped;\n}"]}}, {"name": "Name Your Space", "link": "https://www.codewars.com/kata/514b6c44a337752e67000077", "kuy": "4 kyu", "solutions": {"javascript": ["    function namespace(root, path, value) {\n        let paths = path.split('.');\n        let holder = root;\n\n        if (value === undefined) {\n            for (let attr of paths) {\n                if (!(attr in holder)) {\n                    return undefined;\n                }\n                holder = holder[attr];\n            }\n            return holder;\n        } else {\n            for (let attr of paths.slice(0, paths.length - 1)) {\n                if (!(attr in holder)) {\n                    let obj = {};\n                    holder[attr] = obj;\n                    holder = obj;\n                } else {\n                    holder = holder[attr];\n                }\n            }\n\n            holder[paths[paths.length - 1]] = value;\n        }\n    }"]}}], "5 kyu": [{"name": "field chained HTML formatting ", "link": "https://www.codewars.com/kata/5e98a87ce8255200011ea60f", "kuy": "5 kyu", "solutions": {"javascript": ["let format = (tags = []) => {\n    let callback = (...args) => (\n        tags.map(t => `<${t}>`).join('') + args.join('') + tags.reverse().map(t => `</${t}>`).join('')\n    );\n\n    for (let tag of ['div', 'h1', 'p', 'span'])\n        Object.defineProperty(callback, tag, {get: () => format([...tags, tag])});\n\n    return callback;\n}\n\nlet Format = format();"]}}, {"name": "Compose functions (T Combinator)", "link": "https://www.codewars.com/kata/51f9d3db4095e07f130001ee", "kuy": "5 kyu", "solutions": {"javascript": ["let compose = (val, ...reducers) => reducers.reduce((acc, f) => f(acc), val)"]}}, {"name": "Object extend", "link": "https://www.codewars.com/kata/51f9d3a6e5a42591ae0001eb", "kuy": "5 kyu", "solutions": {"javascript": ["let extend = (...args) => Object.assign({}, ...args.filter(obj => isObject(obj)).reverse());"]}}, {"name": "Replicate `new`", "link": "https://www.codewars.com/kata/558cb3df5f511f40d500001d", "kuy": "5 kyu", "solutions": {"javascript": ["function nouveau (f, ...args) {\n  let proto = Object(f.prototype) === f.prototype ? f.prototype : Object.prototype;\n  let obj = Object.create(proto);\n  let ret = f.apply(obj, args);\n  return Object(ret) === ret ? ret : obj;  \n}"]}}, {"name": "Randomize Objects", "link": "https://www.codewars.com/kata/5303229f1f5c12ef39000061", "kuy": "5 kyu", "solutions": {"javascript": ["let shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nObject.prototype.random = function () {\n    let arr = this.toRandomArray();\n    return arr[Math.floor(Math.random() * arr.length)];\n};\n\nObject.prototype.toRandomArray = function () {\n    let arr = [];\n\n    Object.entries(this).map(([key, value]) => {\n        arr.push(...(typeof value === \"object\" ? value.toRandomArray() : [value]))\n    });\n\n    return shuffle(arr);\n};"]}}, {"name": "Using closures to share class state", "link": "https://www.codewars.com/kata/53583765d5493bfdf5001b35", "kuy": "5 kyu", "solutions": {"javascript": ["var Cat = (() => {\n    let cats = [];\n\n    return class Cat {\n        constructor(name, weight) {\n            if (!name || !weight)\n                throw Error();\n\n            Object.defineProperty(this, \"weight\", {\n                get: () => this._weight,\n                set: (v) => (this._weight = v)\n            })\n\n            this.name = name;\n            this.weight = weight;\n            cats.push(this);\n        }\n\n        static averageWeight() {\n            return cats.map(c => c.weight).reduce((a, b) => a + b) / cats.length;\n        }\n    }\n})();"]}}, {"name": "Function Cache", "link": "https://www.codewars.com/kata/525481903700c1a1ff0000e1", "kuy": "5 kyu", "solutions": {"javascript": ["let cache = func => {\n  let _cache = new Map();\n  return (...args) => {\n    let key = JSON.stringify(args);\n    if (!_cache.has(key))\n      _cache.set(key, func(...args));\n    return _cache.get(key);\n  }\n}"]}}, {"name": "Largest product in a series", "link": "https://www.codewars.com/kata/529872bdd0f550a06b00026e", "kuy": "5 kyu", "solutions": {"javascript": ["let greatestProduct = input => Math.max(\n    ...[...input.slice(0, -4)]\n        .map((_, i) => [...input.slice(i, i + 5)])\n        .map(arr => arr.reduce((a, b) => a * parseInt(b), 1))\n);"]}}, {"name": "Process trees", "link": "https://www.codewars.com/kata/52817f04b70058a1b1000037", "kuy": "5 kyu", "solutions": {"javascript": ["let makeProcessTree = (processes) => {\n    let processesMap = new Map(processes.map(info => [info.pid, new Process(info.pid, [])]));\n    let root = null;\n\n    for (let info of processes) {\n        if (info.ppid === -1)\n            root = processesMap.get(info.pid);\n        else\n            processesMap.get(info.ppid).children.push(processesMap.get(info.pid));\n    }\n\n    return root;\n};"]}}, {"name": "Valid Parentheses", "link": "https://www.codewars.com/kata/52774a314c2333f0a7000688", "kuy": "5 kyu", "solutions": {"python": ["def valid_parentheses(string):\n    stack = []\n    for c in string:\n        if c == ')':\n            if not stack:\n                return False\n\n            stack.pop()\n\n        elif c == '(':\n            stack.append(c)\n\n    return not stack"], "javascript": ["let validParentheses = parens => {\n    let stack = [];\n    for (let p of parens) {\n        if (p === \"(\")\n            stack.push(\"(\");\n        else if (!stack.length || stack[stack.length - 1] !== \"(\")\n            return false;\n        else\n            stack.pop();\n    }\n    return !stack.length;\n};\n"]}}, {"name": "Haskell List Dot Notation", "link": "https://www.codewars.com/kata/53c8b29750fe70e4a2000610", "kuy": "5 kyu", "solutions": {"javascript": ["let ArrayComprehension = options => {\n    let g = (options.generator || \"\").replace(/\\s/g, \"\");\n    if (!g) {\n        return [];\n    } else if (!g.includes(\"..\")) {\n        return g.split(\",\").map(s => Number.parseInt(s));\n    }\n\n    let start, second, end, step;\n    if (g.includes(\",\")) {\n        [start, second, end] = g.split(/,|\\.{2}/).map(s => Number.parseInt(s));\n        step = second - start;\n    } else {\n        [start, end] = g.split(\"..\").map(s => Number.parseInt(s));\n        step = 1;\n    }\n\n    let arr = [];\n    while (step > 0 ? start <= end : start >= end) {\n        arr.push(start);\n        start += step;\n    }\n    return arr;\n};\n"]}}, {"name": "flatten()", "link": "https://www.codewars.com/kata/513fa1d75e4297ba38000003", "kuy": "5 kyu", "solutions": {"javascript": ["let flatten = (...arr) => [].concat(...arr.map(i => Array.isArray(i) ? flatten(...i) : [i]));"]}}, {"name": "MergeSort \"merge\" function", "link": "https://www.codewars.com/kata/52336a4436e0b095d8000093", "kuy": "5 kyu", "solutions": {"javascript": ["let mergesorted = (a, b) => {\n    let res = [];\n    while (a.length > 0 && b.length > 0) {\n        res.push(a[0] < b[0] ? a.shift() : b.shift());\n    }\n    return [...res, ...a, ...b];\n};\n"]}}], "6 kyu": [{"name": "zipWith II: Lists :]", "link": "https://www.codewars.com/kata/5826231422be6e7344000006", "kuy": "6 kyu", "solutions": {"javascript": ["let isInfinite = node => {\n    let nodes = new Set();\n\n    while (node) {\n        if (nodes.has(node))\n            return true;\n        nodes.add(node);\n        node = node.next;\n    }\n\n    return false;\n}\n\nlet zipWith = (fn, h0, h1) => {\n    let root, prev;\n\n    if (isInfinite(h0) && isInfinite(h1))\n        throw new Error();\n\n    while (h0 && h1) {\n        let node = new Node(fn(h0.value, h1.value));\n        if (prev) prev.next = node;\n        [h0, h1, prev, root] = [h0.next, h1.next, node, root || node];\n    }\n\n    return root;\n}"]}}, {"name": "Extract Nested Object Reference", "link": "https://www.codewars.com/kata/527a6e602a7db3456e000a2b", "kuy": "6 kyu", "solutions": {"javascript": ["Object.prototype.hash = function (string) {\n    return string.split(\".\").reduce((obj, attr) => obj ? obj[attr] : obj , this);\n}"]}}, {"name": "Closest pair of points", "link": "https://www.codewars.com/kata/5376343a003bf6e034000c56", "kuy": "6 kyu", "solutions": {"javascript": ["let distance = (x1, y1, x2, y2) => Math.sqrt((x1 - x2) ** 2) + Math.sqrt((y1 - y2) ** 2);\n\nlet closestPair = points => points\n    .map((p1, i) => points.slice(i + 1).map(p2 => [p1, p2]))\n    .reduce((acc, a) => [...acc, ...a], [])\n    .sort((a, b) => distance(...a[0], ...a[1]) - distance(...b[0], ...b[1]))[0];\n"]}}, {"name": "Escaping The Matrix (Reloaded)", "link": "https://www.codewars.com/kata/599de99d55342a28f5000b76", "kuy": "6 kyu", "solutions": {"javascript": ["class Neo extends Error {\n    constructor() {\n        super();\n        this.name = \"Neo\";\n    }\n}\n\nconst Matrix = {enter: () => {throw new Neo()}};"]}}, {"name": "Array Helpers", "link": "https://www.codewars.com/kata/525d50d2037b7acd6e000534", "kuy": "6 kyu", "solutions": {"javascript": ["Array.prototype.square = function(){return this.map(i => i * i)};\nArray.prototype.cube = function(){return this.map(i => i * i * i)};\nArray.prototype.sum = function(){return this.reduce((a,b) => a + b, 0)};\nArray.prototype.average = function(){return this.sum() / this.length};\nArray.prototype.even = function(){return this.filter(i => i % 2 === 0)};\nArray.prototype.odd = function(){return this.filter(i => i % 2 === 1)};\n"]}}, {"name": "Numericals of a String", "link": "https://www.codewars.com/kata/5b4070144d7d8bbfe7000001", "kuy": "6 kyu", "solutions": {"javascript": ["let numericals = s => {\n  let obj = {};\n  return [...s].map(c => (obj[c] = (obj[c] || 0) + 1).toString()).join(\"\");\n}"]}}, {"name": "Count letters in string", "link": "https://www.codewars.com/kata/5808ff71c7cfa1c6aa00006d", "kuy": "6 kyu", "solutions": {"python": ["from collections import Counter as letter_count"], "javascript": ["let letterCount = s => [...s].reduce((obj, c) => {obj[c] = (obj[c] || 0) + 1; return obj }, {});"]}}, {"name": "Pyramid Array", "link": "https://www.codewars.com/kata/515f51d438015969f7000013", "kuy": "6 kyu", "solutions": {"python": ["def pyramid(n):\n    return [[1] * (i + 1) for i in range(n)]"], "javascript": ["let pyramid = n => Array(n).fill(1).map((_,i) => Array(i + 1).fill(1));\n"]}}, {"name": "Decoded String by the Numbers", "link": "https://www.codewars.com/kata/562c3b54746f50d28d000027", "kuy": "6 kyu", "solutions": {"javascript": ["function decode(str) {\n    let array = [...str];\n    let result = [];\n\n    while (array.length > 0) {\n        if (array[0] === '\\\\') {\n            array.shift();\n            let number = '';\n            while ('0' <= array[0] && array[0] <= '9') {\n                number += array.shift();\n            }\n            result.push(array.splice(0, parseInt(number)).join(''));\n        } else {\n            result.push(array.shift());\n        }\n    }\n\n    return result;\n}\n"]}}, {"name": "The takeWhile Function", "link": "https://www.codewars.com/kata/54f9173aa58bce9031001548", "kuy": "6 kyu", "solutions": {"javascript": ["function takeWhile (arr, pred) {\n  let new_arr = [];\n  for (let i of arr){\n\t  if (!pred(i))break;\n\t  new_arr.push(i);\n  }\n\treturn new_arr;\n}"]}}], "Beta": [{"name": "Future", "link": "https://www.codewars.com/kata/5567a7d2c36c96585500008a", "kuy": "Beta", "solutions": {"javascript": ["class Future {\n    constructor() {\n        this.callbacks = [];\n    }\n\n    fulfill(...args) {\n        if (this.args)\n            throw Error();\n\n        this.args = args;\n        this.check();\n    }\n\n    when(callback) {\n        this.callbacks.push(callback);\n        this.check();\n    }\n\n    check() {\n        if (this.args && this.callbacks.length)\n            this.callbacks.forEach(c => c(...this.args));\n    }\n}\n\nclass Join {\n    constructor() {\n        this.futures = [];\n    }\n\n    add(future) {\n        this.futures.push(future);\n    }\n\n    when(callback) {\n        let resolved = 0;\n        this.futures.forEach(c => c.when(() => {\n            if (++resolved === this.futures.length)\n                callback(this.futures.map(f => f.args[0]), this.futures.map(f => f.args[1]))\n        }));\n    }\n}", "class Future {\n    constructor() {\n        this.args = undefined;\n        this.callbacks = [];\n    }\n\n    fulfill(...args) {\n        if (this.args)\n            throw Error();\n\n        this.args = args;\n        this.check();\n    }\n\n    when(callback) {\n        this.callbacks.push(callback);\n        this.check();\n    }\n\n    check() {\n        if (this.args && this.callbacks.length)\n            this.callbacks.forEach(c => c(...this.args));\n    }\n}\n\nclass Join {\n    constructor() {\n        this.futures = [];\n    }\n\n    add(future) {\n        this.futures.push(future);\n    }\n\n    when(callback) {\n        new Promise((resolve) => {\n            let resolved = 0;\n            this.futures.forEach(c => c.when(() => {\n                if (++resolved === this.futures.length)\n                    resolve();\n            }));\n        }).then(() => callback(this.futures.map(f => f.args[0]), this.futures.map(f => f.args[1])));\n    }\n}"]}}], "7 kyu": [{"name": "Singleton Pattern", "link": "https://www.codewars.com/kata/534fcca5edb124cfe6000f60", "kuy": "7 kyu", "solutions": {"javascript": ["let instance = null;\n\nlet Singleton = function(){\n  instance = instance || this;\n  return instance;\n};\n"]}}], "Retired": [{"name": "Algebraic Data Types", "link": "https://www.codewars.com/kata/546d245dddbcbd291c00106e", "kuy": "Retired", "solutions": {"javascript": ["function natToInt(nat) {\n    let res = 0;\n\n    for (let node = nat; node !== zero; node = node())\n        res++;\n\n    return res;\n}\n\nfunction intToNat(int) {\n    return int === 0 ? zero : succ(intToNat(int - 1));\n}\n\nfunction add(nat1, nat2) {\n    return nat2 === zero ? nat1 : add(succ(nat1), nat2());\n}\n\nfunction mul(nat1, nat2) {\n    return nat2 === zero ? zero : add(nat1, mul(nat1, nat2()));\n}\n\nfunction compareTo(nat1, nat2) {\n    return natToInt(nat1) - natToInt(nat2);\n}\n\nfunction toString(nat) {\n    return nat === zero ? 'zero' : `succ(${toString(nat())})`;\n}", "function natToInt(nat) {\n    let res = 0;\n\n    for (let node = nat; node !== zero; node = node())\n        res++;\n\n    return res;\n    // return nat === zero ? 0 : 1 + natToInt(nat());\n}\n\nfunction intToNat(int) {\n    return int === 0 ? zero : succ(intToNat(int - 1));\n}\n\nfunction add(nat1, nat2) {\n    for (let node = nat1; node !== zero; node = node())\n        nat2 = succ(nat2);\n\n    return nat2;\n}\n\nfunction mul(nat1, nat2) {\n    let res = zero;\n    for (let i = nat1; i !== zero; i = i())\n        for (let j = nat2; j !== zero; j = j())\n            res = succ(res);\n\n    return res;\n}\n\nfunction compareTo(nat1, nat2) {\n    return natToInt(nat1) - natToInt(nat2);\n}\n\nfunction toString(nat) {\n    return nat === zero ? 'zero' : `succ(${toString(nat())})`;\n}"]}}], "3 kyu": [{"name": "Multiplying numbers as strings: Part II", "link": "https://www.codewars.com/kata/5923fbc72eafa9bcff00011a", "kuy": "3 kyu", "solutions": {"javascript": ["let divideOnParts = s => {\n    let [digit, float] = s.includes(\".\") ? s.split(\".\") : [s, \"0\"];\n    return [replaceStartZeros(digit), replaceEndZeros(float)];\n};\n\nlet replaceEndZeros = s => s.replace(/0+$/, '') || \"0\";\n\nlet replaceStartZeros = s => s.replace(/^0+/, '') || \"0\";\n\nlet normalize = (a, b) => [a, b].map(s => s.padEnd(Math.max(a.length, b.length), \"0\"));\n\nlet divMod = (a, b = 10) => [Math.floor(a / b), a % b];\n\nlet digits = (a, b) => Array(Math.max(a.length, b.length))\n    .fill(0)\n    .map((_, i) => [a[a.length - 1 - i] || \"0\", b[b.length - 1 - i] || \"0\"])\n    .map(arr => arr.map(i => parseInt(i)));\n\nlet add = (a, b) => {\n    let remainder = 0, value = \"\", n;\n\n    for (let [x, y] of digits(a, b)) {\n        [remainder, n] = divMod(x + y + remainder);\n        value = `${n}${value}`;\n    }\n\n    return replaceStartZeros(`${remainder}${value}`);\n};\n\nlet _multiply_with_one = (a, b) => {\n    let remainder = 0, value = \"\", n;\n\n    for (let [x,] of digits(a, b)) {\n        [remainder, n] = divMod(x * parseInt(b) + remainder);\n        value = `${n % 10}${value}`;\n    }\n\n    return replaceStartZeros(`${remainder}${value}`);\n};\n\nlet _multiply = (a, b) => {\n    [a, b] = [replaceStartZeros(a), replaceStartZeros(b)];\n\n    if (a === \"0\" || b === \"0\")\n        return \"0\";\n\n    [a, b] = a.length > b.length ? [a, b] : [b, a];\n\n    return replaceStartZeros([...b]\n        .reverse()\n        .reduce((acc, x, i) => add(acc, _multiply_with_one(a, x) + \"0\".repeat(i)), \"0\"));\n};\n\nlet multiply = (a, b) => {\n    let sign = (a[0] === \"-\" || b[0] === \"-\") && a[0] !== b[0] ? \"-\" : \"\";\n    [a, b] = [a, b].map(s => divideOnParts(s.replace(/^-/, '')));\n    [a[1], b[1]] = normalize(a[1], b[1], \"End\");\n\n    let res = _multiply(a.join(\"\"), b.join(\"\"));\n\n    if (res === \"0\")\n        return \"0\";\n\n    let floatStart = a[1].length * 2;\n    res = res.padStart(floatStart, \"0\");\n\n    let digit = replaceStartZeros(res.slice(0, res.length - floatStart));\n    let float = replaceEndZeros(res.slice(res.length - floatStart));\n\n    return `${sign}${digit}.${float}`.replace(/\\.0$/, '');\n};"]}}, {"name": "Divide integers as strings", "link": "https://www.codewars.com/kata/58dea43ff98a7e2124000169", "kuy": "3 kyu", "solutions": {"javascript": ["String.prototype.replaceZeros = function () {\n    return this.replace(/^0+/, '') || \"0\";\n};\n\nfunction* digits(a, b) {\n    a = [...a.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n    b = [...b.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n\n    for (let i = 0; i < a.length; i++)\n        yield [parseInt(a[i]), parseInt(b[i])]\n\n}\n\nlet sub = (a, b) => {\n    let remainder = 0, value = \"\";\n\n    for (let [x, y] of digits(a, b)) {\n        x -= remainder;\n\n        if (x < y) {\n            x += 10;\n            remainder = 1;\n        } else {\n            remainder = 0;\n        }\n\n        let n = x - y;\n        value = `${n}${value}`;\n    }\n\n    return `${remainder}${value}`.replaceZeros();\n};\n\nlet add = (a, b) => {\n    let remainder = 0, value = \"\";\n\n    for (let [x, y] of digits(a, b)) {\n        let n = x + y + remainder;\n        value = `${n % 10}${value}`;\n        remainder = Math.floor(n / 10);\n    }\n\n    return `${remainder}${value}`.replaceZeros();\n};\n\nlet greater = (a, b, equal = true) => {\n    if (equal && a === b)\n        return true;\n\n    for (let [x, y] of [...digits(a, b)].reverse()) {\n        if (x > y)\n            return true;\n        else if (y > x)\n            return false;\n    }\n\n    return true;\n};\n\nlet divideStrings = (a, b) => {\n    if (greater(b, a, false))\n        return [\"0\", a];\n\n    let part = a.slice(0, b.length);\n\n    while (!greater(part, b))\n        part = a.slice(0, part.length + 1);\n\n    let parts = [...a.slice(part.length)];\n    let quotient = \"\";\n\n    while (true) {\n        let loc_quotient = \"0\";\n        while (greater(part, b)) {\n            part = sub(part, b);\n            loc_quotient = add(loc_quotient, \"1\");\n        }\n        quotient += loc_quotient;\n\n        if (!parts.length)\n            break;\n\n        part += parts.shift();\n    }\n\n    return [quotient.replaceZeros(), part.replaceZeros()]\n};"]}}, {"name": "Calculator", "link": "https://www.codewars.com/kata/5235c913397cbf2508000048", "kuy": "3 kyu", "solutions": {"python": ["from operator import add, sub, floordiv, mul, mod\nimport re\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(\"\\s*(=>|[-+*\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\noperations_executors = {'-': sub, '+': add, '*': mul, '/': floordiv, '%': mod}\npriority = {'+': 0, '-': 0, '*': 1, '/': 1, '%': 1}\n\n\ndef to_rpn(tokens):\n    out, stack = [], []\n    for token in tokens:\n        if token in priority.keys():\n            while len(stack) != 0 and stack[-1] in priority.keys():\n                if not (priority[token] - priority[stack[-1]] <= 0):\n                    break\n                out.append(stack.pop())\n            stack.append(token)\n        else:\n            out.append(token)\n\n    return out + stack[::-1]\n\n\nclass Calculator(object):\n    def evaluate(self, string):\n        print(string)\n        return round(self._eval(to_rpn(tokenize(string))), 3)\n\n    def _eval(self, operands):\n        stack = []\n        while operands:\n            op = operands.pop(0)\n            if op in operations_executors:\n                b, a = stack.pop(), stack.pop()\n                stack.append(operations_executors[op](float(a), float(b)))\n            else:\n                stack.append(float(op))\n\n        return stack[0]", "from operator import add, sub, floordiv, mul, mod\nimport re\n\n\ndef tokenize(expression):\n    if expression == \"\":\n        return []\n\n    regex = re.compile(\"\\s*(=>|[-+*\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\n    tokens = regex.findall(expression)\n    return [s for s in tokens if not s.isspace()]\n\n\noperations_executors = {'-': sub, '+': add, '*': mul, '/': floordiv, '%': mod}\npriority = {'+': 0, '-': 0, '*': 1, '/': 1, '%': 1}\n\n\ndef to_rpn(tokens):\n    out, stack = [], []\n    for token in tokens:\n        if token in priority.keys():\n            while len(stack) != 0 and stack[-1] in priority.keys():\n                if not (priority[token] - priority[stack[-1]] <= 0):\n                    break\n                out.append(stack.pop())\n            stack.append(token)\n        else:\n            out.append(token)\n\n    return out + stack[::-1]\n\n\nclass Calculator(object):\n    def evaluate(self, string):\n        return round(self.eval(to_rpn(tokenize(string))), 3)\n\n    def eval(self, operands):\n        stack = []\n        while operands:\n            op = operands.pop(0)\n            if op in operations_executors:\n                b, a = stack.pop(), stack.pop()\n                stack.append(operations_executors[op](float(a), float(b)))\n            else:\n                stack.append(float(op))\n\n        return stack[0]\n"], "javascript": ["const priority = {'-': 0, '+': 0, '*': 1, '/': 1};\nconst executors = {\n    '-': (a, b) => a - b,\n    '+': (a, b) => a + b,\n    '*': (a, b) => a * b,\n    '/': (a, b) => a / b,\n};\n\nclass Calculator {\n    evaluate(string) {\n        let rpn = [];\n        let ops = [];\n\n        for (let t of string.match(/[+\\-*\\/]|[0-9]+/g)) {\n            if (t in priority) {\n                while (ops.length && priority[ops[ops.length - 1]] >= priority[t]) {\n                    rpn.push(ops.pop());\n                }\n                ops.push(t);\n            } else {\n                rpn.push(parseFloat(t));\n            }\n        }\n        rpn.push(...ops.reverse());\n\n        let stack = [];\n        while (rpn.length) {\n            let t = rpn.shift();\n\n            if (t in executors) {\n                stack.push(executors[t](...[stack.pop(), stack.pop()].reverse()));\n            } else {\n                stack.push(t);\n            }\n        }\n\n        return stack[0];\n    }\n}", "const priority = {'-': 0, '+': 0, '*': 1, '/': 1};\nconst executors = {\n    '-': (a, b) => a - b,\n    '+': (a, b) => a + b,\n    '*': (a, b) => a * b,\n    '/': (a, b) => a / b,\n};\n\nclass Calculator {\n    evaluate(string) {\n        let tokens = string.match(/[+\\-*\\/]|[0-9]+/g);\n        let rpn = [];\n        let ops = [];\n\n        for (let t of tokens) {\n            if (t in priority) {\n                while (ops.length && priority[ops[ops.length - 1]] >= priority[t]) {\n                    rpn.push(ops.pop());\n                }\n                ops.push(t);\n            } else {\n                rpn.push(parseFloat(t));\n            }\n        }\n        rpn.push(...ops.reverse());\n\n        let stack = [];\n        while (rpn.length) {\n            let t = rpn.shift();\n\n            if (t in executors) {\n                stack.push(executors[t](...[stack.pop(), stack.pop()].reverse()));\n            } else {\n                stack.push(t);\n            }\n        }\n\n        return stack[0];\n    }\n}", "const priority = {'-': 0, '+': 0, '*': 1, '/': 1};\nconst executors = {\n    '-': (a, b) => a - b,\n    '+': (a, b) => a + b,\n    '*': (a, b) => a * b,\n    '/': (a, b) => a / b,\n};\n\nclass Calculator {\n    evaluate(string) {\n        let tokens = string.match(/[+\\-*\\/]|[0-9]+/g);\n        let rpn = [];\n        let ops = [];\n\n        for (let t of tokens) {\n            if (t in priority) {\n                while (ops.length && priority[ops[ops.length - 1]] >= priority[t]) {\n                    rpn.push(ops.pop());\n                }\n                ops.push(t);\n            } else {\n                rpn.push(parseFloat(t));\n            }\n        }\n        rpn.push(...ops.reverse());\n\n        let stack = [];\n        while (rpn.length > 0) {\n            let t = rpn.shift();\n\n            if (t in executors) {\n                let b = stack.pop();\n                let a = stack.pop();\n                stack.push(executors[t](a, b));\n            } else {\n                stack.push(t);\n            }\n        }\n\n        return stack[0];\n    }\n}"]}}, {"name": "One Line Task: Check Range", "link": "https://www.codewars.com/kata/591e833267cd75cb02000007", "kuy": "3 kyu", "solutions": {"javascript": ["checkRange=(a,x,y)=>a.map(v=>i+=x>v==v>y,i=0)|i"]}}, {"name": "Defuse the bombs!", "link": "https://www.codewars.com/kata/54d558c72a5e542c0600060f", "kuy": "3 kyu", "solutions": {"javascript": ["Bomb.diffuse(42);\n[...Array(5)].forEach(Bomb.diffuse);\nBomb.diffuse(BombKey);\ndiffuseTheBomb = () => true;\nBomb.diffuse();\nBomb.diffuse(3.14159);\n\nlet date = new Date();\nBomb.diffuse(date.setFullYear(date.getFullYear()-4));\n\nBomb.diffuse(new class{\n    get key(){return  43} ;\n    set key(_){};\n});\nBomb.diffuse(new class{\n    constructor(){\n      this.n = 9;\n    }\n    valueOf(){\n      let n = this.n;\n      this.n += 2;\n      return n;\n    }\n});\nlet values = [1, 1, 0.5];\nMath.random = () => values.pop();\nBomb.diffuse(42);\n\nArray.prototype.valueOf = function () { return this.reduce((pre, next) => pre+next) }\nBomb.diffuse('eWVz')"]}}, {"name": "The soul of wit: reverse an array", "link": "https://www.codewars.com/kata/59b81886460387d8fc000043", "kuy": "3 kyu", "solutions": {"javascript": ["reverse=a=>[...a].map(a.pop,a)"]}}], "1 kyu": [{"name": "Metaprogramming: Lisp-style Generic Functions", "link": "https://www.codewars.com/kata/526de57c8f428fc1fd000b8c", "kuy": "1 kyu", "solutions": {"javascript": ["Object.prototype.hierarchy = function () {\n    return [...chain(this, \"prototype\")].map(obj => obj.name || obj.__proto__.constructor.name);\n};\n\nObject.prototype.copyContext = function () {\n    let newContext = Object.assign({}, this);\n    Object.keys(this).forEach(key => newContext[key] = [...newContext[key]]);\n\n    return newContext;\n};\n\nString.prototype.resolve = function () {\n    if (!!global[this])\n        return global[this];\n\n    return eval(this[0].toUpperCase() + this.slice(1))\n};\n\nString.prototype.types = function () {\n    return this.split(\",\").map(s => s.trim());\n};\n\nArray.prototype.remove = function (value) {\n    return this.filter((obj, i) => i !== this.indexOf(value));\n};\n\nArray.prototype.same = function (other) {\n    return JSON.stringify(this) === JSON.stringify(other);\n};\n\nArray.prototype.filterTypes = function (args) {\n    return this.filter(fn => fn.is_types_match(...args))\n};\n\nArray.prototype.apply = function (args) {\n    return this.forEach(fn => fn(...args));\n};\n\nfunction callNextMethod(methodInfo, ...args) {\n    let newMethod = methodInfo.next();\n\n    try {\n        return newMethod(...args);\n    } catch (e) {\n        let name = !!methodInfo.context.primary.length ? \"primary\" : \"around\";\n        throw \"No next method found for describe in \" + name;\n    }\n}\n\nfunction* chain(node, attr = \"__proto__\") {\n    while (!!node && node !== Object.prototype) {\n        yield node;\n        node = node[attr];\n    }\n}\n\nlet type_match = (t, a) => (\n    [...chain(a)].some(arg => arg instanceof Object && arg.constructor.name === t)\n    || (a === null && t === 'null')\n    || (typeof a === t)\n    || (t === '*')\n);\n\nlet compare_type = (t1, t2) => {\n    if (t1 === t2)\n        return 0;\n    if (t1 === \"*\")\n        return 1;\n    if (t2 === \"*\")\n        return -1;\n\n    let obj1 = t1.resolve(), obj2 = t2.resolve();\n\n    if (obj1.hierarchy().includes(obj2.name))\n        return -1;\n    else if (obj2.hierarchy().includes(obj1.name))\n        return 1;\n\n    return 0;\n};\n\nlet compare_types = (func1, func2) => {\n    if (func1.types.length > func2.types.length)\n        return 1;\n    else if (func1.types.length < func2.types.length)\n        return -1;\n\n    for (let i = 0; i < func1.types.length; i++) {\n        let t1 = func1.types[i], t2 = func2.types[i];\n\n        let specific = compare_type(t1, t2);\n        if (specific === 0)\n            continue;\n\n        return specific;\n    }\n\n    return 0;\n};\n\nclass Callable extends Function {\n    constructor(fn, types, combination, context = null, skip = 0, force = undefined) {\n        super('return arguments.callee._call.apply(arguments.callee, arguments)');\n        this.fn = fn;\n        this.types = types;\n        this.combination = combination;\n        this.context = context;\n        this.skip = skip;\n        this.force = force;\n    }\n\n    _call(...args) {\n        if (!!this.force)\n            return this.force(...args);\n\n        let [, fn] = func(this.context, this.skip, ...args);\n        return fn(...args);\n    }\n\n    next() {\n        return new Callable(this.fn, this.types, this.combination, this.context, this.skip + 1);\n    }\n\n    is_types_match(...args) {\n        return (\n            args.length === this.types.length\n            && args.every((arg, i) => type_match(this.types[i], arg))\n        )\n    }\n}\n\nfunction func(context, skip = 0, ...args) {\n    let original_skip = skip;\n\n    let around = context.around.filterTypes(args).sort(compare_types);\n\n    if (around.length - skip > 0) {\n        let [fn, ..._] = around.slice(skip);\n\n        let f = fn.next();\n        f.skip = original_skip;\n\n        return [fn, (...a) => f.fn(...a)];\n    }\n\n    skip -= around.length;\n    let fns = context.primary.filterTypes(args).sort(compare_types).slice(skip);\n\n    if (fns.length === 0)\n        throw Error();\n\n    let before = [...context.before.filterTypes(args).map(f => f.fn)];\n    let after = [...context.after.filterTypes(args).reverse().map(f => f.fn)];\n\n    let [fn,] = fns;\n    let f = fn.next();\n    f.skip = original_skip;\n\n    return [fn, (...a) => {\n        if (!skip)\n            before.forEach(f => f(...a));\n\n        let res = f.fn(...a);\n\n        if (!skip)\n            after.forEach(f => f(...a));\n\n        return res;\n    }];\n}\n\n\nfunction defgeneric(name) {\n    let generic = function (...args) {\n        return generic.findMethod(...args)(...args);\n    };\n\n    generic.functions = {\n        primary: [],\n        before: [],\n        after: [],\n        around: [],\n    };\n    generic.cache = new Map();\n\n    generic.addFunction = function (combination, fn) {\n        generic.functions[combination] = [...generic.functions[combination], fn].sort(compare_types);\n        generic.cache.clear();\n    };\n\n    generic.removeFunction = function (fn, ...key) {\n        let copy = Object.assign({}, generic.functions);\n        let keys = key.length === 0 ? Object.keys(generic.functions) : [...key];\n        keys.forEach(key => copy[key] = copy[key].remove(fn));\n        generic.cache.clear();\n\n        return copy;\n    };\n\n    generic.defmethod = (discriminator, fn, combination = 'primary') => {\n        let types = discriminator.types();\n\n        generic.functions[combination] = generic.functions[combination].filter(f => !f.types.same(types));\n\n        generic.addFunction(combination, new Callable(fn, types, combination, generic.functions));\n        generic.cache.clear();\n\n        return generic;\n    };\n\n    generic.removeMethod = (discriminator, combination = 'primary') => {\n        let types = discriminator.types();\n        let [fn,] = generic.functions[combination].filter(fn => fn.types.same(types));\n\n        generic.functions = generic.removeFunction(fn, combination);\n        generic.cache.clear();\n\n        return generic;\n    };\n\n    generic.findMethod = (...args) => {\n        let fn, force;\n\n        try {\n            [fn, force] = func(generic.functions, 0, ...args);\n        } catch (e) {\n            throw \"No method found for append with args: \" + args.map(s => typeof s).join();\n        }\n\n        let key = fn.fn;\n\n        if (generic.cache.has(key)) {\n            return generic.cache.get(key);\n        }\n\n        let obj = new Callable(fn.fn, fn.types, fn.combination, generic.functions.copyContext(), 0, force);\n        generic.cache.set(key, obj);\n\n        return obj;\n    };\n\n    return generic;\n}"]}}], "2 kyu": [{"name": "Simple SQL Engine", "link": "https://www.codewars.com/kata/5451712ea8a825a74f000863", "kuy": "2 kyu", "solutions": {"javascript": ["let valid_name = name => /[a-zA-Z0-9_]+/.test(name);\nlet valid_const = token => /(\\d+(\\.\\d+)?)|(['\"](.*?)['\"])/.test(token);\n\nlet fetch_one = tokens => {\n    let [res, ...others] = tokens;\n    return [res, others];\n};\n\nlet ensure = condition => {\n    if (!condition) throw Error();\n};\n\nlet literal = (...values) => tokens => {\n    ensure(values.some(v => tokens[0].toLowerCase() === v.toLowerCase()));\n    return fetch_one(tokens);\n};\n\nlet name = () => tokens => (ensure(valid_name(tokens[0])), fetch_one(tokens));\nlet variable = () => tokens => (ensure(valid_name(tokens[0]) || valid_const(tokens[0])), fetch_one(tokens));\n\nlet optional = (handler, defaultValue = []) => tokens => {\n    try {\n        return handler(tokens);\n    } catch (e) {\n        return [defaultValue, tokens];\n    }\n};\n\nlet multiple = (...handlers) => tokens => {\n    let handler = and(...handlers);\n\n    let results = [], result;\n    while (true) {\n        try {\n            [result, tokens] = handler(tokens);\n            results.push(result);\n        } catch (e) {\n            ensure(results.length > 0);\n            return [results, tokens];\n        }\n    }\n};\n\nlet and = (...handlers) => tokens => {\n    let results = [], result;\n    for (let h of handlers) {\n        [result, tokens] = h(tokens);\n        results.push(result);\n    }\n    return [results, tokens];\n};\n\nlet parser = (tokens, ...handlers) => and(...handlers)(tokens);\n\nArray.prototype.to = function (converter) {\n    let [attrs, tokens] = this;\n    return [converter(...attrs), tokens];\n};\n\nlet sql_query = tokens => {\n    let [q, others] = parser(tokens, select, from, optional(join), optional(where, null))\n        .to((s, f, j, w) => ({select: s, from: f, joins: j, where: w}));\n    ensure(others.length === 0);\n    return q;\n};\n\nlet select = tokens => parser(\n    tokens, literal(\"select\"), column_id, optional(multiple(literal(\",\"), column_id))\n).to((_, column, columns) => ({columns: [column, ...columns.map(v => v[1])]}));\n\nlet from = tokens => parser(tokens, literal(\"from\"), name()).to((_, n) => ({table: n}));\n\nlet join = tokens => parser(\n    tokens, literal(\"join\"), name(), literal(\"on\"), value_test, optional(multiple(join)),\n).to((_, n, __, test, joins) => [{table: n, test: test}, ...(!!joins.length ? joins[0][0] : [])]);\n\nlet where = tokens => parser(tokens, literal(\"where\"), value_test).to((_, test) => ({test: test}));\n\nlet column_id = tokens => {\n    let table_name, column_name, name;\n    [name, ...tokens] = tokens;\n    [table_name, column_name] = name.split(\".\");\n    ensure([table_name, column_name].map(valid_name));\n    return [`${table_name}.${column_name}`, tokens];\n};\n\nlet value_test = tokens => parser(\n    tokens, variable(), literal(\"=\", \">\", \"<\", \"<=\", \">=\", \"<>\"), variable(),\n).to((left, op, right) => ({left: left, op: op, right: right}));\n\nlet COMPARISON = {\n    \"=\": (a, b) => a === b,\n    \"<>\": (a, b) => a !== b,\n    \">\": (a, b) => a > b,\n    \"<\": (a, b) => a < b,\n    \">=\": (a, b) => a >= b,\n    \"<=\": (a, b) => a <= b,\n};\n\nlet convert_table = (name, table) => (\n    table.map(row => Object.entries(row).reduce((acc, v) => (acc[`${name}.${v[0]}`] = v[1], acc), {}))\n);\n\nlet convert_param = (row, param) => {\n    let n = parseFloat(param);\n    if (!Number.isNaN(n))\n        return n;\n\n    return param in row ? row[param] : param.slice(1, param.length - 1).replace(\"''\", \"'\");\n};\n\nlet apply_test = (row, test) => COMPARISON[test.op](convert_param(row, test.left), convert_param(row, test.right));\n\nclass SQLEngine {\n    constructor(database) {\n        this.database = Object.entries(database)\n            .map(v => [v[0], convert_table(...v)])\n            .reduce((acc, v) => (acc[v[0]] = v[1], acc), {})\n    }\n\n    execute(query) {\n        let q = sql_query(query.match(/(['\"](.*)['\"])|,|([^,'\\s]*)/g).filter(Boolean));\n\n        let table = this.database[q.from.table];\n\n        if (!!q.joins)\n            for (let join of q.joins)\n                table = table\n                    .map(row => this.database[join.table].map(r => ({...row, ...r})).filter(r => apply_test(r, join.test)))\n                    .reduce((acc, r) => (acc.push(...r), acc), []);\n\n        if (!!q.where)\n            table = table.filter(row => apply_test(row, q.where.test));\n\n        if (!!q.select)\n            table = table.map(row => q.select.columns.reduce((acc, column) => (acc[column] = row[column], acc), {}));\n\n        return table;\n    }\n}\n", "let valid_name = name => /[a-zA-Z0-9_]+/.test(name);\nlet valid_const = token => /(\\d+(\\.\\d+)?)|(['\"](.*?)['\"])/.test(token);\n\nlet fetch_one = tokens => {\n    let [res, ...others] = tokens;\n    return [res, others];\n};\n\nlet ensure = condition => {\n    if (!condition) throw Error();\n};\n\nlet literal = (...values) => tokens => {\n    ensure(values.some(v => tokens[0].toLowerCase() === v.toLowerCase()));\n    return fetch_one(tokens);\n};\n\nlet name = () => tokens => (ensure(valid_name(tokens[0])), fetch_one(tokens));\nlet variable = () => tokens => (ensure(valid_name(tokens[0]) || valid_const(tokens[0])), fetch_one(tokens));\n\nlet optional = (handler, defaultValue = []) => tokens => {\n    try {\n        return handler(tokens);\n    } catch (e) {\n        return [defaultValue, tokens];\n    }\n};\n\nlet multiple = (...handlers) => tokens => {\n    let handler = and(...handlers);\n\n    let results = [], result;\n    while (true) {\n        try {\n            [result, tokens] = handler(tokens);\n            results.push(result);\n        } catch (e) {\n            ensure(results.length > 0);\n            return [results, tokens];\n        }\n    }\n};\n\nlet and = (...handlers) => tokens => {\n    let results = [], result;\n    for (let h of handlers) {\n        [result, tokens] = h(tokens);\n        results.push(result);\n    }\n    return [results, tokens];\n};\n\nlet parser = (tokens, ...handlers) => and(...handlers)(tokens);\n\n\nlet sql_query = tokens => {\n    let [[s, f, j, w], others] = parser(\n        tokens, select, from, optional(join), optional(where, null)\n    );\n    ensure(others.length === 0);\n    return {select: s, from: f, joins: j, where: w}\n};\nlet select = tokens => {\n    let [[, column, columns], others] = parser(\n        tokens, literal(\"select\"), column_id, optional(multiple(literal(\",\"), column_id))\n    );\n    return [{columns: [column, ...columns.map(v => v[1])]}, others];\n};\nlet from = tokens => {\n    let [[, n], others] = parser(tokens, literal(\"from\"), name());\n    return [{table: n}, others];\n};\nlet join = tokens => {\n    let [[, n, , test, joins], others] = parser(\n        tokens,\n        literal(\"join\"), name(), literal(\"on\"),\n        value_test, optional(multiple(join)),\n    );\n    return [[{table: n, test: test}, ...(!!joins.length ? joins[0][0] : [])], others];\n};\nlet where = tokens => {\n    let [[, test], others] = parser(tokens, literal(\"where\"), value_test);\n    return [{test: test}, others];\n};\nlet column_id = tokens => {\n    let table_name, column_name, name;\n    [name, ...tokens] = tokens;\n    [table_name, column_name] = name.split(\".\");\n    ensure([table_name, column_name].map(valid_name));\n    return [`${table_name}.${column_name}`, tokens];\n};\nlet value_test = tokens => {\n    let [[left, op, right], others] = parser(\n        tokens, variable(), literal(\"=\", \">\", \"<\", \"<=\", \">=\", \"<>\"), variable(),\n    );\n    return [{left: left, op: op, right: right}, others];\n};\n\nlet COMPARISON = {\n    \"=\": (a, b) => a === b,\n    \"<>\": (a, b) => a !== b,\n    \">\": (a, b) => a > b,\n    \"<\": (a, b) => a < b,\n    \">=\": (a, b) => a >= b,\n    \"<=\": (a, b) => a <= b,\n};\n\nlet convert_table = (name, table) => (\n    table.map(row => Object.entries(row).reduce((acc, v) => (acc[`${name}.${v[0]}`] = v[1], acc), {}))\n);\n\nlet convert_param = (row, param) => {\n    let n = parseFloat(param);\n    if (!Number.isNaN(n))\n        return n;\n\n    return param in row ? row[param] : param.slice(1, param.length - 1).replace(\"''\", \"'\");\n};\n\nlet apply_test = (row, test) => COMPARISON[test.op](convert_param(row, test.left), convert_param(row, test.right));\n\nclass SQLEngine {\n    constructor(database) {\n        this.database = Object.entries(database)\n            .map(v => [v[0], convert_table(...v)])\n            .reduce((acc, v) => (acc[v[0]] = v[1], acc), {})\n    }\n\n    execute(query) {\n        let q = sql_query(query.match(/(['\"](.*)['\"])|,|([^,'\\s]*)/g).filter(Boolean));\n\n        let table = this.database[q.from.table];\n\n        if (!!q.joins)\n            for (let join of q.joins)\n                table = table\n                    .map(row => this.database[join.table].map(r => ({...row, ...r})).filter(r => apply_test(r, join.test)))\n                    .reduce((acc, r) => (acc.push(...r), acc), []);\n\n        if (!!q.where)\n            table = table.filter(row => apply_test(row, q.where.test));\n\n        if (!!q.select)\n            table = table.map(row => q.select.columns.reduce((acc, column) => (acc[column] = row[column], acc), {}));\n\n        return table;\n    }\n}"]}}, {"name": "How can I throw an error here?", "link": "https://www.codewars.com/kata/5970f479e75b6c00ce000043", "kuy": "2 kyu", "solutions": {"javascript": ["bang = () => {\n    try {\n        null.joke();\n    } catch (e) {\n        e.message = \"Just thro\" + \"w like this!\";\n        (function* () {})()[\"th\" + \"row\"](e);\n    }\n};", "bang = () => {\n    try {\n        null.joke();\n    } catch (e) {\n        var error = e;\n        error.message = \"Just thro\" + \"w like this!\";\n    }\n    (function* () {})()[\"th\" + \"row\"](error);\n};"]}}, {"name": "Multi Line Task++: Hello World", "link": "https://www.codewars.com/kata/5935558a32fb828aad001213", "kuy": "2 kyu", "solutions": {"javascript": ["f=\n''\n[\n'\\\nt\\\nr\\\ni\\\nm'\n][\n'\\\nb\\\ni\\\nn\\\nd'\n]`\nH\\\ne\\\nl\\\nl\\\no\\\n,\\\n \\\nw\\\no\\\nr\\\nl\\\nd\\\n!`"]}}, {"name": "One Line Task: Circle Intersection", "link": "https://www.codewars.com/kata/5908242330e4f567e90000a3", "kuy": "2 kyu", "solutions": {"javascript": ["with(Math)circleIntersection=([a,b],[c,d],r)=>(-sin(x=2*acos(hypot(a-c,b-d)/2/r))+x)*r*r|0"]}}]}, "java": {"4 kyu": [{"name": "Numberless Number Representation", "link": "https://www.codewars.com/kata/59df8cdc49aaab7061000297", "kuy": "4 kyu", "solutions": {"java": ["package kata;\n\npublic class NaturalNumber {\n\n    public static final NaturalNumber ZERO = new NaturalNumber();\n    private NaturalNumber parent = ZERO;\n\n    public NaturalNumber() {}\n\n    public NaturalNumber(NaturalNumber parent) {\n        this.parent = parent;\n    }\n\n    public NaturalNumber succ() {\n        return new NaturalNumber(this);\n    }\n\n    public NaturalNumber pred() {\n        return parent;\n    }\n\n    public NaturalNumber add(NaturalNumber o) {\n        return o == ZERO ? this : this.succ().add(o.pred());\n    }\n\n    public NaturalNumber subtract(NaturalNumber o) {\n        return o == ZERO ? this : this.pred().subtract(o.pred());\n    }\n\n    public NaturalNumber multiply(NaturalNumber o) {\n        return o == ZERO ? ZERO : this.add(this.multiply(o.pred()));\n    }\n\n    public NaturalNumber modulo(NaturalNumber o) {\n        return this.resolve() < o.resolve() ? this : this.subtract(o).modulo(o);\n    }\n\n    public int resolve() {\n        return this == ZERO ? 0 : 1 + this.pred().resolve();\n    }\n\n    public boolean equals(Object o) {\n        return o instanceof NaturalNumber && this.resolve() == ((NaturalNumber) o).resolve();\n    }\n}"]}}, {"name": "Interfacing", "link": "https://www.codewars.com/kata/54c183dd3f069611c3000f97", "kuy": "4 kyu", "solutions": {"java": ["import java.lang.reflect.Proxy;\nimport java.util.HashMap;\n\npublic class Interfacing {\n\n    public static Object create(Class<?>[] interfaces) {\n        HashMap<String, Object> attrs = new HashMap<>();\n\n        return Proxy.newProxyInstance(interfaces[0].getClassLoader(), interfaces, (proxy, method, args) -> {\n            String type = method.getName().substring(0, 3);\n            String name = method.getName().substring(3);\n\n            return type.equals(\"get\") ? attrs.getOrDefault(name, null) : attrs.put(name, args[0]);\n        });\n    }\n\n}"]}}, {"name": "Escaping The Matrix", "link": "https://www.codewars.com/kata/5595c56aa6ca910f27000155", "kuy": "4 kyu", "solutions": {"java": ["class AgentSmith {\n    public static <T extends Exception> void fight(Exception e) throws T {\n        throw (T) e;\n    }\n}\n\npublic class Matrix {\n    public static void enter() {\n        AgentSmith.fight(new Neo());\n    }\n}"]}}, {"name": "Large Factorials", "link": "https://www.codewars.com/kata/557f6437bf8dcdd135000010", "kuy": "4 kyu", "solutions": {"javascript": ["String.prototype.replaceZeros = function () {\n    return this.replace(/^0+/, '') || \"0\";\n};\n\nlet divMod = (a, b = 10) => [Math.floor(a / b), a % b];\n\nlet digits = (a, b) => Array(Math.max(a.length, b.length))\n    .fill(0)\n    .map((_, i) => [a[a.length - 1 - i] || \"0\", b[b.length - 1 - i] || \"0\"])\n    .map(arr => arr.map(i => parseInt(i)));\n\nlet add = (a, b) => {\n    let remainder = 0, value = \"\", n;\n\n    for (let [x, y] of digits(a, b)) {\n        [remainder, n] = divMod(x + y + remainder);\n        value = `${n}${value}`;\n    }\n\n    return `${remainder}${value}`.replaceZeros();\n};\n\nlet multiply = (a, b) => {\n    [a, b] = [a.replaceZeros(), b.replaceZeros()];\n\n    if (a === \"0\" || b === \"0\")\n        return \"0\";\n\n    [a, b] = a.length > b.length ? [a, b] : [b, a];\n\n    if (b.length === 1) {\n        let remainder = 0, value = \"\", n;\n        for (let [x,] of digits(a, b)) {\n            [remainder, n] = divMod(x * parseInt(b) + remainder);\n            value = `${n % 10}${value}`;\n        }\n\n        return `${remainder}${value}`.replaceZeros();\n    }\n\n    return [...b]\n        .reverse()\n        .reduce((acc, x, i) => add(acc, multiply(a, x) + \"0\".repeat(i)), \"0\")\n        .replaceZeros();\n};\n\nlet factorial = n => {\n    let res = \"1\";\n    for (let i = 2; i <= n; i++) {\n        res = multiply(res, i.toString());\n    }\n    return res;\n};"], "java": ["import java.math.BigDecimal;\n\npublic class Kata\n{\n\n    public static String Factorial(int n) {\n        BigDecimal bigDecimal = new BigDecimal(1);\n\n        for (int i = 2; i <= n; i++) {\n            bigDecimal = bigDecimal.multiply(new BigDecimal(i));\n        }\n\n        return bigDecimal.toString();\n    }\n\n}"]}}, {"name": "Threaded counting", "link": "https://www.codewars.com/kata/549e70e994e517ed8b00043e", "kuy": "4 kyu", "solutions": {"java": ["import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class ThreadedCounting {\n    static class Event {\n        synchronized void set() { this.notifyAll(); }\n\n        synchronized void await() {\n            try { this.wait(); } catch (InterruptedException ignored) { }\n        }\n    }\n\n    public static void countInThreads(Counter counter) {\n        AtomicInteger i = new AtomicInteger();\n        Event[] events = {new Event(), new Event(), new Event()};\n        List<Integer> indexes = new ArrayList<>(Arrays.asList(2, 1, 2));\n\n        IntStream.range(0, 3)\n                .mapToObj(index -> new Thread(() -> {\n                    while (true) {\n                        events[index - 1 < 0 ? events.length - 1 : index - 1].await();\n\n                        if (i.get() >= 100) {\n                            events[index].set();\n                            break;\n                        }\n\n                        counter.count(i.incrementAndGet());\n                        events[index].set();\n                    }\n                }))\n                .peek(Thread::start)\n                .collect(Collectors.toList())\n                .forEach(t -> {\n                    try {\n                        events[indexes.remove(0)].set();\n                        t.join();\n                    } catch (InterruptedException e) {}\n                });\n    }\n}"]}}, {"name": "Sums of Perfect Squares", "link": "https://www.codewars.com/kata/5a3af5b1ee1aaeabfe000084", "kuy": "4 kyu", "solutions": {"java": ["public class SumOfSquares {\n    \n    private static boolean is_square(int n){  \n      int sqrt_n = (int)(Math.sqrt(n));  \n      return (sqrt_n*sqrt_n == n);  \n    }\n    \n    public static int nSquaresFor(int n) {\n      if(is_square(n)) {\n          return 1;  \n      }\n  \n      while ((n & 3) == 0){\n          n >>= 2;  \n      }\n      if ((n & 7) == 7){\n          return 4;\n      }\n  \n      int sqrt_n = (int)(Math.sqrt(n)); \n      for(int i = 1; i <= sqrt_n; i++){  \n          if (is_square(n - i*i)) {\n              return 2;\n          }\n      }  \n  \n      return 3;  \n    }\n}"]}}, {"name": "One-Semicolon Cartesian Product", "link": "https://www.codewars.com/kata/59f7679d3640cef20e0000a0", "kuy": "4 kyu", "solutions": {"java": ["public class SetStuff {\n\n    public static java.util.Set<int[]> cartesianProduct(int[][] sets) {\n        return sets.length == 0 ? new java.util.HashSet<>() :\n                java.util.Arrays.stream(sets[0])\n                        .boxed()\n                        .flatMap(i ->\n                                java.util.Optional.ofNullable(\n                                        cartesianProduct(java.util.Arrays.copyOfRange(sets, 1, sets.length))\n                                )\n                                        .map(s -> s.size() == 0 ? java.util.Collections.singleton(new int[]{}) : s)\n                                        .map(s -> s\n                                                .stream()\n                                                .map(arr -> java.util.stream.Stream\n                                                        .concat(java.util.stream.Stream.of(i), java.util.Arrays.stream(arr).boxed())\n                                                        .mapToInt(j -> j)\n                                                        .toArray()\n                                                )\n                                        ).get()\n                        ).collect(java.util.stream.Collectors.toSet());\n    }\n}\n"]}}, {"name": "Bagels", "link": "https://www.codewars.com/kata/54bd6b4c956834c9870001a1", "kuy": "4 kyu", "solutions": {"java": ["import java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\n\npublic class BagelSolver {\n    static void setFinalStatic(Field field, Object newValue) throws Exception {\n        field.setAccessible(true);\n\n        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField.setAccessible(true);\n        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n\n        field.set(null, newValue);\n    }\n\n    public static Bagel getBagel() {\n        try {\n            setFinalStatic(Boolean.class.getField(\"TRUE\"), false);\n        } catch (Exception e) {}\n        return new Bagel();\n    }\n\n}"]}}, {"name": "Counter: Pythonize your Java!! (VERBOSE)", "link": "https://www.codewars.com/kata/5a3832c18882f32aca0000d2", "kuy": "4 kyu", "solutions": {"java": ["import java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Counter<T> extends HashMap<T, Long> {\n\n    public Counter(Map<? extends T, Long> map) {\n        this.putAll(map);\n    }\n\n    @SafeVarargs\n    public Counter(Object... arr) {\n        this(Arrays.stream(arr));\n    }\n\n    public Counter(int initialCapacity, float loadFactor) {\n        super(initialCapacity, loadFactor);\n    }\n\n    public Counter(Collection<? extends T> coll) {\n        this(coll.stream());\n    }\n\n    public Counter(Stream<?> stream) {\n        stream.forEach(i -> put((T) i, getOrDefault(i, 0L) + 1));\n    }\n\n    private Stream<SimpleEntry<T, Long>> pairStream(Counter<? extends T> c, Function<T, Long> mergeFunction) {\n        return keyStream(c).map(a -> new SimpleEntry<>(a, mergeFunction.apply(a)));\n    }\n\n    private Stream<T> keyStream(Counter<? extends T> c) {\n        return Stream.concat(keySet().stream(), c.keySet().stream()).distinct();\n    }\n\n    static public Counter<Boolean> of(boolean... arr) {\n        Counter<Boolean> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    static public Counter<Character> of(char... arr) {\n        Counter<Character> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n\n    }\n\n    static public Counter<Double> of(double... arr) {\n        Counter<Double> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    static public Counter<Float> of(float... arr) {\n        Counter<Float> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    static public Counter<Byte> of(byte... arr) {\n        Counter<Byte> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    static public Counter<Integer> of(int... arr) {\n        Counter<Integer> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    static public Counter<Long> of(long... arr) {\n        Counter<Long> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    static public Counter<Short> of(short... arr) {\n        Counter<Short> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    static public Counter<String> of(String arr) {\n        Counter<String> counter = new Counter<>();\n        counter.pushAll(counter, arr);\n\n        return counter;\n    }\n\n    @Override\n    public String toString() {\n        return \"Counter(\" + super.toString() + \")\";\n    }\n\n    public Long get(Object key) {\n        return getOrDefault(key, 0L);\n    }\n\n    public Stream<T> elements() {\n        return entrySet().stream().flatMap(entry ->\n                Stream.iterate(entry.getKey(), i -> entry.getKey()).limit(entry.getValue() > 0 ? entry.getValue() : 0)\n        );\n    }\n\n    public List<T> elementsAsList() {\n        return elements().collect(Collectors.toList());\n    }\n\n    public Stream<Map.Entry<T, Long>> mostCommon() {\n        return entrySet().stream().sorted((o1, o2) -> o2.getValue().compareTo(o1.getValue()));\n    }\n\n    public Stream<Map.Entry<T, Long>> mostCommon(long n) {\n        return mostCommon().limit(n);\n    }\n\n    public List<Map.Entry<T, Long>> mostCommonAsList() {\n        return mostCommon().collect(Collectors.toList());\n    }\n\n    public List<Map.Entry<T, Long>> mostCommonAsList(long n) {\n        return mostCommon(n).collect(Collectors.toList());\n    }\n\n    public void push(T key) {\n        push(key, 1L);\n    }\n\n    public void push(T key, long n) {\n        put(key, getOrDefault(key, 0L) + n);\n    }\n\n    public void pushAll(Stream<? extends T> stream) {\n        stream.forEach(this::push);\n    }\n\n    public void pushAll(Collection<? extends T> coll) {\n        coll.forEach(this::push);\n    }\n\n    public void pushAll(T[] arr) {\n        Arrays.stream(arr).forEach(this::push);\n    }\n\n    public void pushAll(Map<? extends T, Long> other) {\n        other.forEach(this::push);\n    }\n\n    public static void pushAll(Counter<Boolean> cnt, boolean[] arr) {\n        for (Boolean i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<Byte> cnt, byte[] arr) {\n        for (Byte i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<Character> cnt, char[] arr) {\n        for (Character i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<Double> cnt, double[] arr) {\n        for (Double i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<Float> cnt, float[] arr) {\n        for (Float i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<Integer> cnt, int[] arr) {\n        for (Integer i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<Long> cnt, long[] arr) {\n        for (Long i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<Short> cnt, short[] arr) {\n        for (Short i : arr) {\n            cnt.push(i);\n        }\n    }\n\n    public static void pushAll(Counter<String> cnt, String s) {\n        for (Character i : s.toCharArray()) {\n            cnt.push(String.valueOf(i));\n        }\n    }\n\n    public Counter<T> add(Counter<? extends T> c) {\n        return new Counter<>(\n                pairStream(c, key -> get(key) + c.get(key))\n                        .filter(entry -> entry.getValue().compareTo(0L) > 0)\n                        .collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue))\n        );\n    }\n\n    public Counter<T> sub(Counter<? extends T> c) {\n        return new Counter<>(\n                pairStream(c, key -> get(key) - c.get(key))\n                        .filter(entry -> entry.getValue().compareTo(0L) > 0)\n                        .collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue))\n        );\n    }\n\n    public Counter<T> intersect(Counter<? extends T> c) {\n        return new Counter<>(\n                keySet()\n                        .stream()\n                        .filter(c::containsKey)\n                        .filter(key -> (get(key) > 0 && c.get(key) > 0) || (get(key) < 0 && c.get(key) < 0))\n                        .collect(Collectors.toMap(key -> key, key -> Math.min(get(key), c.get(key))))\n        );\n    }\n\n    public Counter<T> union(Counter<? extends T> c) {\n        return new Counter<>(\n                pairStream(c, key -> Math.max(get(key), c.get(key)))\n                        .filter(entry -> !entry.getValue().equals(0L))\n                        .collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue))\n        );\n    }\n\n    public Counter<T> subtract(Counter<? extends T> c) {\n        return new Counter<>(pairStream(c, key -> get(key) - c.get(key))\n                .collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue))\n        );\n    }\n\n    public Counter<T> mul(int n) {\n        Counter<T> counter = new Counter<>();\n        forEach((key, value) -> counter.put(key, value * n));\n        return counter;\n    }\n\n}\n"]}}], "1 kyu": [{"name": "Hack-22", "link": "https://www.codewars.com/kata/5510caecaacf801f820002ac", "kuy": "1 kyu", "solutions": {"java": ["import net.bytebuddy.ByteBuddy;\nimport net.bytebuddy.agent.ByteBuddyAgent;\n\nimport static net.bytebuddy.dynamic.loading.ClassReloadingStrategy.fromInstalledAgent;\nimport static net.bytebuddy.implementation.FixedValue.value;\nimport static net.bytebuddy.matcher.ElementMatchers.named;\n\npublic class Catch22 {\n    static {\n        ByteBuddyAgent.install();\n\n        new ByteBuddy()\n                .redefine(Yossarian.class)\n                .method(named(\"isCrazy\"))\n                .intercept(value(Boolean.TRUE))\n                .make()\n                .load(Yossarian.class.getClassLoader(), fromInstalledAgent());\n    }\n\n    public static Yossarian loophole() {\n        return new Yossarian() {};\n    }\n}"]}}], "Beta": [{"name": "Generator Functions", "link": "https://www.codewars.com/kata/59e7c7e5fc3c49d93f0000d3", "kuy": "Beta", "solutions": {"java": ["import java.util.Optional;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.function.Consumer;\n\npublic class GeneratorFunction<I, O> {\n\n    final Consumer<I> func;\n\n    public GeneratorFunction(Consumer<I> func) {\n        this.func = func;\n    }\n\n    public GeneratorFunction(Runnable func) {\n        this.func = ignored -> func.run();\n    }\n\n    public Generator<I, O> call() {\n        return new Generator<>(func);\n    }\n\n}\n\nclass Generator<I, O> {\n    volatile private boolean finished = false;\n\n    static final ThreadLocal<Generator> current = new ThreadLocal<>();\n\n    final BlockingQueue<Optional<I>> in = new ArrayBlockingQueue<>(1);\n    final BlockingQueue<Optional<O>> out = new ArrayBlockingQueue<>(1);\n\n    Generator(Consumer<I> func) {\n        Thread thread = new Thread(() -> {\n            current.set(this);\n            try {\n                func.accept(in.take().orElse(null));\n                finished = true;\n                out.put(Optional.empty());\n            } catch (InterruptedException e) {\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    static <I, O> Generator<I, O> get() {\n        return (Generator<I, O>) current.get();\n    }\n\n    public O next(I arg) {\n        try {\n            in.put(Optional.ofNullable(arg));\n            return out.take().orElse(null);\n        } catch (InterruptedException e) {\n        }\n        return null;\n    }\n\n    public O next() {\n        return next(null);\n    }\n\n    public boolean done() {\n        return finished;\n    }\n}\n\nclass Flow {\n\n    public static <I, O> I yield(O result) {\n        try {\n            Generator<I, O> gen = Generator.get();\n            gen.out.put(Optional.ofNullable(result));\n            return gen.in.take().orElse(null);\n        } catch (InterruptedException e) {\n        }\n        return null;\n    }\n\n    public static <I, O> void yieldFrom(GeneratorFunction<I, O> func) {\n        func.func.accept(null);\n    }\n\n}", "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.function.Consumer;\n\npublic class GeneratorFunction<I, O> {\n\n    private Consumer<I> func;\n    private boolean isRunnable;\n\n    public GeneratorFunction(Consumer<I> func) {\n        this.func = func;\n        this.isRunnable = false;\n    }\n\n    public GeneratorFunction(Runnable func) {\n        this.func = ignored -> func.run();\n        this.isRunnable = true;\n    }\n\n    public Generator<I, O> call() {\n        return new Generator<>(func, isRunnable);\n    }\n\n}\n\nclass Generator<I, O> {\n    private enum State {INITED, RUNNING, FINISHED}\n\n    volatile private State state;\n\n    private Thread thread;\n    private Consumer<I> func;\n    private boolean isRunnable;\n\n    private static ThreadLocal<Boolean> isRunnableState = new ThreadLocal<>();\n\n    public Generator(Consumer<I> func, boolean isRunnable) {\n        this.func = func;\n        this.state = State.INITED;\n        this.isRunnable = isRunnable;\n    }\n\n    public static boolean isRunnable() {\n        return isRunnableState.get();\n    }\n\n    public synchronized O next(I arg) {\n        if (state.equals(State.INITED)) {\n            thread = new Thread(() -> {\n                isRunnableState.set(isRunnable);\n\n                func.accept(arg);\n                state = State.FINISHED;\n\n                Channel.channel(thread.getId()).toGenerator(Channel.LAST_OBJECT);\n            });\n\n            Channel.addChannel(thread.getId());\n            thread.setDaemon(true);\n            thread.start();\n            state = State.RUNNING;\n        } else {\n            if (!isRunnable) {\n                Channel.channel(thread.getId()).toFlow(arg);\n            }\n        }\n\n        Object value = Channel.channel(thread.getId()).fromGenerator();\n\n        if (value == Channel.LAST_OBJECT) {\n            return null;\n        } else {\n            return (O) value;\n        }\n    }\n\n    public synchronized O next() {\n        return next(null);\n    }\n\n    public synchronized boolean done() {\n        return state.equals(State.FINISHED);\n    }\n}\n\n\nclass Channel {\n    private static ConcurrentHashMap<Long, Channel> map = new ConcurrentHashMap<>();\n\n    public static final Object NULL_WRAPPER = new Object();\n    public static final Object LAST_OBJECT = new Object();\n\n\n    public static void addChannel(long id) {\n        map.put(id, new Channel());\n    }\n\n    public static Channel channel() {\n        return channel(Thread.currentThread().getId());\n    }\n\n    public static Channel channel(long id) {\n        return map.get(id);\n    }\n\n    private SynchronousQueue flow = new SynchronousQueue();\n    private SynchronousQueue generator = new SynchronousQueue();\n\n    private void send(SynchronousQueue queue, Object value) {\n        if (value == null) {\n            value = NULL_WRAPPER;\n        }\n\n        try {\n            queue.put(value);\n        } catch (InterruptedException e) {\n        }\n    }\n\n    private Object recv(SynchronousQueue queue) {\n        Object value = null;\n\n        try {\n            value = queue.take();\n        } catch (InterruptedException e) {\n        }\n\n        if (value == NULL_WRAPPER) {\n            value = null;\n        }\n\n        return value;\n    }\n\n    public void toGenerator(Object value) {\n        send(generator, value);\n    }\n\n    public Object fromGenerator() {\n        return recv(generator);\n    }\n\n    public void toFlow(Object value) {\n        send(flow, value);\n    }\n\n    public Object fromFlow() {\n        return recv(flow);\n    }\n}\n\nclass Flow {\n\n    public static <I, O> I yield(O result) {\n        Channel channel = Channel.channel();\n        channel.toGenerator(result);\n\n        if (Generator.isRunnable()) {\n            return null;\n        } else {\n            return (I) channel.fromFlow();\n        }\n    }\n\n    public static <I, O> void yieldFrom(GeneratorFunction<I, O> func) {\n        Generator<I, O> call = func.call();\n        while (!call.done()) {\n            Object next = call.next();\n\n            if (next != Channel.LAST_OBJECT) {\n                Flow.yield(next);\n            }\n        }\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        GeneratorFunction<Void, String> func = new GeneratorFunction<>(() -> {\n            Flow.yield(\"1\");\n            Flow.yield(\"2\");\n            Flow.yield(\"3\");\n        });\n\n        Generator<Void, String> call = func.call();\n        while (!call.done()) {\n            System.out.println(call.next());\n        }\n    }\n}"]}}], "3 kyu": [{"name": "Psychic", "link": "https://www.codewars.com/kata/54bd79a7956834e767001357", "kuy": "3 kyu", "solutions": {"java": ["import java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.Random;\n\npublic class Psychic {\n\n    private static MyRandom myRandom = new MyRandom();\n\n    public static class MyRandom extends Random {\n        @Override\n        public double nextDouble() {\n            return 0;\n        }\n    }\n\n    static void setFinalStatic(Field field, Object newValue) throws Exception {\n        field.setAccessible(true);\n\n        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        modifiersField.setAccessible(true);\n        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n\n        field.set(null, newValue);\n    }\n\n    static {\n        try {\n            Class<?> declaredClass = Math.class.getDeclaredClasses()[0];\n            Field randomNumberGenerator = declaredClass.getDeclaredField(\"randomNumberGenerator\");\n            setFinalStatic(randomNumberGenerator, myRandom);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static double guess() {\n        return myRandom.nextDouble();\n    }\n}\n"]}}, {"name": "Closest pair of points in linearithmic time", "link": "https://www.codewars.com/kata/5376b901424ed4f8c20002b7", "kuy": "3 kyu", "solutions": {"java": ["import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class Kata {\n\n    private Point best1, best2;\n    private double bestDistance = Double.POSITIVE_INFINITY;\n\n    public static class Point2D extends Point implements Comparable<Point2D> {\n        public Point2D(Point p) {\n            this.x = p.x;\n            this.y = p.y;\n        }\n\n        @Override\n        public int compareTo(Kata.Point2D that) {\n            if (this.y < that.y) return -1;\n            if (this.y > that.y) return +1;\n            if (this.x < that.x) return -1;\n            if (this.x > that.x) return +1;\n            return 0;\n        }\n    }\n\n    public Kata(Point2D[] points) {\n        init(points);\n    }\n\n    private void init(Point2D[] points) {\n        int n = points.length;\n        if (n <= 1) return;\n\n        Point2D[] pointsByX = new Point2D[n];\n        System.arraycopy(points, 0, pointsByX, 0, n);\n        Arrays.sort(pointsByX, Comparator.comparingDouble(p -> p.x));\n\n        for (int i = 0; i < n - 1; i++) {\n            if (pointsByX[i].equals(pointsByX[i + 1])) {\n                bestDistance = 0.0;\n                best1 = pointsByX[i];\n                best2 = pointsByX[i + 1];\n                return;\n            }\n        }\n\n        Point2D[] pointsByY = new Point2D[n];\n        System.arraycopy(pointsByX, 0, pointsByY, 0, n);\n\n        Point2D[] aux = new Point2D[n];\n        closest(pointsByX, pointsByY, aux, 0, n - 1);\n    }\n\n\n    public static double distance(Point a, Point b) {\n        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n    }\n\n    private static boolean less(Comparable v, Comparable w) {\n        return v.compareTo(w) < 0;\n    }\n\n    private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi) {\n        if (hi + 1 - lo >= 0) {\n            System.arraycopy(a, lo, aux, lo, hi + 1 - lo);\n        }\n\n        int i = lo, j = mid + 1;\n        for (int k = lo; k <= hi; k++) {\n            if (i > mid) a[k] = aux[j++];\n            else if (j > hi) a[k] = aux[i++];\n            else if (less(aux[j], aux[i])) a[k] = aux[j++];\n            else a[k] = aux[i++];\n        }\n    }\n\n    private double closest(Point2D[] pointsByX, Point2D[] pointsByY, Point2D[] aux, int lo, int hi) {\n        if (hi <= lo) return Double.POSITIVE_INFINITY;\n\n        int mid = lo + (hi - lo) / 2;\n        Point2D median = pointsByX[mid];\n\n        double delta1 = closest(pointsByX, pointsByY, aux, lo, mid);\n        double delta2 = closest(pointsByX, pointsByY, aux, mid + 1, hi);\n        double delta = Math.min(delta1, delta2);\n\n        merge(pointsByY, aux, lo, mid, hi);\n\n        int m = 0;\n        for (int i = lo; i <= hi; i++) {\n            if (Math.abs(pointsByY[i].x - median.x) < delta)\n                aux[m++] = pointsByY[i];\n        }\n\n        for (int i = 0; i < m; i++) {\n            for (int j = i + 1; (j < m) && (aux[j].y - aux[i].y < delta); j++) {\n                double distance = distance(aux[i], aux[j]);\n\n                if (distance < delta) {\n                    delta = distance;\n                    if (distance < bestDistance) {\n                        bestDistance = delta;\n                        best1 = aux[i];\n                        best2 = aux[j];\n                    }\n                }\n            }\n        }\n        return delta;\n    }\n\n    public static List<Point> closestPair(List<Point> points) {\n        Kata kata = new Kata(points.stream().map(Point2D::new).toArray(Point2D[]::new));\n        return Arrays.asList(kata.best1, kata.best2);\n    }\n\n}"]}}, {"name": "Prime Streaming (PG-13)", "link": "https://www.codewars.com/kata/5519a584a73e70fa570005f5", "kuy": "3 kyu", "solutions": {"java": ["import java.util.*;\nimport java.util.stream.IntStream;\n\npublic class Primes {\n    private static Map<Integer, Boolean> isPrimeMap = new HashMap<>();\n\n    public static boolean isPrimeInner(int n) {\n        if ((n > 2 && n % 2 == 0) || n == 1) {\n            return false;\n        }\n\n        for (int i = 3; i <= (int) Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static boolean isPrime(int value) {\n        if (isPrimeMap.containsKey(value)) {\n            return isPrimeMap.get(value);\n        }\n        boolean result = isPrimeInner(value);\n        isPrimeMap.put(value, result);\n\n        return result;\n    }\n\n\n    public static int nextPrime(int i) {\n        return IntStream.iterate(i + 1, ii -> ii + 1).filter(Primes::isPrime).findFirst().orElse(0);\n    }\n\n    public static IntStream stream() {\n        return IntStream.iterate(2, Primes::nextPrime);\n    }\n}\n"]}}], "2 kyu": [{"name": "Prime Streaming (NC-17)", "link": "https://www.codewars.com/kata/59122604e5bc240817000016", "kuy": "2 kyu", "solutions": {"java": ["\nimport java.util.BitSet;\nimport java.util.stream.IntStream;\nimport java.util.function.IntSupplier;\n\npublic class Primes {\n    public static IntStream stream() {\n        return IntStream.generate(\n                new IntSupplier() {\n                    private final BitSet sieve = new BitSet();\n                    private int max = 7;\n                    private int next = 0;\n\n                    public int getAsInt() {\n                        if (next == 0) {\n                            next = 1;\n                            return 2;\n                        } else if (next == 1) {\n                            next = 2;\n                            return 3;\n                        }\n\n                        int p = sieve.nextClearBit(next);\n                        if (p > max) {\n                            int m = (max << 1) + 1;\n                            int s = sqrt(m);\n                            for (int i = 2; i <= s; i++) {\n                                if (!sieve.get(i)) {\n                                    int n = n(i);\n                                    int d = i & ~1;\n                                    int j = i + (i - 1) * n;\n                                    if (j <= max) j = max - (max - i) % n;\n                                    boolean e = (j - i) / n % 2 == 0;\n                                    for (; j > 0 && j <= m; j += n) {\n                                        sieve.set(e ? j : j + d);\n                                        e = !e;\n                                    }\n                                }\n                            }\n                            max = m;\n                            p = sieve.nextClearBit(next);\n                        }\n                        next = p + 1;\n                        return n(p);\n                    }\n\n                    int n(int b) {\n                        return (b << 1) + (b & -2) - 1;\n                    }\n\n                    int sqrt(int b) {\n                        double s = Math.sqrt(b * 3.0);\n                        s += s % 2.0 < 1.0 ? 1.0 : 2.0;\n                        return (int) (s / 3.0);\n                    }\n                }\n        );\n    }\n}"]}}, {"name": "Evaluate mathematical expression", "link": "https://www.codewars.com/kata/52a78825cdfc2cfc87000005", "kuy": "2 kyu", "solutions": {"java": ["import javax.script.ScriptEngineManager;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptException;\n\npublic class MathEvaluator {\n    public double calculate(String expression) {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n        Object eval = null;\n        try {\n            eval = engine.eval(expression);\n        } catch (ScriptException e) {\n            e.printStackTrace();\n        }\n        return new Double(eval.toString());\n    }\n\n\n}"]}}], "8 kyu": [{"name": "Jenny's secret message", "link": "https://www.codewars.com/kata/55225023e1be1ec8bc000390", "kuy": "8 kyu", "solutions": {"java": ["public class Greeter {\n  public static String greet(String name) {\n    if(name.equals(\"Johnny\")){\n      return \"Hello, my love!\";\n    }\n    \n    return String.format(\"Hello, %s!\", name);\n  }\n}"]}}, {"name": "Sort My Textbooks", "link": "https://www.codewars.com/kata/5a07e5b7ffe75fd049000051", "kuy": "8 kyu", "solutions": {"java": ["import java.util.List;\nimport java.util.stream.Collectors;\n\nclass sorter {\n    public static List<String> sort(List<String> textbooks) {\n        return textbooks.stream().sorted(String::compareToIgnoreCase).collect(Collectors.toList());\n    }\n}"]}}]}, "haskell": {"6 kyu": [{"name": "PI approximation ", "link": "https://www.codewars.com/kata/550527b108b86f700000073f", "kuy": "6 kyu", "solutions": {"haskell": ["module Codewars.Kata.PiApprox where\n\ntrunc10Dble :: Double -> Double\ntrunc10Dble d = (fromInteger $ truncate $ d * (10^10)) / (10.0^^10)\n\nrecursePi :: Integer -> Double -> Double -> (Integer, Double)\nrecursePi i num epsilon\n        | abs(pi - 4 * num) < epsilon = (i, trunc10Dble $ 4 * num)\n        | otherwise = recursePi (i + 1) (num + piApprox i) epsilon\n    where piApprox n = ((-1) ^ n) / (2 * (fromIntegral n) + 1)\n\niterPi :: Double -> (Integer, Double)\niterPi epsilon = recursePi 0 0.0 epsilon\n"]}}], "7 kyu": [{"name": "Simple Fun #152: Invite More Women?", "link": "https://www.codewars.com/kata/58acfe4ae0201e1708000075", "kuy": "7 kyu", "solutions": {"haskell": ["module SF153 where\n\ninviteMoreWomen :: [Int] -> Bool\ninviteMoreWomen arr = (sum arr) > 0"]}}, {"name": "Remove All The Marked Elements of a List", "link": "https://www.codewars.com/kata/563089b9b7be03472d00002b", "kuy": "7 kyu", "solutions": {"haskell": ["module Remove where\n\nremove :: [Int] -> [Int] -> [Int]\nremove src dst = filter (\\x -> not (elem x dst)) src"]}}], "8 kyu": [{"name": "Beginner - Reduce but Grow", "link": "https://www.codewars.com/kata/57f780909f7e8e3183000078", "kuy": "8 kyu", "solutions": {"haskell": ["module Grow where\n\ngrow :: [Int] -> Int\ngrow = foldr (*) 1"]}}, {"name": "Count Odd Numbers below n", "link": "https://www.codewars.com/kata/59342039eb450e39970000a6", "kuy": "8 kyu", "solutions": {"haskell": ["module OddCounter where\n\noddCount :: Int -> Int\noddCount x = div x 2"]}}, {"name": "Sum of positive", "link": "https://www.codewars.com/kata/5715eaedb436cf5606000381", "kuy": "8 kyu", "solutions": {"haskell": ["module Codewars.Arrays where\n\npositiveSum :: [Int] -> Int\npositiveSum arr = foldr (+) 0 (filter (>0) arr)\n"]}}]}, "c++": {"5 kyu": [{"name": "Eight ways to iterate over table", "link": "https://www.codewars.com/kata/5af5c18786d075cd5e00008b", "kuy": "5 kyu", "solutions": {"c++": ["using namespace std;\n\nenum Direction {\n    DirectionUp,\n    DirectionLeft,\n    DirectionNone,\n    DirectionDown,\n    DirectionRight\n};\n\npair<int, int> next(Direction d, int row, int column) {\n    switch (d) {\n        case DirectionUp:\n            return {row - 1, column};\n        case DirectionDown:\n            return {row + 1, column};\n        case DirectionLeft:\n            return {row, column - 1};\n        case DirectionRight:\n            return {row, column + 1};\n        default:\n            return {-1, -1};\n    }\n}\n\npair<int, int> normalize(Direction d, int row, int column, int rows, int columns) {\n    switch (d) {\n        case DirectionUp:\n            return {rows - 1, column};\n        case DirectionDown:\n            return {0, column};\n        case DirectionLeft:\n            return {row, columns - 1};\n        case DirectionRight:\n            return {row, 0};\n        default:\n            return {-1, -1};\n    }\n}\n\n\ntemplate<typename T>\nclass Table {\npublic:\n    class iterator : public std::iterator<input_iterator_tag, T> {\n    public:\n        iterator(Table<T> &table, Direction d0 = DirectionNone, Direction d1 = DirectionNone, int r = 0, int c = 0)\n                : table(table), d0(d0), d1(d1), row(r), column(c) {\n            for (auto d : {d0, d1})\n                tie(row, column) = normalize(d, row, column, rows(), columns());\n        }\n\n        void operator++() {\n            auto[r, c] = next(d0, row, column);\n\n            if (!is_valid(r, c)) {\n                tie(r, c) = next(d1, row, column);\n                tie(r, c) = normalize(d0, r, c, rows(), columns());\n\n                if (!is_valid(r, c))\n                    tie(r, c) = next(DirectionNone, row, column);\n            }\n\n            row = r;\n            column = c;\n        }\n\n        T &operator*() {\n            return table.mData[row][column];\n        }\n\n        bool operator!=(iterator other) {\n            return !(row == other.row && column == other.column);\n        }\n\n        int rows() {\n            return this->table.mData.size();\n        }\n\n        int columns() {\n            return this->table.mData[0].size();\n        }\n\n        bool is_valid(int r, int c) {\n            return 0 <= r && r < rows() && 0 <= c && c < columns();\n        }\n\n    private:\n        Table<T> &table;\n        Direction d0;\n        Direction d1;\n        int row;\n        int column;\n    };\n\n    void push_back(const vector<T> &row) {\n        mData.push_back(row);\n    }\n\n    iterator end() {\n        return iterator(*this);\n    }\n\n    iterator begin(Direction d0, Direction d1) {\n        return iterator(*this, d0, d1);\n    }\n\nprivate:\n    vector<vector<T>> mData;\n};\n", "#include <vector>\n\nusing namespace std;\n\nenum Direction {\n    DirectionUp,\n    DirectionLeft,\n    DirectionNone,\n    DirectionDown,\n    DirectionRight\n};\n\npair<int, int> next(Direction d, int row, int column) {\n    switch (d) {\n        case DirectionUp:\n            return {row - 1, column};\n        case DirectionDown:\n            return {row + 1, column};\n        case DirectionLeft:\n            return {row, column - 1};\n        case DirectionRight:\n            return {row, column + 1};\n        default:\n            return {-1, -1};\n    }\n}\n\npair<int, int> normalize(Direction d, int row, int column, int rows, int columns) {\n    switch (d) {\n        case DirectionUp:\n            return {rows - 1, column};\n        case DirectionDown:\n            return {0, column};\n        case DirectionLeft:\n            return {row, columns - 1};\n        case DirectionRight:\n            return {row, 0};\n        default:\n            return {-1, -1};\n    }\n}\n\n\ntemplate<typename T>\nclass Table {\npublic:\n    class iterator {\n    public:\n        typedef T value_type;\n        typedef ptrdiff_t difference_type;\n        typedef T *pointer;\n        typedef T &reference;\n        typedef input_iterator_tag iterator_category;\n\n        iterator(Table<T> &table, Direction d0, Direction d1, int r = 0, int c = 0)\n                : table(table), d0(d0), d1(d1), row(r), column(c) {\n            for (auto d : {d0, d1})\n                tie(row, column) = normalize(d, row, column, rows(), columns());\n        }\n\n        void operator++() {\n            auto[r, c] = next(d0, row, column);\n\n            if (!is_valid(r, c)) {\n                tie(r, c) = next(d1, row, column);\n                tie(r, c) = normalize(d0, r, c, rows(), columns());\n\n                if (!is_valid(r, c))\n                    tie(r, c) = next(DirectionNone, row, column);\n            }\n\n            row = r;\n            column = c;\n        }\n\n        T &operator*() {\n            return table.mData[row][column];\n        }\n\n        bool operator!=(iterator other) {\n            return !(row == other.row && column == other.column);\n        }\n\n        int rows() {\n            return this->table.mData.size();\n        }\n\n        int columns() {\n            return this->table.mData[0].size();\n        }\n\n        bool is_valid(int r, int c) {\n            return 0 <= r && r < rows() && 0 <= c && c < columns();\n        }\n\n    private:\n        Table<T> &table;\n        Direction d0;\n        Direction d1;\n        int row;\n        int column;\n    };\n\n    void push_back(const vector<T> &row) {\n        mData.push_back(row);\n    }\n\n    iterator end() {\n        return iterator(*this, DirectionNone, DirectionNone, -1, -1);\n    }\n\n    iterator begin(Direction d0, Direction d1) {\n        return iterator(*this, d0, d1);\n    }\n\nprivate:\n    vector<vector<T>> mData;\n};"]}}, {"name": "Variadic Parameter Pack Count", "link": "https://www.codewars.com/kata/5b535628a8eb75ab2c000062", "kuy": "5 kyu", "solutions": {"c++": ["#include <cstddef>\n\ntemplate<typename T, typename... Ts>\nconstexpr std::size_t arg_length(T, Ts... xs) noexcept {\n    int s = 1;\n    for (auto &i : {xs...}) s++;\n\n    return s;\n}"]}}], "3 kyu": [{"name": "Magic Compare", "link": "https://www.codewars.com/kata/59ad0147485a4d9d3f0000a9", "kuy": "3 kyu", "solutions": {"c++": ["#define COMPARE(OP) \\\nfriend MagicCompare<T> operator OP(MagicCompare<T> self, T other) { \\\n    return MagicCompare(other, self.previous && self.value OP other);\\\n}\\\nfriend MagicCompare<T> operator OP(T other, MagicCompare<T> self) {\\\n    return MagicCompare(self.value, self.previous && other OP self.value);\\\n}\\\nfriend MagicCompare<T> operator OP(MagicCompare<T> self, MagicCompare<T> other) {\\\n    return MagicCompare(other.value, self.previous && self.value OP other.value);\\\n}\n\n#define ARITHMETIC(OP)\\\nfriend MagicCompare<T> operator OP(T other, MagicCompare<T> self) {\\\n    return MagicCompare(other OP self.value, self.previous);\\\n}\\\nfriend MagicCompare<T> operator OP(MagicCompare<T> self, T other) {\\\n    return MagicCompare(other OP self.value, self.previous);\\\n}\\\nfriend MagicCompare<T> operator OP(MagicCompare<T> self, MagicCompare<T> other) {\\\n    return MagicCompare(other.value OP self.value, self.previous);\\\n}\n\n#define ARITHMETIC_INPLACE(OP)\\\nvoid operator OP(T other) {\\\n    value OP other;\\\n}\\\nvoid operator OP(MagicCompare<T>& other) {\\\n    value OP other.value;\\\n}\n\n#define UNARY(OP)\\\nMagicCompare<T> &operator OP() {\\\n    this->value OP;\\\n    return *this;\\\n}\\\n\ntemplate<class T>\nclass MagicCompare {\nprivate:\n    T value;\n    bool previous = true;\npublic:\n    MagicCompare(T value, bool previous = true) : value(value), previous(previous) {}\n\n    MagicCompare<T> &operator=(T other) {\n        this->value = other;\n        return *this;\n    }\n\n    explicit operator bool() {\n        return this->previous;\n    }\n\n    operator T() {\n        if (!previous)\n            return MagicCompare(0);\n\n        return this->value;\n    }\n\n    COMPARE(==)\n    COMPARE(!=)\n    COMPARE(<)\n    COMPARE(<=)\n    COMPARE(>)\n    COMPARE(>=)\n\n    ARITHMETIC(+)\n    ARITHMETIC(-)\n    ARITHMETIC(*)\n    ARITHMETIC(/)\n\n    ARITHMETIC_INPLACE(+=)\n    ARITHMETIC_INPLACE(-=)\n    ARITHMETIC_INPLACE(*=)\n    ARITHMETIC_INPLACE(/=)\n\n    UNARY(++)\n    UNARY(--)\n};"]}}], "4 kyu": [{"name": "Tuple sum", "link": "https://www.codewars.com/kata/58602cd3ef06546bb7000152", "kuy": "4 kyu", "solutions": {"c++": ["template<typename Tuple, typename F, std::size_t ...Indices>\nvoid for_each_impl(Tuple &&tuple, F &&f, std::index_sequence<Indices...>) {\n    auto _ = {0, (f(std::get<Indices>(std::forward<Tuple>(tuple))), void(), int{})...};\n}\n\ntemplate<typename Tuple, typename F>\nvoid for_each(Tuple &&tuple, F &&f) {\n    constexpr std::size_t N = std::tuple_size<std::remove_reference_t<Tuple>>::value;\n\n    for_each_impl(\n            std::forward<Tuple>(tuple),\n            std::forward<F>(f),\n            std::make_index_sequence<N>{}\n    );\n}\n\ndouble sum(double a) {\n    return a;\n}\n\ndouble sum(int a) {\n    return a;\n}\n\ntemplate<typename T>\ndouble sum(T a) {\n    return 0;\n}\n\ntemplate<typename... Ts>\ndouble tuple_sum(const std::tuple<Ts...> &tpl) {\n    double s = 0;\n    for_each(tpl, [&](auto f) { s += sum(f); });\n    return s;\n}"]}}, {"name": "Multiplying numbers as strings", "link": "https://www.codewars.com/kata/55911ef14065454c75000062", "kuy": "4 kyu", "solutions": {"javascript": ["String.prototype.replaceZeros = function () {\n    return this.replace(/^0+/, '') || \"0\";\n};\n\nlet divMod = (a, b = 10) => [Math.floor(a / b), a % b];\n\nlet digits = (a, b) => Array(Math.max(a.length, b.length))\n    .fill(0)\n    .map((_, i) => [a[a.length - 1 - i] || \"0\", b[b.length - 1 - i] || \"0\"])\n    .map(arr => arr.map(i => parseInt(i)));\n\nlet add = (a, b) => {\n    let remainder = 0, value = \"\", n;\n\n    for (let [x, y] of digits(a, b)) {\n        [remainder, n] = divMod(x + y + remainder);\n        value = `${n}${value}`;\n    }\n\n    return `${remainder}${value}`.replaceZeros();\n};\n\nlet multiply = (a, b) => {\n    [a, b] = [a.replaceZeros(), b.replaceZeros()];\n\n    if (a === \"0\" || b === \"0\")\n        return \"0\";\n\n    [a, b] = a.length > b.length ? [a, b] : [b, a];\n\n    if (b.length === 1) {\n        let remainder = 0, value = \"\", n;\n        for (let [x,] of digits(a, b)) {\n            [remainder, n] = divMod(x * parseInt(b) + remainder);\n            value = `${n % 10}${value}`;\n        }\n\n        return `${remainder}${value}`.replaceZeros();\n    }\n\n    return [...b]\n        .reverse()\n        .reduce((acc, x, i) => add(acc, multiply(a, x) + \"0\".repeat(i)), \"0\")\n        .replaceZeros();\n};"], "c++": ["#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring removeZero(string str) {\n    auto i = 0;\n    while (str[i] == '0')\n        i++;\n\n    str.erase(0, i);\n    return str;\n}\n\nint getOrNull(vector<int> &arr, int pos) {\n    return pos < arr.size() ? arr.at(pos) : 0;\n}\n\nstring multiply(string a, string b) {\n\n    if (a.length() < b.length()) {\n        a.insert(0, string(b.length() - a.length(), '0'));\n    } else if (b.length() < a.length()) {\n        b.insert(0, string(a.length() - b.length(), '0'));\n    }\n\n    vector<vector<int>> table;\n\n    for (int i = a.length() - 1; i >= 0; i--) {\n        auto ost = 0;\n        vector<int> row;\n\n        for (int j = b.length() - 1; j >= 0; j--) {\n            auto item = (a[i] - '0') * (b[j] - '0') + ost;\n            ost = item / 10;\n            item %= 10;\n\n            row.push_back(item);\n        }\n\n        row.push_back(ost);\n        table.push_back(row);\n    }\n\n    for (int i = 1; i < table.size(); i++) {\n        auto &row = table[i];\n        for (int j = 0; j < i; j++) {\n            row.insert(row.begin(), 0);\n        }\n    }\n\n    auto &row = table.at(table.size() - 1);\n    string res = \"\";\n    auto ost = 0;\n\n    for (auto i = 0; i < row.size(); i++) {\n        auto n = ost;\n        for (auto r : table) {\n            n += getOrNull(r, i);\n        }\n\n        ost = n / 10;\n        n %= 10;\n        res.insert(res.begin(), '0' + n);\n    }\n    res.insert(res.begin(), '0' + ost);\n\n    res = removeZero(res);\n    return res.empty() ? \"0\" : res;\n}"]}}, {"name": "Sum Strings as Numbers", "link": "https://www.codewars.com/kata/5324945e2ece5e1f32000370", "kuy": "4 kyu", "solutions": {"javascript": ["let sumStrings = (a, b) => {\n    a = [...a.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n    b = [...b.padStart(Math.max(a.length, b.length), \"0\")].reverse();\n\n    let remainder = 0, value = \"\";\n    for (let i = 0; i < a.length; i++) {\n        let n = parseInt(a[i]) + parseInt(b[i]) + remainder;\n        value = `${n % 10}${value}`;\n        remainder = Math.floor(n / 10);\n    }\n\n    return `${remainder}${value}`.replace(/^0+/, '');\n};"], "c++": ["#include <algorithm>\n#include <iostream>\n#include <string>\n\nstd::string removeZero(std::string str)\n{\n\tint i = 0;\n\twhile (str[i] == '0')\n\t\ti++;\n\n\tstr.erase(0, i);\n\treturn str;\n}\n\nstd::string sum_strings(std::string a, std::string b) {\n\tstd::cout << a << std::endl;\n\tstd::cout << b << std::endl;\n\n\tstd::reverse(a.begin(), a.end());\n\tstd::reverse(b.begin(), b.end());\n\n\tstd::string *shoter;\n\tstd::string *longer;\n\n\tif (a.size() > b.size()) {\n\t\tshoter = &b;\n\t\tlonger = &a;\n\t}\n\telse {\n\t\tshoter = &a;\n\t\tlonger = &b;\n\t}\n\n\tint repeats = longer->size() - shoter->size();\n\tfor (int i = 0; i < repeats; i++) {\n\t\t*shoter += \"0\";\n\t}\n\n\tint ost = 0;\n\tstd::string res = \"\";\n\tfor (int i = 0; i < longer->size(); i++) {\n\t\tstd::string n = std::to_string(a.at(i) - '0' + b.at(i) - '0' + ost);\n\t\tif (n.size() == 2) {\n\t\t\tres += n.at(1);\n\t\t\tost = n.at(0) - '0';\n\t\t}\n\t\telse {\n\t\t\tres += n;\n\t\t\tost = 0;\n\t\t}\n\t}\n\n\tif (ost != 0) {\n\t\tres += std::to_string(ost);\n\t}\n\n\tstd::reverse(res.begin(), res.end());\n\treturn res == \"0\" ? res : removeZero(res);\n}"]}}, {"name": "Adding Big Numbers", "link": "https://www.codewars.com/kata/525f4206b73515bffb000b21", "kuy": "4 kyu", "solutions": {"c++": ["#include <algorithm>\n#include <iostream>\n#include <string>\n\nstd::string removeZero(std::string str)\n{\n\tint i = 0;\n\twhile (str[i] == '0')\n\t\ti++;\n\n\tstr.erase(0, i);\n\treturn str;\n}\n\nstd::string add(std::string a, std::string b) {\n\tstd::reverse(a.begin(), a.end());\n\tstd::reverse(b.begin(), b.end());\n\n\tstd::string *shoter;\n\tstd::string *longer;\n\n\tif (a.size() > b.size()) {\n\t\tshoter = &b;\n\t\tlonger = &a;\n\t}\n\telse {\n\t\tshoter = &a;\n\t\tlonger = &b;\n\t}\n\n\tint repeats = longer->size() - shoter->size();\n\tfor (int i = 0; i < repeats; i++) {\n\t\t*shoter += \"0\";\n\t}\n\n\tint ost = 0;\n\tstd::string res = \"\";\n\tfor (int i = 0; i < longer->size(); i++) {\n\t\tstd::string n = std::to_string(a.at(i) - '0' + b.at(i) - '0' + ost);\n\t\tif (n.size() == 2) {\n\t\t\tres += n.at(1);\n\t\t\tost = n.at(0) - '0';\n\t\t}\n\t\telse {\n\t\t\tres += n;\n\t\t\tost = 0;\n\t\t}\n\t}\n\n\tif (ost != 0) {\n\t\tres += std::to_string(ost);\n\t}\n\n\tstd::reverse(res.begin(), res.end());\n\treturn res == \"0\" ? res : removeZero(res);\n}"]}}], "6 kyu": [{"name": "Compile time #3.1 Make string", "link": "https://www.codewars.com/kata/5a7ab27bfd57772f4d001301", "kuy": "6 kyu", "solutions": {"c++": ["template <char... C>\nstruct make_string {\n  constexpr static char value[sizeof...(C) + 1] = {C..., '\\0'};\n};\n\ntemplate <char... C>\nconstexpr char make_string<C...>::value[sizeof...(C) + 1];\n"]}}, {"name": "Compile time #1 Factorial", "link": "https://www.codewars.com/kata/5a74a94f5084d72c710000de", "kuy": "6 kyu", "solutions": {"c++": ["template <int x>\nstruct factorial { \n    enum: long long { value = x * factorial<x-1>::value };\n};\n\ntemplate <>\nstruct factorial<0> {\n  enum: long long { value = 1 };\n};"]}}, {"name": "Sum of Two Integers ", "link": "https://www.codewars.com/kata/5a9c35e9ba1bb5c54a0001ac", "kuy": "6 kyu", "solutions": {"c++": ["int Add (int x, int y)\n{\n    while (y != 0)  \n    {  \n        int carry = x & y;  \n        x = x ^ y;  \n        y = carry << 1;  \n    }  \n    return x;\n}"]}}, {"name": "Valid Braces", "link": "https://www.codewars.com/kata/5277c8a221e209d3f6000b56", "kuy": "6 kyu", "solutions": {"c++": ["bool valid_braces(std::string braces) \n{\n  std::string all_braces = \"(){}[]\";\n  std::string stack = \"\";\n  \n  for (auto c : braces){  \n  {    \n      std::cout << c << std::endl;\n      if (all_braces.find(c) != std::string::npos)\n      {\n        if (all_braces.find(c) % 2 == 0){\n          stack += c;\n        }else{\n          if (all_braces.find(c) - all_braces.find(stack.back()) != 1){\n            return false;\n          }\n          stack.pop_back();\n        }\n      }\n    }\n   }\n return stack.empty();\n}"], "python": ["braces = '(){}[]'\n\n\ndef validBraces(string):\n    stack = []\n    for s in string:\n        if not braces.index(s) % 2:\n            stack.append(s)\n        elif not stack or braces.index(s) - braces.index(stack[-1]) != 1:\n            return False\n        else:\n            stack.pop()\n\n    return not stack"]}}], "7 kyu": [{"name": "Return pyramids", "link": "https://www.codewars.com/kata/5a1c28f9c9fc0ef2e900013b", "kuy": "7 kyu", "solutions": {"c++": ["std::string pyramid(int n){\n  std::string result = \"\";\n  for (int i = 0; i < n; i++){\n    result += std::string(n - i - 1, ' ') + \"/\" + std::string(i * 2 , (i + 1 == n ? '_' : ' ')) + \"\\\\\\n\";\n  }\n  \n  return result;\n}"]}}, {"name": "Sum of angles", "link": "https://www.codewars.com/kata/5a03b3f6a1c9040084001765", "kuy": "7 kyu", "solutions": {"python": ["def angle(n):\n    return 180 * (n - 2)"], "c++": ["int angle(int n) {\n  return 180 * (n - 2);\n}"]}}]}, "coffeescript": {"5 kyu": [{"name": "Math Issues", "link": "https://www.codewars.com/kata/5267faf57526ea542e0007fb", "kuy": "5 kyu", "solutions": {"coffeescript": ["Math.round = (number) -> parseInt(number) + (number % 1 >= 0.5)\nMath.ceil  = (number) -> parseInt(number) + (number % 1 != 0)\nMath.floor = (number) -> parseInt(number)"]}}, {"name": "Sorted list", "link": "https://www.codewars.com/kata/53138a5dbb244a40680000a3", "kuy": "5 kyu", "solutions": {"coffeescript": ["\nclass SortedList\n  constructor: ->\n    @arr = []\n    @length = 0\n\n  add: (val) ->\n    @length++\n    for i in [0..@length - 1]\n      if val < @arr[i]\n        @arr.splice(i, 0, val)\n        return\n\n    @arr.push(val)\n\n  get: (i) -> @arr[i]"]}}, {"name": "Fibonacci Generator", "link": "https://www.codewars.com/kata/522498c9906b0cfcb40001fc", "kuy": "5 kyu", "solutions": {"coffeescript": ["fibgen = ->\n  [a, b] = [0, 1]\n  loop\n    yield a\n    [a, b] = [b, a + b]\n\ngenfib = ->\n  f = fibgen()\n  -> f.next().value"]}}, {"name": "Wrapped Function", "link": "https://www.codewars.com/kata/511ed4593ba69cba1a000002", "kuy": "5 kyu", "solutions": {"coffeescript": ["Function::wrap = (f) -> (args...) => f(@, args...)", "Function.prototype.wrap = (callback) ->\n  self = this\n  (args...) -> callback(self, args...)"]}}, {"name": "Largest Difference in Increasing Indexes", "link": "https://www.codewars.com/kata/52503c77e5b972f21600000e", "kuy": "5 kyu", "solutions": {"coffeescript": ["largestDifference = (data) ->\n  max = 0\n  for i in [0..data.length]\n    for j in [i + 1..data.length]\n      max = j - i if j - i > max and data[i] <= data[j]\n\n  return max", "largestDifference = (data) ->\n  max = 0\n  for i in [0..data.length]\n    for j in [i + 1..data.length]\n      if j - i > max and data[i] <= data[j]\n        max = j - i\n\n  return max"]}}, {"name": "Partition On", "link": "https://www.codewars.com/kata/525a037c82bf42b9f800029b", "kuy": "5 kyu", "solutions": {"coffeescript": ["partitionOn = (pred, items) ->\n  [trues, falses] = [[], []]\n  items.forEach (c) ->\n    (if pred(c) then trues else falses).push c\n\n  items.length = 0\n  items.push falses..., trues...\n\n  falses.length"]}}, {"name": "Tic-Tac-Toe Checker", "link": "https://www.codewars.com/kata/525caa5c1bf619d28c000335", "kuy": "5 kyu", "solutions": {"coffeescript": ["anyLineEqual = (board, piece) ->\n  board.some (b) -> b.every (p) -> p is piece\n\nrotate = (board) ->\n  board[0].map((col, i) -> board.map((row) -> row[i]))\n\ndiagonal = (board, reversed = false) ->\n  [board.map (b, i) -> board[i][if reversed then b.length - 1 - i else i]]\n\nisSolvedFor = (board, player) ->\n  anyLineEqual(board, player) or\n  anyLineEqual(rotate board, player) or\n  anyLineEqual(diagonal board, player) or\n  anyLineEqual(diagonal(board, false), player)\n\nisSolved = (board) ->\n  if isSolvedFor(board, 1)\n    1\n  else if isSolvedFor(board, 2)\n    2\n  else if (board.some (b) -> b.some (c) -> c is 0)\n    -1\n  else\n    0"]}}], "4 kyu": [{"name": "Square into Squares. Protect trees!", "link": "https://www.codewars.com/kata/54eb33e5bc1a25440d000891", "kuy": "4 kyu", "solutions": {"coffeescript": ["decompose = (n) => simplifier(n, n * n)?[...-1] ? null\n\nsimplifier = (n, others) =>\n  return [n] if others is 0\n\n  for i in [n - 1..1]\n    break unless i > 0\n\n    if others - (i * i) >= 0\n      r = simplifier(i, others - (i * i))\n      return [r..., n] if r?"]}}], "1 kyu": [{"name": "Functional SQL", "link": "https://www.codewars.com/kata/545434090294935e7d0010ab", "kuy": "1 kyu", "solutions": {"coffeescript": ["Array::nonEmpty = -> @ if @length\n\nArray::flat = -> @reduce ((acc, a) => [acc..., a...]), []\n\nArray::sorted = (predicate) -> @[..].sort(predicate)\n\nArray::groupBy = (grouper, other...) ->\n  return @ unless grouper?\n\n  groups = {}\n  order = []\n\n  for row in @\n    group = grouper row\n\n    unless (order.some (i) => i is group)\n      order.push group\n\n    groups[group] ?= []\n    groups[group].push row\n\n  order.map (group) => [group, groups[group].groupBy(other...)]\n\nArray::applyPredicates = (allPredicates) -> @filter (row) =>\n  allPredicates.every (predicates) => predicates.some (w) => w row\n\njoined = (first, others...) ->\n  return [] unless first?\n\n  toJoin = joined(others...)\n  first.map (row) => toJoin.nonEmpty()?.map((join) => [row, join...]) ? [row]\n\nclass Query\n  constructor: (@_select, @_from, @_gropby, @_orderby, @_where = [], @_having = []) ->\n\n  @api: (propToCheck, f) -> () ->\n    if propToCheck? and @[\"_#{propToCheck}\"] != undefined\n      throw Error(\"Duplicate #{propToCheck.toUpperCase()}\")\n\n    f.apply @, arguments\n    @\n\n  from    :@api \"from\"    ,(from...)            -> @_from    = from\n  groupBy :@api \"groupby\" ,(groupers...)        -> @_groupby = groupers\n  select  :@api \"select\"  ,(selector   = null)  -> @_select  = selector\n  orderBy :@api \"orderby\" ,(comparator = null)  -> @_orderby = comparator\n  where   :@api null      ,(predicates...)      -> @_where.push  predicates\n  having  :@api null      ,(predicates...)      -> @_having.push predicates\n\n  execute: () ->\n    joined (@_from ? [])...\n      .flat()\n      .applyPredicates @_where\n      .groupBy         (@_groupby ? [])...\n      .applyPredicates @_having\n      .sorted          (@_orderby ? ((a, b) => 0))\n      .map             (row) => (@_select ? ((a) => (a))) row\n\nquery = -> new Query", "Array::nonEmpty = -> @ if @length\n\nArray::flat = -> @reduce ((acc, a) => [acc..., a...]), []\n\nArray::sorted = (predicate) -> @[..].sort(predicate)\n\nArray::groupBy = (grouper, other...) ->\n  return @ unless grouper?\n\n  groups = {}\n  order = []\n\n  for row in @\n    group = grouper row\n\n    unless (order.some (i) => i is group)\n      order.push group\n\n    groups[group] ?= []\n    groups[group].push row\n\n  order.map (group) => [group, groups[group].groupBy(other...)]\n\nArray::applyPredicates = (allPredicates) -> @filter (row) =>\n  allPredicates.every (predicates) => predicates.some (w) => w row\n\njoined = (first, others...) ->\n  return [] unless first?\n\n  toJoin = joined(others...)\n  first.map (row) => toJoin.nonEmpty()?.map((join) => [row, join...]) ? [row]\n\nclass Query\n  constructor: () ->\n    @_select  = undefined\n    @_from    = undefined\n    @_groupby = undefined\n    @_orderby = undefined\n    @_where   = []\n    @_having  = []\n\n  @api: (propToCheck, f) -> () ->\n    if propToCheck? and @[\"_#{propToCheck}\"] != undefined\n      throw Error(\"Duplicate #{propToCheck.toUpperCase()}\")\n\n    f.apply @, arguments\n    @\n\n  from    :@api \"from\"    ,(from...)            -> @_from    = from\n  groupBy :@api \"groupby\" ,(groupers...)        -> @_groupby = groupers\n  select  :@api \"select\"  ,(selector = null)    -> @_select  = selector\n  orderBy :@api \"orderby\" ,(comparator = null)  -> @_orderby = comparator\n  where   :@api null      ,(predicates...)      -> @_where.push  predicates\n  having  :@api null      ,(predicates...)      -> @_having.push predicates\n\n  execute: () ->\n    joined (@_from ? [])...\n      .flat()\n      .applyPredicates  @_where\n      .groupBy         (@_groupby ? [])...\n      .applyPredicates (@_having  ? [])\n      .sorted          (@_orderby ? ((a, b) => 0))\n      .map             (row) => (@_select ? ((a) => (a))) row\n\nquery = -> new Query", "Array::flat = -> this.reduce(((acc, a) => [acc..., a...]), [])\n\nArray::sorted = (predicate) -> [this...].sort(predicate)\n\nArray::applyPredicates = (allPredicates) -> @filter (row) =>\n  allPredicates.every (predicates) => predicates.some (w) => w row\n\nArray::groupBy = (grouper = null, other...) ->\n  return this if not grouper?\n\n  groups = {}\n  order = []\n\n  for row in this\n    group = grouper row\n\n    if not (order.some (i) => i is group)\n      order.push group\n\n    groups[group] ?= []\n    groups[group].push row\n\n  order.map (group) => [group, groups[group].groupBy(other...)]\n\njoined = (first = null, others...) ->\n  return [] if not first?\n\n  others_data = joined(others...)\n\n  first.map (row) =>\n    if others_data.length then others_data.map ((data) => [row, data...]) else [row]\n\nclass Query\n  constructor: () ->\n    @_select  = undefined\n    @_from    = undefined\n    @_groupby = undefined\n    @_orderby = undefined\n    @_where   = []\n    @_having  = []\n\n  @api: (propToCheck, f) -> () ->\n    if propToCheck? and @[\"_#{propToCheck}\"] != undefined\n      throw Error(\"Duplicate #{propToCheck.toUpperCase()}\")\n\n    f.apply @, arguments\n    @\n\n  from    :@api \"from\"    ,(from...)            -> @_from    = from\n  select  :@api \"select\"  ,(selector = null)    -> @_select  = selector\n  groupBy :@api \"groupby\" ,(groupers...)        -> @_groupby = groupers\n  orderBy :@api \"orderby\" ,(comparator = null)  -> @_orderby = comparator\n  where   :@api null      ,(predicates...)      -> @_where.push predicates\n  having  :@api null      ,(predicates...)      -> @_having.push predicates\n\n  execute: () ->\n    joined (@_from ? [])...\n      .flat()\n      .applyPredicates  @_where\n      .groupBy         (@_groupby ? [])...\n      .applyPredicates (@_having  ? [])\n      .sorted          (@_orderby ? ((a, b) => 0))\n      .map             (row) => (@_select ? ((a) => (a))) row\n\nquery = -> new Query", "Array::flat = () -> this.reduce(((acc, a) => [acc..., a...]), [])\n\nArray::sorted = (predicate) -> [this...].sort(predicate)\n\nArray::applyPredicates = (allPredicates) -> @filter (row) =>\n  allPredicates.every (predicates) =>\n    predicates.some (w) => w row\n\nArray::groupBy = (grouper = null, other...) ->\n  if not grouper?\n    return this\n\n  groups = {}\n  order = []\n\n  for row in this\n    group = grouper row\n\n    if not (order.some (i) => i is group)\n      order.push group\n\n    groups[group] ?= []\n    groups[group].push row\n\n  order.map (group) => [group, groups[group].groupBy(other...)]\n\njoined = (first = null, others...) ->\n  if not first?\n    return []\n\n  others_data = joined(others...)\n\n  first.map (row) =>\n    if others_data.length then others_data.map ((data) => [row, data...]) else [row]\n\nclass Query\n  constructor: () ->\n    @_select  = undefined\n    @_from    = undefined\n    @_groupby = undefined\n    @_orderby = undefined\n    @_where   = []\n    @_having  = []\n\n  @api: (propToCheck, f) -> () ->\n    if propToCheck? and @[\"_#{propToCheck}\"] != undefined\n      throw Error(\"Duplicate #{propToCheck.toUpperCase()}\")\n\n    f.apply @, arguments\n    @\n\n  from:    @api \"from\"    ,(from...)            -> @_from    = from\n  select:  @api \"select\"  ,(selector = null)    -> @_select  = selector\n  groupBy: @api \"groupby\" ,(groupers...)        -> @_groupby = groupers\n  orderBy: @api \"orderby\" ,(comparator = null)  -> @_orderby = comparator\n  where:   @api null      ,(predicates...)      -> @_where.push predicates\n  having:  @api null      ,(predicates...)      -> @_having.push predicates\n\n  execute: () ->\n    joined (@_from ? [])...\n      .flat()\n      .applyPredicates  @_where\n      .groupBy         (@_groupby ? [])...\n      .applyPredicates (@_having  ? [])\n      .sorted          (@_orderby ? ((a, b) => 0))\n      .map             (row) => (@_select ? ((a) => (a))) row\n\nquery = -> new Query", "Array::flat = () -> this.reduce(((acc, a) => [acc..., a...]), [])\n\nArray::sorted = (predicate) -> [this...].sort(predicate)\n\nArray::applyPredicates = (allPredicates) -> @filter (row) =>\n  allPredicates.every (predicates) =>\n    predicates.some (w) => w row\n\nArray::groupBy = (grouper = null, other...) ->\n  if not grouper?\n    return this\n\n  groups = {}\n  order = []\n\n  for row in this\n    group = grouper row\n\n    if not (order.some (i) => i is group)\n      order.push group\n\n    groups[group] ?= []\n    groups[group].push row\n\n  order.map (group) => [group, groups[group].groupBy(other...)]\n\njoined = (first = null, others...) ->\n  if not first?\n    return []\n\n  others_data = joined(others...)\n\n  first.map (row) =>\n    if others_data.length then others_data.map ((data) => [row, data...]) else [row]\n\nclass Query\n  constructor: () ->\n    @_select  = undefined\n    @_from    = undefined\n    @_groupby = undefined\n    @_orderby = undefined\n    @_where   = []\n    @_having  = []\n\n  @api: (propToCheck, f) -> () ->\n    if propToCheck? and @[\"_#{propToCheck}\"] != undefined\n      throw Error(\"Duplicate #{propToCheck.toUpperCase()}\")\n\n    f.apply @, arguments\n    @\n\n  from:    @api \"from\"    ,(from...)            -> @_from    = from\n  select:  @api \"select\"  ,(selector = null)    -> @_select  = selector\n  groupBy: @api \"groupby\" ,(groupers...)        -> @_groupby = groupers\n  orderBy: @api \"orderby\" ,(comparator = null)  -> @_orderby = comparator\n  where:   @api null      ,(predicates...)      -> @_where.push predicates\n  having:  @api null      ,(predicates...)      -> @_having.push predicates\n\n  execute: () ->\n    joined (@_from ? [])...\n      .flat()\n      .applyPredicates  @_where\n      .groupBy         (@_groupby ? [])...\n      .applyPredicates (@_having  ? [])\n      .sorted          (@_orderby ? ((a, b) => 0))\n      .map             (row) => (@_select ? ((a) => (a)))(row)\n\nquery = -> new Query()", "Array::flat = () -> this.reduce(((acc, a) => [acc..., a...]), [])\n\nArray::sorted = (predicate) -> [this...].sort(predicate)\n\nArray::applyPredicates = (allPredicates) -> @filter (row) =>\n  allPredicates.every (predicates) =>\n    predicates.some (w) => w row\n\nArray::groupBy = (grouper = null, other...) ->\n  if not grouper?\n    return this\n\n  groups = {}\n  order = []\n\n  for row in this\n    group = grouper row\n\n    if not (order.some (i) => i is group)\n      order.push group\n\n    groups[group] ?= []\n    groups[group].push row\n\n  order.map (group) => [group, groups[group].groupBy(other...)]\n\njoined = (first = null, others...) ->\n  if not first?\n    return []\n\n  others_data = joined(others...)\n\n  first.map (row) =>\n    if others_data.length then others_data.map ((data) => [row, data...]) else [row]\n\n\nMISSED = (a) => a\n\nclass Query\n  constructor: () ->\n    @_select = MISSED\n    @_from = MISSED\n    @_groupby = MISSED\n    @_orderby = MISSED\n    @_where = []\n    @_having = []\n\n  @api: (propToCheck, f) -> () ->\n    if propToCheck? and @[\"_#{propToCheck}\"] != MISSED\n      throw Error(\"Duplicate #{propToCheck.toUpperCase()}\")\n\n    f.apply @, arguments\n    @\n\n  select:  @api \"select\"  ,(selector)        -> @_select = selector\n  from:    @api \"from\"    ,(containers...)   -> @_from = containers\n  where:   @api null      ,(predicates...)   -> @_where.push predicates\n  groupBy: @api \"groupby\" ,(groupers...)     -> @_groupby = groupers\n  having:  @api null      ,(predicates...)   -> @_having.push predicates\n  orderBy: @api \"orderby\" ,(comparator)      -> @_orderby = comparator\n\n  execute: () ->\n    @_select  = ((a) => a)    if not @_select?\n    @_from    = []            if @_from is MISSED\n    @_groupby = []            if @_groupby is MISSED\n    @_orderby = ((a, b) => 0) if @_orderby is MISSED\n\n    joined @_from...\n      .flat()\n      .applyPredicates @_where\n      .groupBy @_groupby...\n      .applyPredicates @_having\n      .sorted @_orderby\n      .map (row) => @_select(row)\n\nquery = -> new Query()", "Array::flat = () -> this.reduce(((acc, a) => [acc..., a...]), [])\n\nArray::sorted = (predicate) -> [this...].sort(predicate)\n\nArray::applyPredicates = (allPredicates) -> @filter (row) =>\n  allPredicates.every (predicates) =>\n    predicates.some (w) => w row\n\nArray::groupBy = (grouper = null, other...) ->\n  if not grouper?\n    return this\n\n  groups = {}\n  order = []\n\n  for row in this\n    group = grouper row\n\n    if not (order.some (i) => i is group)\n      order.push group\n\n    groups[group] ?= []\n    groups[group].push row\n\n  order.map (group) => [group, groups[group].groupBy(other...)]\n\njoined = (first = null, others...) ->\n  if not first?\n    return []\n\n  others_data = joined(others...)\n\n  first.map (row) =>\n    if others_data.length then others_data.map ((data) => [row, data...]) else [row]\n\n\nMISSED = (a) => a\n\nclass Query\n  constructor: () ->\n    @_select  = MISSED\n    @_from    = MISSED\n    @_groupby = MISSED\n    @_orderby = MISSED\n    @_where   = []\n    @_having  = []\n\n  @api: (propToCheck, f) -> () ->\n    if propToCheck? and @[\"_#{propToCheck}\"] != MISSED\n      throw Error(\"Duplicate #{propToCheck.toUpperCase()}\")\n\n    f.apply @, arguments\n    @\n\n  select:  @api \"select\"  ,(selector = null) -> @_select = selector\n  from:    @api \"from\"    ,(containers...)   -> @_from = containers\n  where:   @api null      ,(predicates...)   -> @_where.push predicates\n  groupBy: @api \"groupby\" ,(groupers...)     -> @_groupby = groupers\n  having:  @api null      ,(predicates...)   -> @_having.push predicates\n  orderBy: @api \"orderby\" ,(comparator)      -> @_orderby = comparator\n\n  execute: () ->\n    @_select  = ((a) => a) if @_select is MISSED or not @_select?\n    @_from    = [] if @_from is MISSED\n    @_groupby = [] if @_groupby is MISSED\n    @_orderby = ((a, b) => 0) if @_orderby is MISSED\n\n    joined @_from...\n      .flat()\n      .applyPredicates @_where\n      .groupBy @_groupby...\n      .applyPredicates @_having\n      .sorted @_orderby\n      .map (row) => @_select(row)\n\nquery = -> new Query()"]}}], "6 kyu": [{"name": "Chain Evaluation", "link": "https://www.codewars.com/kata/545a5dd961aa4c0987000980", "kuy": "6 kyu", "solutions": {"coffeescript": ["Number::add = (other) -> @ + other\nNumber::subtract = (other) -> @ - other\nNumber::multiply = (other) -> @ * other\nNumber::divide = (other) -> @ / other\nNumber::square = (other) -> @ * @"]}}, {"name": "Consonant value", "link": "https://www.codewars.com/kata/59c633e7dcc4053512000073", "kuy": "6 kyu", "solutions": {"coffeescript": ["solve = (s) ->\n  Math.max.apply @,\n    s.split(/[aeiou]+/g)\n      .filter Boolean\n      .map (part) -> [part...].map((c) -> c.charCodeAt() - 'a'.charCodeAt() + 1)\n      .map (part) -> part.reduce (a, b) -> a + b"]}}]}, "c": {"4 kyu": [{"name": "Variable Number of Arguments in C, without \"va\"", "link": "https://www.codewars.com/kata/59f3f88c25d57513d600014f", "kuy": "4 kyu", "solutions": {"c": ["int n_sum(int num, ...) {\n    int n, i, s = 0;\n\n    for (i = 0; i < num; i++) {\n        if (i == 0) {\n            __asm__ (\"mov %%esi, %0\": \"=r\" (n));\n        } else if (i == 1) {\n            __asm__ (\"mov %%edx, %0\": \"=r\" (n));\n        } else if (i == 2) {\n            __asm__ (\"mov %%ecx, %0\": \"=r\" (n));\n        } else if (i == 3) {\n            __asm__ (\"mov %%r8d, %0\": \"=r\" (n));\n        } else if (i == 4) {\n            __asm__ (\"mov %%r9d, %0\": \"=r\" (n));\n        } else {\n            n = *(&n + 6 + (i - 5) * 2);\n        }\n\n        s += n;\n    }\n\n    return s;\n}"]}}], "2 kyu": [{"name": "C Puzzle: Pointer Monster", "link": "https://www.codewars.com/kata/59cf6087aeb284909d00009c", "kuy": "2 kyu", "solutions": {"c": ["#include <stdio.h>\n\nchar a[4][7] = {\"Common\", \"Point\", \"Boost\", \"Better\"};\nchar (*b[4])[7] = {a+3, a+1, a, a+2};\n\nchar (*(*c())[4])[7]\n{\n    return &b;\n}\n\nchar (**d())[7]\n{\n    return c()[1] - 3;\n}\n\nchar buf[256];\n\nchar *pointer_monster(char (**(*f)())[7])\n{\n    int len;\n    len  = sprintf(buf, \"%s\", *f()[0]);\n    len += sprintf(buf + len, \"%s \", *((**f)()-1)[0]+4);\n    len += sprintf(buf + len, \"%s\", (*f())[0]-4);\n    len += sprintf(buf + len, \"%s\", f()[1][2]+3);\n    len += sprintf(buf + len, \"%s\", *((**f)()-1)[0]+4);\n    return buf;\n}"]}}], "7 kyu": [{"name": "Count the Digit", "link": "https://www.codewars.com/kata/566fc12495810954b1000030", "kuy": "7 kyu", "solutions": {"c": ["int hasDig(int n,int d){\n  int count = 0;\n  \n  if (n == d){\n    return 1;\n  }\n  \n  while(n){\n    int ost = n % 10;\n    \n    if (ost == d){\n      count += 1;\n    }\n    n = n / 10;\n  }\n  \n  return count;\n}\n\nint nbDig(int n, int d) {\n  int count = 0;\n  int i;\n  printf(\"%d\\n\",n);  \n  for (i = 0;i <= n;i++){\n    count += hasDig(i * i, d);\n  }\n  \n  return count;\n}"]}}, {"name": "Numbers with d occurences of digit d", "link": "https://www.codewars.com/kata/5a40fc7ce1ce0e34440000a3", "kuy": "7 kyu", "solutions": {"c": ["int is_dd(const long n){\n  int arr[9] = {0};\n  int number = n;\n  \n  while(number){\n    int ost = number % 10;\n    \n    arr[ost]++;\n    number = number / 10;\n  }\n  \n  int i;\n  \n  for (i = 1; i < 9;i++){\n    if (i == arr[i]){\n      return 1;\n    }\n  }\n  \n  return 0;\n}"]}}]}, "kotlin": {"3 kyu": [{"name": "Tricky Kotlin #8: Simple for-comprehension", "link": "https://www.codewars.com/kata/5a6f71185084d76d2000001b", "kuy": "3 kyu", "solutions": {"kotlin": ["package solution\n\nimport java.util.Optional\n\nsuspend fun <T> SequenceScope<Any>.bind(value: Optional<T>): T {\n    yield(value)\n    return value.get()\n}\n\nfun <T> `for`(block: suspend SequenceScope<Any>.() -> Unit): Optional<T> {\n    sequence(block).forEach {\n        when (it) {\n            is Optional<*> -> if (!it.isPresent) return@`for` Optional.empty()\n            else -> return@`for` Optional.of(it as T)\n        }\n    }\n    return Optional.empty()\n}", "package solution\n\nimport java.util.*\n\nsuspend fun <T> SequenceScope<Any>.bind(value: Optional<T>): T {\n    yield(value)\n    return value.get()\n}\n\nfun <T> `for`(block: suspend SequenceScope<Any>.() -> Unit): Optional<T> {\n    sequence(block).forEach {\n        if (it is Optional<*>) {\n            if (!it.isPresent) return@`for` Optional.empty()\n        } else return@`for` Optional.of(it as T)\n    }\n    return Optional.empty()\n}"]}}], "5 kyu": [{"name": "Tricky Kotlin #7: Do multiple replacement", "link": "https://www.codewars.com/kata/5a537ad4145c4615350000ff", "kuy": "5 kyu", "solutions": {"kotlin": ["fun f(s:String)=Regex(\"[()<>{}]\").replace(s){\">)}<({\"[\"<({>)}\".indexOf(it.value)].toString()}"]}}, {"name": "Tricky Kotlin #6: Reified generic argument for classes", "link": "https://www.codewars.com/kata/5a50a20fd39ec527b2000011", "kuy": "5 kyu", "solutions": {"kotlin": ["class TrickyKotlin6<T>(val type: Class<T>) {\n    inline fun <reified R> classOrSuperClassOf(a: () -> R) = type.isAssignableFrom(R::class.java)\n}\n\ninline fun <reified T> TrickyKotlin6() = TrickyKotlin6(T::class.java)\n"]}}], "6 kyu": [{"name": "Tricky Kotlin #0: extension constructor", "link": "https://www.codewars.com/kata/59b336de5fb1334711000067", "kuy": "6 kyu", "solutions": {"kotlin": ["operator fun Int.Companion.invoke(s: String) = s.toInt()\noperator fun Long.Companion.invoke(s: String) = s.toLong()\noperator fun Double.Companion.invoke(s: String) = s.toDouble()"]}}, {"name": "Tricky Kotlin #5: go into a class", "link": "https://www.codewars.com/kata/59eb8739fc3c49b67a00007d", "kuy": "6 kyu", "solutions": {"kotlin": ["operator fun <T> Box.invoke(block: Box.() -> T) = with(this, block)"]}}, {"name": "Tricky Kotlin #4: prevent StackOverflow", "link": "https://www.codewars.com/kata/59eb80eea95427d81a0000fc", "kuy": "6 kyu", "solutions": {"kotlin": ["import java.util.*\n\nfun loop(random: Random, int: Int): Int = (0..int + 1).reduce { _, _ -> random.nextInt() }\n"]}}, {"name": "Tricky Kotlin #3: define a function", "link": "https://www.codewars.com/kata/59b3d479623654e11000006f", "kuy": "6 kyu", "solutions": {"kotlin": ["val concatString = String::plus"]}}, {"name": "Tricky Kotlin #2: three fundamental functions", "link": "https://www.codewars.com/kata/59b33fb95227ddcb5f0000d4", "kuy": "6 kyu", "solutions": {"kotlin": ["fun unless(value: Boolean, block: () -> Unit) = if (!value) block() else null\n\nfun until(predicate: () -> Boolean, block: () -> Unit) {\n    while (!predicate()) block()\n}\n\nfun forceRun(block: () -> Unit) {\n    try {\n        block()\n    } catch (e: Exception) {\n    }\n}"]}}, {"name": "Tricky Kotlin #1: invoke a string", "link": "https://www.codewars.com/kata/59b33a4a8bcb77608e000103", "kuy": "6 kyu", "solutions": {"kotlin": ["operator fun <T> String.invoke(a: T): T = a"]}}]}}